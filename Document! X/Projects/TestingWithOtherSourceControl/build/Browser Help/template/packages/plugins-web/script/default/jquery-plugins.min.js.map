{"version":3,"sources":["js.cookie.js","jquery.layout.js","modernizr.custom.min.js","yepnope.js"],"names":["factory","registeredInModuleLoader","OldCookies","api","define","amd","exports","module","window","Cookies","noConflict","extend","i","result","arguments","length","key","attributes","decode","s","replace","decodeURIComponent","init","converter","set","value","document","path","defaults","expires","Date","toUTCString","JSON","stringify","test","e","write","encodeURIComponent","String","escape","attributeName","stringifiedAttributes","split","cookie","get","json","jar","cookies","parts","slice","join","charAt","name","read","parse","getJSON","remove","withConverter","$","min","Math","max","round","floor","isStr","v","type","runPluginCallbacks","Instance","a_fn","isArray","c","fn","eval","isFunction","g","ex","f","u","m","b","ie","cm","$s","lb","layout","version","revision","browser","effects","slide","all","duration","north","direction","south","east","west","drop","scale","blind","clip","explode","fade","fold","puff","size","easing","config","optionRootKeys","allPanes","borderPanes","oppositeEdge","offscreenCSS","left","right","offscreenReset","hidden","visibility","visible","resizers","cssReq","position","padding","margin","fontSize","textAlign","overflow","cssDemo","background","border","togglers","display","cursor","zIndex","content","cssDemoPane","panes","side","sizeType","dir","top","bottom","width","height","center","callbacks","getParentPaneElem","el","$el","data","$cont","container","$pane","closest","paneClass","getParentPaneInstance","getParentLayoutInstance","getEventObject","evt","stopPropagation","parsePaneName","evt_or_pane","pane","this","msg","plugins","draggable","core","effect","onCreate","onLoad","onReady","onDestroy","onUnload","afterOpen","afterClose","scrollbarWidth","getScrollbarSize","scrollbarHeight","dim","$c","appendTo","d","outerWidth","clientWidth","clientHeight","match","disableTextSelection","$d","x","disableSelection","on","enableTextSelection","enableSelection","showInvisibly","$E","force","css","style","CSS","getElementDimensions","inset","p","ei","N","cssNum","R","off","offset","offsetLeft","offsetTop","each","idx","borderWidth","toLowerCase","outerHeight","innerWidth","innerHeight","layoutWidth","layoutHeight","getElementStyles","list","a","j","k","props","sides","attrs","cssWidth","bs","boxModel","boxSizing","n","W","cssHeight","H","prop","allowAuto","jquery","parseFloat","substr","toUpperCase","isMouseOverElem","T","L","B","pageX","y","pageY","msie","info","popup","debugTitle","debugOpts","isPlainObject","debugData","t","o","sort","returnHTML","console","log","alert","$l","pos","support","fixedPosition","$e","ui","handle","createLog","children","append","navigator","userAgent","exec","indexOf","compatMode","undefined","boxSizingReliable","bm","safari","webkit","isIE6","containerClass","scrollToBookmarkOnLoad","resizeWithWindow","resizeWithWindowDelay","resizeWithWindowMaxDelay","maskPanesEarly","onresizeall_start","onresizeall_end","onload_start","onload_end","onunload_start","onunload_end","initPanes","showErrorMessages","showDebugMessages","zIndexes","pane_normal","content_mask","resizer_normal","pane_sliding","pane_animate","resizer_drag","errors","selector","addButtonError","containerMissing","centerPaneMissing","noContainerHeight","callbackError","applyDemoStyles","closable","resizable","slidable","initClosed","initHidden","contentSelector","contentIgnoreSelector","findNestedContent","resizerClass","togglerClass","buttonClass","minSize","maxSize","spacing_open","spacing_closed","togglerLength_open","togglerLength_closed","togglerAlign_open","togglerAlign_closed","togglerContent_open","togglerContent_closed","resizerDblClickToggle","autoResize","autoReopen","resizerDragOpacity","maskContents","maskObjects","maskZindex","resizingGrid","livePaneResizing","liveContentResizing","liveResizingTolerance","sliderCursor","slideTrigger_open","slideTrigger_close","slideDelay_open","slideDelay_close","hideTogglerOnSlide","preventQuickSlideClose","preventPrematureSlideClose","tips","Open","Close","Resize","Slide","Pin","Unpin","noRoomToOpen","minSizeWarning","maxSizeWarning","showOverflowOnHover","enableCursorHotkey","customHotkeyModifier","fxName","fxSpeed","fxSettings","fxOpacityFix","animatePaneSizing","containerSelector","initChildren","destroyChildren","resizeChildren","triggerEventsOnLoad","triggerEventsDuringLiveResize","onshow_start","onshow_end","onhide_start","onhide_end","onopen_start","onopen_end","onclose_start","onclose_end","onresize_start","onresize_end","onsizecontent_start","onsizecontent_end","onswap_start","onswap_end","ondrag_start","ondrag_end","paneSelector","resizerCursor","customHotkey","minWidth","minHeight","optionsMap","noDefault","transformData","hash","addKeys","branch","optKey","keys","val","backwardCompatibility","map","applyDefaultStyles","childOptions","initChildLayout","destroyChildLayout","resizeChildLayout","resizeNestedLayout","resizeWhileDragging","resizeContentWhileDragging","triggerEventsWhileDragging","maskIframesOnResize","useStateCookie","cookie.autoLoad","cookie.autoSave","cookie.keys","cookie.name","cookie.domain","cookie.path","cookie.expires","cookie.secure","noRoomToOpenTip","togglerTip_open","togglerTip_closed","resizerTip","sliderTip","renameOptions","opts","oldData","newData","itemPath","getBranch","create","D","renameAllOptions","ren","_c","cssW","cssH","elDims","styles","evtObj","evtPane","options","state","id","now","initialized","paneResizing","panesSliding","childIdx","timer","ms","clear","setTimeout","clearTimeout","_log","debug","_runCallbacks","evtName","skipBoundEvents","hasPane","lName","lng","shrt","retVal","args","$P","$Ps","trim","string","triggerHandler","$N","_fixIframe","mozilla","tagName","find","cssSize","outerSize","cssMinDims","setOuterWidth","autoHide","w","show","hide","setOuterHeight","h","_parseSize","parseInt","avail","sC","$C","$Cs","vis","szP","szC","getPaneSize","inclSpace","oSp","cSp","isHidden","isClosed","isSliding","setSizeLimits","isInitialized","paneSpacing","altPane","altS","$altP","altPaneSize","isVisible","altPaneSpacing","containerSize","minCenterDims","minCenterSize","limitSize","r","resizerPosition","rW","calcNewCenterPaneDims","getHoverClasses","allStates","$El","root","_pane","_closed","_slide","_hover","_state","hasClass","_alt","classes","addHover","addClass","removeHover","removeClass","onResizerEnter","isResizing","showMasks","resizing","onResizerLeave","hideMasks","_create","initOptions","creatingLayout","_initContainer","initHotkeys","bind","sID","unload","_initLayoutElements","retry","l","is","getPane","self","location","hasParentLayout","windowResize","createChildren","call","sm","stateManagement","cos","co","child","childState","co_sm","setInstanceKey","includeChildren","stateData","instanceKey","autoLoad","autoSave","refreshChildren","parentPaneState","newChild","pC","destroyed","isEmptyObject","delay","Number","dims","resizeAll","setWindowResizeRepeater","$H","tag","cls","className","hid","parent","isChild","num","ref","isBody","$parent","layoutContainer","layoutMethods","destroy","resize","overflowX","overflowY","outset","keyDown","rootKeys","inArray","sName","sSpeed","sSettings","fxExists","fx","fx_all","fx_pane","createFxOptions","zo","z","sel","eq","addPane","initHandles","makePaneFit","sizeMidPanes","afterInitPane","isCenter","removePane","parentLayout","layoutPane","layoutEdge","layoutRole","paneMethods","toggle","close","open","slideOpen","slideClose","slideToggle","sizePane","sizeContent","sizeHandles","enableClosable","disableClosable","enableSlideable","disableSlideable","enableResizable","disableResizable","swapPanes","swap","move","resizeLayout","initContent","pins","edge","noRoom","setPanePosition","hover","allowOverflow","resetOverflow","$R","$Rs","paneId","rClass","tClass","$T","$Ts","I","resizer","toggler","attr","mousedown","mouseup","initResizable","setAsOpen","setAsClosed","bindStartSlidingEvents","draggingAvailable","live","base","lastPos","resizerPaneClass","helperClass","helperPaneClass","helperLimitClass","helperPaneLimitClass","helperClassesSet","containment","axis","distance","grid","helper","opacity","addClasses","start","drag","limit","defaultStatus","abs","resizePanes","stop","resizingDone","resizerPos","dragPos","newSize","manualSizePane","sizeMasks","sizeMask","$M","$Ms","objectsOnly","animation","sliding","push","getMasks","$Masks","add","createMasks","isIframe","createElement","src","frameborder","filter","evt_or_destroyChildren","unbind","clearQueue","removeData","skipResize","destroyChild","hasChildren","merge","_sliding","pRoot","_hidePane","useOffscreenClose","_showPane","old","noAnimation","isHiding","openPane","noAlert","isShowing","stopImmediatePropagation","_closePane","setHandles","skipCallback","doFX","close_2","isMoving","queue","queueNext","abort","fxName_close","bindStopSlidingEvents","lockPaneForFX","fxSettings_close","fxSpeed_close","_open","syncPinBtns","open_2","cbReturn","fxName_open","fxSettings_open","fxSpeed_open","open_NOW","close_NOW","doLock","removeAttribute","enable","action","cancelMouseOut","isOpening","isSidePane","hasRoom","noVerticalRoom","maxHeight","wasOpen","forceResize","dimName","skipResizeWhileDragging","oldSize","sizePane_2","actual","tries","count","target","correct","attempt","lastTry","thisTry","fxSettings_size","animate","fxSpeed_size","visCSS","newCenter","maxWidth","newWidth","newHeight","reqPx","minE","minW","sizeE","sizeW","newE","newW","fix","evt_or_refresh","oldW","oldH","skipRefresh","evt_or_panes","remeasure","_below","paddingBottom","_measure","ignore","$Fs","nextAll","not","$Fs_vis","$F","numFooters","hiddenFooters","spaceBelow","spaceAbove","newH","paddingTop","$TC","paneLen","spacing","togAlign","togLen","resizerLength","enableSlidable","disableSlidable","evt_or_pane1","pane2","pane1","oPane1","copy","oPane2","sizes","P","C","oPane","re","oldPane","RegExp","doPin","buttons","setPinState","code","keyCode","PANE","38","40","37","39","SHIFT","altKey","shiftKey","CTRL","ctrlKey","isNaN","charCodeAt","returnValue","newCSS","curCSS","of","ofX","parents","cssSaved","ofY","contents","_sizePane","runCallbacks","jQuery","acceptsCookies","cookieEnabled","cs","pair","cookieOpts","params","date","setDate","getDate","setFullYear","domain","secure","enabled","animateLoad","stateKeys","saveCookie","inst","oC","readState","encodeJSON","deleteCookie","readCookie","decodeJSON","loadCookie","loadState","smo","noAnimate","paneStateChildren","ar","paneChildren","stateKey","ps","ic","recurse","alt","str","parseJSON","_unload","autoBindCustomButtons","ii","bindButton","btn","_","addToggle","addOpen","addClose","addPin","click","$Pin","DN","updown","lang","po","UP","pin","_load","addToggleBtn","addOpenBtn","addCloseBtn","addPinBtn","browserZoom","browserZoomCheckInterval","_init","ratio","_setTimer","sW","cW","screen","dE","documentElement","body","deviceXDPI","systemXDPI","calc","getBoundingClientRect","offsetWidth","toFixed","slideOffscreen","opt","dist","setMode","mode","offscrn","keyLR","keyTB","complete","callback","apply","dequeue","yepnope","firstScript","sTimeout","noop","isObject","obj","Object","isString","readFirstScript","parentNode","getElementsByTagName","injectJs","cb","_url","timeout","done","script","errorTimeout","setAttribute","onreadystatechange","onload","readyState","onerror","Error","removeChild","insertBefore","injectCss","href","link","rel","media","appendChild","url","tests","urlFormatter","lastIndexOf","passed","failed","hasOwnProperty"],"mappings":"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","file":"innovasys.jqueryplugins.web.min.js","sourcesContent":["/*!\n * JavaScript Cookie v2.2.1\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tvar registeredInModuleLoader;\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (!registeredInModuleLoader) {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction decode (s) {\n\t\treturn s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api() {}\n\n\t\tfunction set (key, value, attributes) {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tattributes = extend({\n\t\t\t\tpath: '/'\n\t\t\t}, api.defaults, attributes);\n\n\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\tattributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);\n\t\t\t}\n\n\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\n\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n\t\t\ttry {\n\t\t\t\tvar result = JSON.stringify(value);\n\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\tvalue = result;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tvalue = converter.write ?\n\t\t\t\tconverter.write(value, key) :\n\t\t\t\tencodeURIComponent(String(value))\n\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\n\t\t\tkey = encodeURIComponent(String(key))\n\t\t\t\t.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)\n\t\t\t\t.replace(/[\\(\\)]/g, escape);\n\n\t\t\tvar stringifiedAttributes = '';\n\t\t\tfor (var attributeName in attributes) {\n\t\t\t\tif (!attributes[attributeName]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstringifiedAttributes += '; ' + attributeName;\n\t\t\t\tif (attributes[attributeName] === true) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Considers RFC 6265 section 5.2:\n\t\t\t\t// ...\n\t\t\t\t// 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n\t\t\t\t//     character:\n\t\t\t\t// Consume the characters of the unparsed-attributes up to,\n\t\t\t\t// not including, the first %x3B (\";\") character.\n\t\t\t\t// ...\n\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n\t\t\t}\n\n\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\n\t\t}\n\n\t\tfunction get (key, json) {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar jar = {};\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all.\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (!json && cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar name = decode(parts[0]);\n\t\t\t\t\tcookie = (converter.read || converter)(cookie, name) ||\n\t\t\t\t\t\tdecode(cookie);\n\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tjar[name] = cookie;\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn key ? jar[key] : jar;\n\t\t}\n\n\t\tapi.set = set;\n\t\tapi.get = function (key) {\n\t\t\treturn get(key, false /* read as raw */);\n\t\t};\n\t\tapi.getJSON = function (key) {\n\t\t\treturn get(key, true /* read as json */);\n\t\t};\n\t\tapi.remove = function (key, attributes) {\n\t\t\tset(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.defaults = {};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n","/**\r\n * @preserve\r\n * jquery.layout 1.4.4\r\n * $Date: 2014-11-29 08:00:00 (Sat, 29 November 2014) $\r\n * $Rev: 1.0404 $\r\n *\r\n * Copyright (c) 2014 Kevin Dalman (http://jquery-dev.com)\r\n * Based on work by Fabrizio Balliano (http://www.fabrizioballiano.net)\r\n *\r\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\r\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\r\n *\r\n * SEE: http://layout.jquery-dev.com/LICENSE.txt\r\n *\r\n * Changelog: http://layout.jquery-dev.com/changelog.cfm\r\n *\r\n * Docs: http://layout.jquery-dev.com/documentation.html\r\n * Tips: http://layout.jquery-dev.com/tips.html\r\n * Help: http://groups.google.com/group/jquery-ui-layout\r\n */\r\n\r\n/* JavaDoc Info: http://code.google.com/closure/compiler/docs/js-for-compiler.html\r\n * {!Object}\tnon-nullable type (never NULL)\r\n * {?string}\tnullable type (sometimes NULL) - default for {Object}\r\n * {number=}\toptional parameter\r\n * {*}\t\t\tALL types\r\n */\r\n/*\tTODO for jQ 2.x \r\n *\tcheck $.fn.disableSelection - this is in jQuery UI 1.9.x\r\n */\r\n\r\n// NOTE: For best readability, view with a fixed-width font and tabs equal to 4-chars\r\n\r\n;(function ($) {\r\n\r\n// alias Math methods - used a lot!\r\nvar\tmin\t\t= Math.min\r\n,\tmax\t\t= Math.max\r\n,\tround\t= Math.floor\r\n\r\n,\tisStr\t=  function (v) { return $.type(v) === \"string\"; }\r\n\r\n\t/**\r\n\t * @param {!Object}\t\t\tInstance\r\n\t * @param {Array.<string>}\ta_fn\r\n\t */\r\n,\trunPluginCallbacks = function (Instance, a_fn) {\r\n\t\tif ($.isArray(a_fn))\r\n\t\t\tfor (var i=0, c=a_fn.length; i<c; i++) {\r\n\t\t\t\tvar fn = a_fn[i];\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (isStr(fn)) // 'name' of a function\r\n\t\t\t\t\t\tfn = eval(fn);\r\n\t\t\t\t\tif ($.isFunction(fn))\r\n\t\t\t\t\t\tg(fn)( Instance );\r\n\t\t\t\t} catch (ex) {}\r\n\t\t\t}\r\n\t\tfunction g (f) { return f; }; // compiler hack\r\n\t}\r\n;\r\n\r\n/*\r\n *\tGENERIC $.layout METHODS - used by all layouts\r\n */\r\n$.layout = {\r\n\r\n\tversion:\t\"1.4.4\"\r\n,\trevision:\t1.0404 // eg: ver 1.4.4 = rev 1.0404 - major(n+).minor(nn)+patch(nn+)\r\n\r\n\t// $.layout.browser REPLACES $.browser\r\n,\tbrowser:\t{} // set below\r\n\r\n\t// *PREDEFINED* EFFECTS & DEFAULTS \r\n\t// MUST list effect here - OR MUST set an fxSettings option (can be an empty hash: {})\r\n,\teffects: {\r\n\r\n\t//\tPane Open/Close Animations\r\n\t\tslide: {\r\n\t\t\tall:\t{ duration:  \"fast\"\t} // eg: duration: 1000, easing: \"easeOutBounce\"\r\n\t\t,\tnorth:\t{ direction: \"up\"\t}\r\n\t\t,\tsouth:\t{ direction: \"down\"\t}\r\n\t\t,\teast:\t{ direction: \"right\"}\r\n\t\t,\twest:\t{ direction: \"left\"\t}\r\n\t\t}\r\n\t,\tdrop: {\r\n\t\t\tall:\t{ duration:  \"slow\"\t}\r\n\t\t,\tnorth:\t{ direction: \"up\"\t}\r\n\t\t,\tsouth:\t{ direction: \"down\"\t}\r\n\t\t,\teast:\t{ direction: \"right\"}\r\n\t\t,\twest:\t{ direction: \"left\"\t}\r\n\t\t}\r\n\t,\tscale: {\r\n\t\t\tall:\t{ duration:\t\"fast\"\t}\r\n\t\t}\r\n\t//\tthese are not recommended, but can be used\r\n\t,\tblind:\t\t{}\r\n\t,\tclip:\t\t{}\r\n\t,\texplode:\t{}\r\n\t,\tfade:\t\t{}\r\n\t,\tfold:\t\t{}\r\n\t,\tpuff:\t\t{}\r\n\r\n\t//\tPane Resize Animations\r\n\t,\tsize: {\r\n\t\t\tall:\t{ easing:\t\"swing\"\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// INTERNAL CONFIG DATA - DO NOT CHANGE THIS!\r\n,\tconfig: {\r\n\t\toptionRootKeys:\t\"effects,panes,north,south,west,east,center\".split(\",\")\r\n\t,\tallPanes:\t\t\"north,south,west,east,center\".split(\",\")\r\n\t,\tborderPanes:\t\"north,south,west,east\".split(\",\")\r\n\t,\toppositeEdge: {\r\n\t\t\tnorth:\t\"south\"\r\n\t\t,\tsouth:\t\"north\"\r\n\t\t,\teast: \t\"west\"\r\n\t\t,\twest: \t\"east\"\r\n\t\t}\r\n\t//\toffscreen data\r\n\t,\toffscreenCSS:\t{ left: \"-99999px\", right: \"auto\" } // used by hide/close if useOffscreenClose=true\r\n\t,\toffscreenReset:\t\"offscreenReset\" // key used for data\r\n\t//\tCSS used in multiple places\r\n\t,\thidden:\t\t{ visibility: \"hidden\" }\r\n\t,\tvisible:\t{ visibility: \"visible\" }\r\n\t//\tlayout element settings\r\n\t,\tresizers: {\r\n\t\t\tcssReq: {\r\n\t\t\t\tposition: \t\"absolute\"\r\n\t\t\t,\tpadding: \t0\r\n\t\t\t,\tmargin: \t0\r\n\t\t\t,\tfontSize:\t\"1px\"\r\n\t\t\t,\ttextAlign:\t\"left\"\t// to counter-act \"center\" alignment!\r\n\t\t\t,\toverflow: \t\"hidden\" // prevent toggler-button from overflowing\r\n\t\t\t//\tSEE $.layout.defaults.zIndexes.resizer_normal\r\n\t\t\t}\r\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\r\n\t\t\t\tbackground: \"#DDD\"\r\n\t\t\t,\tborder:\t\t\"none\"\r\n\t\t\t}\r\n\t\t}\r\n\t,\ttogglers: {\r\n\t\t\tcssReq: {\r\n\t\t\t\tposition: \t\"absolute\"\r\n\t\t\t,\tdisplay: \t\"block\"\r\n\t\t\t,\tpadding: \t0\r\n\t\t\t,\tmargin: \t0\r\n\t\t\t,\toverflow:\t\"hidden\"\r\n\t\t\t,\ttextAlign:\t\"center\"\r\n\t\t\t,\tfontSize:\t\"1px\"\r\n\t\t\t,\tcursor: \t\"pointer\"\r\n\t\t\t,\tzIndex: \t1\r\n\t\t\t}\r\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\r\n\t\t\t\tbackground: \"#AAA\"\r\n\t\t\t}\r\n\t\t}\r\n\t,\tcontent: {\r\n\t\t\tcssReq: {\r\n\t\t\t\tposition:\t\"relative\" /* contain floated or positioned elements */\r\n\t\t\t}\r\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\r\n\t\t\t\toverflow:\t\"auto\"\r\n\t\t\t,\tpadding:\t\"10px\"\r\n\t\t\t}\r\n\t\t,\tcssDemoPane: { // DEMO CSS - REMOVE scrolling from 'pane' when it has a content-div\r\n\t\t\t\toverflow:\t\"hidden\"\r\n\t\t\t,\tpadding:\t0\r\n\t\t\t}\r\n\t\t}\r\n\t,\tpanes: { // defaults for ALL panes - overridden by 'per-pane settings' below\r\n\t\t\tcssReq: {\r\n\t\t\t\tposition: \t\"absolute\"\r\n\t\t\t,\tmargin:\t\t0\r\n\t\t\t//\t$.layout.defaults.zIndexes.pane_normal\r\n\t\t\t}\r\n\t\t,\tcssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true\r\n\t\t\t\tpadding:\t\"10px\"\r\n\t\t\t,\tbackground:\t\"#FFF\"\r\n\t\t\t,\tborder:\t\t\"1px solid #BBB\"\r\n\t\t\t,\toverflow:\t\"auto\"\r\n\t\t\t}\r\n\t\t}\r\n\t,\tnorth: {\r\n\t\t\tside:\t\t\t\"top\"\r\n\t\t,\tsizeType:\t\t\"Height\"\r\n\t\t,\tdir:\t\t\t\"horz\"\r\n\t\t,\tcssReq: {\r\n\t\t\t\ttop: \t\t0\r\n\t\t\t,\tbottom: \t\"auto\"\r\n\t\t\t,\tleft: \t\t0\r\n\t\t\t,\tright: \t\t0\r\n\t\t\t,\twidth: \t\t\"auto\"\r\n\t\t\t//\theight: \tDYNAMIC\r\n\t\t\t}\r\n\t\t}\r\n\t,\tsouth: {\r\n\t\t\tside:\t\t\t\"bottom\"\r\n\t\t,\tsizeType:\t\t\"Height\"\r\n\t\t,\tdir:\t\t\t\"horz\"\r\n\t\t,\tcssReq: {\r\n\t\t\t\ttop: \t\t\"auto\"\r\n\t\t\t,\tbottom: \t0\r\n\t\t\t,\tleft: \t\t0\r\n\t\t\t,\tright: \t\t0\r\n\t\t\t,\twidth: \t\t\"auto\"\r\n\t\t\t//\theight: \tDYNAMIC\r\n\t\t\t}\r\n\t\t}\r\n\t,\teast: {\r\n\t\t\tside:\t\t\t\"right\"\r\n\t\t,\tsizeType:\t\t\"Width\"\r\n\t\t,\tdir:\t\t\t\"vert\"\r\n\t\t,\tcssReq: {\r\n\t\t\t\tleft: \t\t\"auto\"\r\n\t\t\t,\tright: \t\t0\r\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\r\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\r\n\t\t\t,\theight: \t\"auto\"\r\n\t\t\t//\twidth: \t\tDYNAMIC\r\n\t\t\t}\r\n\t\t}\r\n\t,\twest: {\r\n\t\t\tside:\t\t\t\"left\"\r\n\t\t,\tsizeType:\t\t\"Width\"\r\n\t\t,\tdir:\t\t\t\"vert\"\r\n\t\t,\tcssReq: {\r\n\t\t\t\tleft: \t\t0\r\n\t\t\t,\tright: \t\t\"auto\"\r\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\r\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\r\n\t\t\t,\theight: \t\"auto\"\r\n\t\t\t//\twidth: \t\tDYNAMIC\r\n\t\t\t}\r\n\t\t}\r\n\t,\tcenter: {\r\n\t\t\tdir:\t\t\t\"center\"\r\n\t\t,\tcssReq: {\r\n\t\t\t\tleft: \t\t\"auto\" // DYNAMIC\r\n\t\t\t,\tright: \t\t\"auto\" // DYNAMIC\r\n\t\t\t,\ttop: \t\t\"auto\" // DYNAMIC\r\n\t\t\t,\tbottom: \t\"auto\" // DYNAMIC\r\n\t\t\t,\theight: \t\"auto\"\r\n\t\t\t,\twidth: \t\t\"auto\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// CALLBACK FUNCTION NAMESPACE - used to store reusable callback functions\r\n,\tcallbacks: {}\r\n\r\n,\tgetParentPaneElem: function (el) {\r\n\t\t// must pass either a container or pane element\r\n\t\tvar $el = $(el)\r\n\t\t,\tlayout = $el.data(\"layout\") || $el.data(\"parentLayout\");\r\n\t\tif (layout) {\r\n\t\t\tvar $cont = layout.container;\r\n\t\t\t// see if this container is directly-nested inside an outer-pane\r\n\t\t\tif ($cont.data(\"layoutPane\")) return $cont;\r\n\t\t\tvar $pane = $cont.closest(\".\"+ $.layout.defaults.panes.paneClass);\r\n\t\t\t// if a pane was found, return it\r\n\t\t\tif ($pane.data(\"layoutPane\")) return $pane;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n,\tgetParentPaneInstance: function (el) {\r\n\t\t// must pass either a container or pane element\r\n\t\tvar $pane = $.layout.getParentPaneElem(el);\r\n\t\treturn $pane ? $pane.data(\"layoutPane\") : null;\r\n\t}\r\n\r\n,\tgetParentLayoutInstance: function (el) {\r\n\t\t// must pass either a container or pane element\r\n\t\tvar $pane = $.layout.getParentPaneElem(el);\r\n\t\treturn $pane ? $pane.data(\"parentLayout\") : null;\r\n\t}\r\n\r\n,\tgetEventObject: function (evt) {\r\n\t\treturn typeof evt === \"object\" && evt.stopPropagation ? evt : null;\r\n\t}\r\n,\tparsePaneName: function (evt_or_pane) {\r\n\t\tvar evt = $.layout.getEventObject( evt_or_pane )\r\n\t\t,\tpane = evt_or_pane;\r\n\t\tif (evt) {\r\n\t\t\t// ALWAYS stop propagation of events triggered in Layout!\r\n\t\t\tevt.stopPropagation();\r\n\t\t\tpane = $(this).data(\"layoutEdge\");\r\n\t\t}\r\n\t\tif (pane && !/^(west|east|north|south|center)$/.test(pane)) {\r\n\t\t\t$.layout.msg('LAYOUT ERROR - Invalid pane-name: \"'+ pane +'\"');\r\n\t\t\tpane = \"error\";\r\n\t\t}\r\n\t\treturn pane;\r\n\t}\r\n\r\n\r\n\t// LAYOUT-PLUGIN REGISTRATION\r\n\t// more plugins can added beyond this default list\r\n,\tplugins: {\r\n\t\tdraggable:\t\t!!$.fn.draggable // resizing\r\n\t,\teffects: {\r\n\t\t\tcore:\t\t!!$.effects\t\t// animimations (specific effects tested by initOptions)\r\n\t\t,\tslide:\t\t$.effects && ($.effects.slide || ($.effects.effect && $.effects.effect.slide)) // default effect\r\n\t\t}\r\n\t}\r\n\r\n//\tarrays of plugin or other methods to be triggered for events in *each layout* - will be passed 'Instance'\r\n,\tonCreate:\t[]\t// runs when layout is just starting to be created - right after options are set\r\n,\tonLoad:\t\t[]\t// runs after layout container and global events init, but before initPanes is called\r\n,\tonReady:\t[]\t// runs after initialization *completes* - ie, after initPanes completes successfully\r\n,\tonDestroy:\t[]\t// runs after layout is destroyed\r\n,\tonUnload:\t[]\t// runs after layout is destroyed OR when page unloads\r\n,\tafterOpen:\t[]\t// runs after setAsOpen() completes\r\n,\tafterClose:\t[]\t// runs after setAsClosed() completes\r\n\r\n\t/*\r\n\t *\tGENERIC UTILITY METHODS\r\n\t */\r\n\r\n\t// calculate and return the scrollbar width, as an integer\r\n,\tscrollbarWidth:\t\tfunction () { return window.scrollbarWidth  || $.layout.getScrollbarSize('width'); }\r\n,\tscrollbarHeight:\tfunction () { return window.scrollbarHeight || $.layout.getScrollbarSize('height'); }\r\n,\tgetScrollbarSize:\tfunction (dim) {\r\n\t\tvar $c\t= $('<div style=\"position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; border: 0; overflow: scroll;\"></div>').appendTo(\"body\")\r\n\t\t,\td\t= { width: $c.outerWidth - $c[0].clientWidth, height: 100 - $c[0].clientHeight };\r\n\t\t$c.remove();\r\n\t\twindow.scrollbarWidth\t= d.width;\r\n\t\twindow.scrollbarHeight\t= d.height;\r\n\t\treturn dim.match(/^(width|height)$/) ? d[dim] : d;\r\n\t}\r\n\r\n\r\n,\tdisableTextSelection: function () {\r\n\t\tvar $d\t= $(document)\r\n\t\t,\ts\t= 'textSelectionDisabled'\r\n\t\t,\tx\t= 'textSelectionInitialized'\r\n\t\t;\r\n\t\tif ($.fn.disableSelection) {\r\n\t\t\tif (!$d.data(x)) // document hasn't been initialized yet\r\n\t\t\t\t$d.on('mouseup', $.layout.enableTextSelection ).data(x, true);\r\n\t\t\tif (!$d.data(s))\r\n\t\t\t\t$d.disableSelection().data(s, true);\r\n\t\t}\r\n\t}\r\n,\tenableTextSelection: function () {\r\n\t\tvar $d\t= $(document)\r\n\t\t,\ts\t= 'textSelectionDisabled';\r\n\t\tif ($.fn.enableSelection && $d.data(s))\r\n\t\t\t$d.enableSelection().data(s, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns hash container 'display' and 'visibility'\r\n\t *\r\n\t * @see\t$.swap() - swaps CSS, runs callback, resets CSS\r\n\t * @param  {!Object}\t\t$E\t\t\t\tjQuery element\r\n\t * @param  {boolean=}\t[force=false]\tRun even if display != none\r\n\t * @return {!Object}\t\t\t\t\t\tReturns current style props, if applicable\r\n\t */\r\n,\tshowInvisibly: function ($E, force) {\r\n\t\tif ($E && $E.length && (force || $E.css(\"display\") === \"none\")) { // only if not *already hidden*\r\n\t\t\tvar s = $E[0].style\r\n\t\t\t\t// save ONLY the 'style' props because that is what we must restore\r\n\t\t\t,\tCSS = { display: s.display || '', visibility: s.visibility || '' };\r\n\t\t\t// show element 'invisibly' so can be measured\r\n\t\t\t$E.css({ display: \"block\", visibility: \"hidden\" });\r\n\t\t\treturn CSS;\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns data for setting size of an element (container or a pane).\r\n\t *\r\n\t * @see  _create(), onWindowResize() for container, plus others for pane\r\n\t * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, outerWidth, innerHeight, etc\r\n\t */\r\n,\tgetElementDimensions: function ($E, inset) {\r\n\t\tvar\r\n\t\t//\tdimensions hash - start with current data IF passed\r\n\t\t\td\t= { css: {}, inset: {} }\r\n\t\t,\tx\t= d.css\t\t\t// CSS hash\r\n\t\t,\ti\t= { bottom: 0 }\t// TEMP insets (bottom = complier hack)\r\n\t\t,\tN\t= $.layout.cssNum\r\n\t\t,\tR\t= Math.round\r\n\t\t,\toff = $E.offset()\r\n\t\t,\tb, p, ei\t\t\t// TEMP border, padding\r\n\t\t;\r\n\t\td.offsetLeft = off.left;\r\n\t\td.offsetTop  = off.top;\r\n\r\n\t\tif (!inset) inset = {}; // simplify logic below\r\n\r\n\t\t$.each(\"Left,Right,Top,Bottom\".split(\",\"), function (idx, e) { // e = edge\r\n\t\t\tb = x[\"border\" + e] = $.layout.borderWidth($E, e);\r\n\t\t\tp = x[\"padding\"+ e] = $.layout.cssNum($E, \"padding\"+e);\r\n\t\t\tei = e.toLowerCase();\r\n\t\t\td.inset[ei] = inset[ei] >= 0 ? inset[ei] : p; // any missing insetX value = paddingX\r\n\t\t\ti[ei] = d.inset[ei] + b; // total offset of content from outer side\r\n\t\t});\r\n\r\n\t\tx.width\t\t= R($E.width());\r\n\t\tx.height\t= R($E.height());\r\n\t\tx.top\t\t= N($E,\"top\",true);\r\n\t\tx.bottom\t= N($E,\"bottom\",true);\r\n\t\tx.left\t\t= N($E,\"left\",true);\r\n\t\tx.right\t\t= N($E,\"right\",true);\r\n\r\n\t\td.outerWidth\t= R($E.outerWidth());\r\n\t\td.outerHeight\t= R($E.outerHeight());\r\n\t\t// calc the TRUE inner-dimensions, even in quirks-mode!\r\n\t\td.innerWidth\t= max(0, d.outerWidth  - i.left - i.right);\r\n\t\td.innerHeight\t= max(0, d.outerHeight - i.top  - i.bottom);\r\n\t\t// layoutWidth/Height is used in calcs for manual resizing\r\n\t\t// layoutW/H only differs from innerW/H when in quirks-mode - then is like outerW/H\r\n\t\td.layoutWidth\t= R($E.innerWidth());\r\n\t\td.layoutHeight\t= R($E.innerHeight());\r\n\r\n\t\t//if ($E.prop('tagName') === 'BODY') { debugData( d, $E.prop('tagName') ); } // DEBUG\r\n\r\n\t\t//d.visible\t= $E.is(\":visible\");// && x.width > 0 && x.height > 0;\r\n\r\n\t\treturn d;\r\n\t}\r\n\r\n,\tgetElementStyles: function ($E, list) {\r\n\t\tvar\r\n\t\t\tCSS\t= {}\r\n\t\t,\tstyle\t= $E[0].style\r\n\t\t,\tprops\t= list.split(\",\")\r\n\t\t,\tsides\t= \"Top,Bottom,Left,Right\".split(\",\")\r\n\t\t,\tattrs\t= \"Color,Style,Width\".split(\",\")\r\n\t\t,\tp, s, a, i, j, k\r\n\t\t;\r\n\t\tfor (i=0; i < props.length; i++) {\r\n\t\t\tp = props[i];\r\n\t\t\tif (p.match(/(border|padding|margin)$/))\r\n\t\t\t\tfor (j=0; j < 4; j++) {\r\n\t\t\t\t\ts = sides[j];\r\n\t\t\t\t\tif (p === \"border\")\r\n\t\t\t\t\t\tfor (k=0; k < 3; k++) {\r\n\t\t\t\t\t\t\ta = attrs[k];\r\n\t\t\t\t\t\t\tCSS[p+s+a] = style[p+s+a];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tCSS[p+s] = style[p+s];\r\n\t\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tCSS[p] = style[p];\r\n\t\t};\r\n\t\treturn CSS\r\n\t}\r\n\r\n\t/**\r\n\t * Return the innerWidth for the current browser/doctype\r\n\t *\r\n\t * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()\r\n\t * @param  {Array.<Object>}\t$E  Must pass a jQuery object - first element is processed\r\n\t * @param  {number=}\t\t\touterWidth (optional) Can pass a width, allowing calculations BEFORE element is resized\r\n\t * @return {number}\t\t\tReturns the innerWidth of the elem by subtracting padding and borders\r\n\t */\r\n,\tcssWidth: function ($E, outerWidth) {\r\n\t\t// a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed\r\n\t\tif (outerWidth <= 0) return 0;\r\n\r\n\t\tvar lb\t= $.layout.browser\r\n\t\t,\tbs\t= !lb.boxModel ? \"border-box\" : lb.boxSizing ? $E.css(\"boxSizing\") : \"content-box\"\r\n\t\t,\tb\t= $.layout.borderWidth\r\n\t\t,\tn\t= $.layout.cssNum\r\n\t\t,\tW\t= outerWidth\r\n\t\t;\r\n\t\t// strip border and/or padding from outerWidth to get CSS Width\r\n\t\tif (bs !== \"border-box\")\r\n\t\t\tW -= (b($E, \"Left\") + b($E, \"Right\"));\r\n\t\tif (bs === \"content-box\")\r\n\t\t\tW -= (n($E, \"paddingLeft\") + n($E, \"paddingRight\"));\r\n\t\treturn max(0,W);\r\n\t}\r\n\r\n\t/**\r\n\t * Return the innerHeight for the current browser/doctype\r\n\t *\r\n\t * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()\r\n\t * @param  {Array.<Object>}\t$E  Must pass a jQuery object - first element is processed\r\n\t * @param  {number=}\t\t\touterHeight  (optional) Can pass a width, allowing calculations BEFORE element is resized\r\n\t * @return {number}\t\t\tReturns the innerHeight of the elem by subtracting padding and borders\r\n\t */\r\n,\tcssHeight: function ($E, outerHeight) {\r\n\t\t// a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed\r\n\t\tif (outerHeight <= 0) return 0;\r\n\r\n\t\tvar lb\t= $.layout.browser\r\n\t\t,\tbs\t= !lb.boxModel ? \"border-box\" : lb.boxSizing ? $E.css(\"boxSizing\") : \"content-box\"\r\n\t\t,\tb\t= $.layout.borderWidth\r\n\t\t,\tn\t= $.layout.cssNum\r\n\t\t,\tH\t= outerHeight\r\n\t\t;\r\n\t\t// strip border and/or padding from outerHeight to get CSS Height\r\n\t\tif (bs !== \"border-box\")\r\n\t\t\tH -= (b($E, \"Top\") + b($E, \"Bottom\"));\r\n\t\tif (bs === \"content-box\")\r\n\t\t\tH -= (n($E, \"paddingTop\") + n($E, \"paddingBottom\"));\r\n\t\treturn max(0,H);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the 'current CSS numeric value' for a CSS property - 0 if property does not exist\r\n\t *\r\n\t * @see  Called by many methods\r\n\t * @param {Array.<Object>}\t$E\t\t\t\t\tMust pass a jQuery object - first element is processed\r\n\t * @param {string}\t\t\tprop\t\t\t\tThe name of the CSS property, eg: top, width, etc.\r\n\t * @param {boolean=}\t\t\t[allowAuto=false]\ttrue = return 'auto' if that is value; false = return 0\r\n\t * @return {(string|number)}\t\t\t\t\t\tUsually used to get an integer value for position (top, left) or size (height, width)\r\n\t */\r\n,\tcssNum: function ($E, prop, allowAuto) {\r\n\t\tif (!$E.jquery) $E = $($E);\r\n\t\tvar CSS = $.layout.showInvisibly($E)\r\n\t\t,\tp\t= $.css($E[0], prop, true)\r\n\t\t,\tv\t= allowAuto && p==\"auto\" ? p : Math.round(parseFloat(p) || 0);\r\n\t\t$E.css( CSS ); // RESET\r\n\t\treturn v;\r\n\t}\r\n\r\n,\tborderWidth: function (el, side) {\r\n\t\tif (el.jquery) el = el[0];\r\n\t\tvar b = \"border\"+ side.substr(0,1).toUpperCase() + side.substr(1); // left => Left\r\n\t\treturn $.css(el, b+\"Style\", true) === \"none\" ? 0 : Math.round(parseFloat($.css(el, b+\"Width\", true)) || 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Mouse-tracking utility - FUTURE REFERENCE\r\n\t *\r\n\t * init: if (!window.mouse) {\r\n\t *\t\t\twindow.mouse = { x: 0, y: 0 };\r\n\t *\t\t\t$(document).mousemove( $.layout.trackMouse );\r\n\t *\t\t}\r\n\t *\r\n\t * @param {Object}\t\tevt\r\n\t *\r\n,\ttrackMouse: function (evt) {\r\n\t\twindow.mouse = { x: evt.clientX, y: evt.clientY };\r\n\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * SUBROUTINE for preventPrematureSlideClose option\r\n\t *\r\n\t * @param {Object}\t\tevt\r\n\t * @param {Object=}\t\tel\r\n\t */\r\n,\tisMouseOverElem: function (evt, el) {\r\n\t\tvar\r\n\t\t\t$E\t= $(el || this)\r\n\t\t,\td\t= $E.offset()\r\n\t\t,\tT\t= d.top\r\n\t\t,\tL\t= d.left\r\n\t\t,\tR\t= L + $E.outerWidth()\r\n\t\t,\tB\t= T + $E.outerHeight()\r\n\t\t,\tx\t= evt.pageX\t// evt.clientX ?\r\n\t\t,\ty\t= evt.pageY\t// evt.clientY ?\r\n\t\t;\r\n\t\t// if X & Y are < 0, probably means is over an open SELECT\r\n\t\treturn ($.layout.browser.msie && x < 0 && y < 0) || ((x >= L && x <= R) && (y >= T && y <= B));\r\n\t}\r\n\r\n\t/**\r\n\t * Message/Logging Utility\r\n\t *\r\n\t * @example $.layout.msg(\"My message\");\t\t\t\t// log text\r\n\t * @example $.layout.msg(\"My message\", true);\t\t// alert text\r\n\t * @example $.layout.msg({ foo: \"bar\" }, \"Title\");\t// log hash-data, with custom title\r\n\t * @example $.layout.msg({ foo: \"bar\" }, true, \"Title\", { sort: false }); -OR-\r\n\t * @example $.layout.msg({ foo: \"bar\" }, \"Title\", { sort: false, display: true }); // alert hash-data\r\n\t *\r\n\t * @param {(Object|string)}\t\t\tinfo\t\t\tString message OR Hash/Array\r\n\t * @param {(Boolean|string|Object)=}\t[popup=false]\tTrue means alert-box - can be skipped\r\n\t * @param {(Object|string)=}\t\t\t[debugTitle=\"\"]\tTitle for Hash data - can be skipped\r\n\t * @param {Object=}\t\t\t\t\t[debugOpts]\t\tExtra options for debug output\r\n\t */\r\n,\tmsg: function (info, popup, debugTitle, debugOpts) {\r\n\t\tif ($.isPlainObject(info) && window.debugData) {\r\n\t\t\tif (typeof popup === \"string\") {\r\n\t\t\t\tdebugOpts\t= debugTitle;\r\n\t\t\t\tdebugTitle\t= popup;\r\n\t\t\t}\r\n\t\t\telse if (typeof debugTitle === \"object\") {\r\n\t\t\t\tdebugOpts\t= debugTitle;\r\n\t\t\t\tdebugTitle\t= null;\r\n\t\t\t}\r\n\t\t\tvar t = debugTitle || \"log( <object> )\"\r\n\t\t\t,\to = $.extend({ sort: false, returnHTML: false, display: false }, debugOpts);\r\n\t\t\tif (popup === true || o.display)\r\n\t\t\t\tdebugData( info, t, o );\r\n\t\t\telse if (window.console)\r\n\t\t\t\tconsole.log(debugData( info, t, o ));\r\n\t\t}\r\n\t\telse if (popup)\r\n\t\t\talert(info);\r\n\t\telse if (window.console)\r\n\t\t\tconsole.log(info);\r\n\t\telse {\r\n\t\t\tvar id\t= \"#layoutLogger\"\r\n\t\t\t,\t$l = $(id);\r\n\t\t\tif (!$l.length)\r\n\t\t\t\t$l = createLog();\r\n\t\t\t$l.children(\"ul\").append('<li style=\"padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;\">'+ info.replace(/\\</g,\"&lt;\").replace(/\\>/g,\"&gt;\") +'</li>');\r\n\t\t}\r\n\r\n\t\tfunction createLog () {\r\n\t\t\tvar pos = $.support.fixedPosition ? 'fixed' : 'absolute'\r\n\t\t\t,\t$e = $('<div id=\"layoutLogger\" style=\"position: '+ pos +'; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);\">'\r\n\t\t\t\t+\t'<div style=\"font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;\">'\r\n\t\t\t\t+\t'<span style=\"float: right; padding-left: 7px; cursor: pointer;\" title=\"Remove Console\" onclick=\"$(this).closest(\\'#layoutLogger\\').remove()\">X</span>Layout console.log</div>'\r\n\t\t\t\t+\t'<ul style=\"font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;\"></ul>'\r\n\t\t\t\t+ '</div>'\r\n\t\t\t\t).appendTo(\"body\");\r\n\t\t\t$e.css('left', $(window).width() - $e.outerWidth() - 5)\r\n\t\t\tif ($.ui.draggable) $e.draggable({ handle: ':first-child' });\r\n\t\t\treturn $e;\r\n\t\t};\r\n\t}\r\n\r\n};\r\n\r\n\r\n/*\r\n *\t$.layout.browser REPLACES removed $.browser, with extra data\r\n *\tParsing code here adapted from jQuery 1.8 $.browse\r\n */\r\n(function(){\r\n\tvar u = navigator.userAgent.toLowerCase()\r\n\t,\tm = /(chrome)[ \\/]([\\w.]+)/.exec( u )\r\n\t\t||\t/(webkit)[ \\/]([\\w.]+)/.exec( u )\r\n\t\t||\t/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( u )\r\n\t\t||\t/(msie) ([\\w.]+)/.exec( u )\r\n\t\t||\tu.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( u )\r\n\t\t||\t[]\r\n\t,\tb = m[1] || \"\"\r\n\t,\tv = m[2] || 0\r\n\t,\tie = b === \"msie\"\r\n\t,\tcm = document.compatMode\r\n\t,\t$s = $.support\r\n\t,\tbs = $s.boxSizing !== undefined ? $s.boxSizing : $s.boxSizingReliable\r\n\t,\tbm = !ie || !cm || cm === \"CSS1Compat\" || $s.boxModel || false\r\n\t,\tlb = $.layout.browser = {\r\n\t\t\tversion:\tv\r\n\t\t,\tsafari:\t\tb === \"webkit\"\t// webkit (NOT chrome) = safari\r\n\t\t,\twebkit:\t\tb === \"chrome\"\t// chrome = webkit\r\n\t\t,\tmsie:\t\tie\r\n\t\t,\tisIE6:\t\tie && v == 6\r\n\t\t\t// ONLY IE reverts to old box-model - Note that compatMode was deprecated as of IE8\r\n\t\t,\tboxModel:\tbm\r\n\t\t,\tboxSizing:\t!!(typeof bs === \"function\" ? bs() : bs)\r\n\t\t};\r\n\t;\r\n\tif (b) lb[b] = true; // set CURRENT browser\r\n\t/*\tOLD versions of jQuery only set $.support.boxModel after page is loaded\r\n\t *\tso if this is IE, use support.boxModel to test for quirks-mode (ONLY IE changes boxModel) */\r\n\tif (!bm && !cm) $(function(){ lb.boxModel = $s.boxModel; });\r\n})();\r\n\r\n\r\n// DEFAULT OPTIONS\r\n$.layout.defaults = {\r\n/*\r\n *\tLAYOUT & LAYOUT-CONTAINER OPTIONS\r\n *\t- none of these options are applicable to individual panes\r\n */\r\n\tname:\t\t\t\t\t\t\"\"\t\t\t// Not required, but useful for buttons and used for the state-cookie\r\n,\tcontainerClass:\t\t\t\t\"ui-layout-container\" // layout-container element\r\n,\tinset:\t\t\t\t\t\tnull\t\t// custom container-inset values (override padding)\r\n,\tscrollToBookmarkOnLoad:\t\ttrue\t\t// after creating a layout, scroll to bookmark in URL (.../page.htm#myBookmark)\r\n,\tresizeWithWindow:\t\t\ttrue\t\t// bind thisLayout.resizeAll() to the window.resize event\r\n,\tresizeWithWindowDelay:\t\t200\t\t\t// delay calling resizeAll because makes window resizing very jerky\r\n,\tresizeWithWindowMaxDelay:\t0\t\t\t// 0 = none - force resize every XX ms while window is being resized\r\n,\tmaskPanesEarly:\t\t\t\tfalse\t\t// true = create pane-masks on resizer.mouseDown instead of waiting for resizer.dragstart\r\n,\tonresizeall_start:\t\t\tnull\t\t// CALLBACK when resizeAll() STARTS\t- NOT pane-specific\r\n,\tonresizeall_end:\t\t\tnull\t\t// CALLBACK when resizeAll() ENDS\t- NOT pane-specific\r\n,\tonload_start:\t\t\t\tnull\t\t// CALLBACK when Layout inits - after options initialized, but before elements\r\n,\tonload_end:\t\t\t\t\tnull\t\t// CALLBACK when Layout inits - after EVERYTHING has been initialized\r\n,\tonunload_start:\t\t\t\tnull\t\t// CALLBACK when Layout is destroyed OR onWindowUnload\r\n,\tonunload_end:\t\t\t\tnull\t\t// CALLBACK when Layout is destroyed OR onWindowUnload\r\n,\tinitPanes:\t\t\t\t\ttrue\t\t// false = DO NOT initialize the panes onLoad - will init later\r\n,\tshowErrorMessages:\t\t\ttrue\t\t// enables fatal error messages to warn developers of common errors\r\n,\tshowDebugMessages:\t\t\tfalse\t\t// display console-and-alert debug msgs - IF this Layout version _has_ debugging code!\r\n//\tChanging this zIndex value will cause other zIndex values to automatically change\r\n,\tzIndex:\t\t\t\t\t\tnull\t\t// the PANE zIndex - resizers and masks will be +1\r\n//\tDO NOT CHANGE the zIndex values below unless you clearly understand their relationships\r\n,\tzIndexes: {\t\t\t\t\t\t\t\t// set _default_ z-index values here...\r\n\t\tpane_normal:\t\t\t0\t\t\t// normal z-index for panes\r\n\t,\tcontent_mask:\t\t\t1\t\t\t// applied to overlays used to mask content INSIDE panes during resizing\r\n\t,\tresizer_normal:\t\t\t2\t\t\t// normal z-index for resizer-bars\r\n\t,\tpane_sliding:\t\t\t100\t\t\t// applied to *BOTH* the pane and its resizer when a pane is 'slid open'\r\n\t,\tpane_animate:\t\t\t1000\t\t// applied to the pane when being animated - not applied to the resizer\r\n\t,\tresizer_drag:\t\t\t10000\t\t// applied to the CLONED resizer-bar when being 'dragged'\r\n\t}\r\n,\terrors: {\r\n\t\tpane:\t\t\t\t\t\"pane\"\t\t// description of \"layout pane element\" - used only in error messages\r\n\t,\tselector:\t\t\t\t\"selector\"\t// description of \"jQuery-selector\" - used only in error messages\r\n\t,\taddButtonError:\t\t\t\"Error Adding Button\\nInvalid \"\r\n\t,\tcontainerMissing:\t\t\"UI Layout Initialization Error\\nThe specified layout-container does not exist.\"\r\n\t,\tcenterPaneMissing:\t\t\"UI Layout Initialization Error\\nThe center-pane element does not exist.\\nThe center-pane is a required element.\"\r\n\t,\tnoContainerHeight:\t\t\"UI Layout Initialization Warning\\nThe layout-container \\\"CONTAINER\\\" has no height.\\nTherefore the layout is 0-height and hence 'invisible'!\"\r\n\t,\tcallbackError:\t\t\t\"UI Layout Callback Error\\nThe EVENT callback is not a valid function.\"\r\n\t}\r\n/*\r\n *\tPANE DEFAULT SETTINGS\r\n *\t- settings under the 'panes' key become the default settings for *all panes*\r\n *\t- ALL pane-options can also be set specifically for each panes, which will override these 'default values'\r\n */\r\n,\tpanes: { // default options for 'all panes' - will be overridden by 'per-pane settings'\r\n\t\tapplyDemoStyles: \t\tfalse\t\t// NOTE: renamed from applyDefaultStyles for clarity\r\n\t,\tclosable:\t\t\t\ttrue\t\t// pane can open & close\r\n\t,\tresizable:\t\t\t\ttrue\t\t// when open, pane can be resized \r\n\t,\tslidable:\t\t\t\ttrue\t\t// when closed, pane can 'slide open' over other panes - closes on mouse-out\r\n\t,\tinitClosed:\t\t\t\tfalse\t\t// true = init pane as 'closed'\r\n\t,\tinitHidden: \t\t\tfalse \t\t// true = init pane as 'hidden' - no resizer-bar/spacing\r\n\t//\tSELECTORS\r\n\t//,\tpaneSelector:\t\t\t\"\"\t\t\t// MUST be pane-specific - jQuery selector for pane\r\n\t,\tcontentSelector:\t\t\".ui-layout-content\" // INNER div/element to auto-size so only it scrolls, not the entire pane!\r\n\t,\tcontentIgnoreSelector:\t\".ui-layout-ignore\"\t// element(s) to 'ignore' when measuring 'content'\r\n\t,\tfindNestedContent:\t\tfalse\t\t// true = $P.find(contentSelector), false = $P.children(contentSelector)\r\n\t//\tGENERIC ROOT-CLASSES - for auto-generated classNames\r\n\t,\tpaneClass:\t\t\t\t\"ui-layout-pane\"\t// Layout Pane\r\n\t,\tresizerClass:\t\t\t\"ui-layout-resizer\"\t// Resizer Bar\r\n\t,\ttogglerClass:\t\t\t\"ui-layout-toggler\"\t// Toggler Button\r\n\t,\tbuttonClass:\t\t\t\"ui-layout-button\"\t// CUSTOM Buttons\t- eg: '[ui-layout-button]-toggle/-open/-close/-pin'\r\n\t//\tELEMENT SIZE & SPACING\r\n\t//,\tsize:\t\t\t\t\t100\t\t\t// MUST be pane-specific -initial size of pane\r\n\t,\tminSize:\t\t\t\t0\t\t\t// when manually resizing a pane\r\n\t,\tmaxSize:\t\t\t\t0\t\t\t// ditto, 0 = no limit\r\n\t,\tspacing_open:\t\t\t6\t\t\t// space between pane and adjacent panes - when pane is 'open'\r\n\t,\tspacing_closed:\t\t\t6\t\t\t// ditto - when pane is 'closed'\r\n\t,\ttogglerLength_open:\t\t50\t\t\t// Length = WIDTH of toggler button on north/south sides - HEIGHT on east/west sides\r\n\t,\ttogglerLength_closed: \t50\t\t\t// 100% OR -1 means 'full height/width of resizer bar' - 0 means 'hidden'\r\n\t,\ttogglerAlign_open:\t\t\"center\"\t// top/left, bottom/right, center, OR...\r\n\t,\ttogglerAlign_closed:\t\"center\"\t// 1 => nn = offset from top/left, -1 => -nn == offset from bottom/right\r\n\t,\ttogglerContent_open:\t\"\"\t\t\t// text or HTML to put INSIDE the toggler\r\n\t,\ttogglerContent_closed:\t\"\"\t\t\t// ditto\r\n\t//\tRESIZING OPTIONS\r\n\t,\tresizerDblClickToggle:\ttrue\t\t// \r\n\t,\tautoResize:\t\t\t\ttrue\t\t// IF size is 'auto' or a percentage, then recalc 'pixel size' whenever the layout resizes\r\n\t,\tautoReopen:\t\t\t\ttrue\t\t// IF a pane was auto-closed due to noRoom, reopen it when there is room? False = leave it closed\r\n\t,\tresizerDragOpacity:\t\t1\t\t\t// option for ui.draggable\r\n\t//,\tresizerCursor:\t\t\t\"\"\t\t\t// MUST be pane-specific - cursor when over resizer-bar\r\n\t,\tmaskContents:\t\t\tfalse\t\t// true = add DIV-mask over-or-inside this pane so can 'drag' over IFRAMES\r\n\t,\tmaskObjects:\t\t\tfalse\t\t// true = add IFRAME-mask over-or-inside this pane to cover objects/applets - content-mask will overlay this mask\r\n\t,\tmaskZindex:\t\t\t\tnull\t\t// will override zIndexes.content_mask if specified - not applicable to iframe-panes\r\n\t,\tresizingGrid:\t\t\tfalse\t\t// grid size that the resizers will snap-to during resizing, eg: [20,20]\r\n\t,\tlivePaneResizing:\t\tfalse\t\t// true = LIVE Resizing as resizer is dragged\r\n\t,\tliveContentResizing:\tfalse\t\t// true = re-measure header/footer heights as resizer is dragged\r\n\t,\tliveResizingTolerance:\t1\t\t\t// how many px change before pane resizes, to control performance\r\n\t//\tSLIDING OPTIONS\r\n\t,\tsliderCursor:\t\t\t\"pointer\"\t// cursor when resizer-bar will trigger 'sliding'\r\n\t,\tslideTrigger_open:\t\t\"click\"\t\t// click, dblclick, mouseenter\r\n\t,\tslideTrigger_close:\t\t\"mouseleave\"// click, mouseleave\r\n\t,\tslideDelay_open:\t\t300\t\t\t// applies only for mouseenter event - 0 = instant open\r\n\t,\tslideDelay_close:\t\t300\t\t\t// applies only for mouseleave event (300ms is the minimum!)\r\n\t,\thideTogglerOnSlide:\t\tfalse\t\t// when pane is slid-open, should the toggler show?\r\n\t,\tpreventQuickSlideClose:\t$.layout.browser.webkit // Chrome triggers slideClosed as it is opening\r\n\t,\tpreventPrematureSlideClose: false\t// handle incorrect mouseleave trigger, like when over a SELECT-list in IE\r\n\t//\tPANE-SPECIFIC TIPS & MESSAGES\r\n\t,\ttips: {\r\n\t\t\tOpen:\t\t\t\t\"Open\"\t\t// eg: \"Open Pane\"\r\n\t\t,\tClose:\t\t\t\t\"Close\"\r\n\t\t,\tResize:\t\t\t\t\"Resize\"\r\n\t\t,\tSlide:\t\t\t\t\"Slide Open\"\r\n\t\t,\tPin:\t\t\t\t\"Pin\"\r\n\t\t,\tUnpin:\t\t\t\t\"Un-Pin\"\r\n\t\t,\tnoRoomToOpen:\t\t\"Not enough room to show this panel.\"\t// alert if user tries to open a pane that cannot\r\n\t\t,\tminSizeWarning:\t\t\"Panel has reached its minimum size\"\t// displays in browser statusbar\r\n\t\t,\tmaxSizeWarning:\t\t\"Panel has reached its maximum size\"\t// ditto\r\n\t\t}\r\n\t//\tHOT-KEYS & MISC\r\n\t,\tshowOverflowOnHover:\tfalse\t\t// will bind allowOverflow() utility to pane.onMouseOver\r\n\t,\tenableCursorHotkey:\t\ttrue\t\t// enabled 'cursor' hotkeys\r\n\t//,\tcustomHotkey:\t\t\t\"\"\t\t\t// MUST be pane-specific - EITHER a charCode OR a character\r\n\t,\tcustomHotkeyModifier:\t\"SHIFT\"\t\t// either 'SHIFT', 'CTRL' or 'CTRL+SHIFT' - NOT 'ALT'\r\n\t//\tPANE ANIMATION\r\n\t//\tNOTE: fxSss_open, fxSss_close & fxSss_size options (eg: fxName_open) are auto-generated if not passed\r\n\t,\tfxName:\t\t\t\t\t\"slide\" \t// ('none' or blank), slide, drop, scale -- only relevant to 'open' & 'close', NOT 'size'\r\n\t,\tfxSpeed:\t\t\t\tnull\t\t// slow, normal, fast, 200, nnn - if passed, will OVERRIDE fxSettings.duration\r\n\t,\tfxSettings:\t\t\t\t{}\t\t\t// can be passed, eg: { easing: \"easeOutBounce\", duration: 1500 }\r\n\t,\tfxOpacityFix:\t\t\ttrue\t\t// tries to fix opacity in IE to restore anti-aliasing after animation\r\n\t,\tanimatePaneSizing:\t\tfalse\t\t// true = animate resizing after dragging resizer-bar OR sizePane() is called\r\n\t/*  NOTE: Action-specific FX options are auto-generated from the options above if not specifically set:\r\n\t\tfxName_open:\t\t\t\"slide\"\t\t// 'Open' pane animation\r\n\t\tfnName_close:\t\t\t\"slide\"\t\t// 'Close' pane animation\r\n\t\tfxName_size:\t\t\t\"slide\"\t\t// 'Size' pane animation - when animatePaneSizing = true\r\n\t\tfxSpeed_open:\t\t\tnull\r\n\t\tfxSpeed_close:\t\t\tnull\r\n\t\tfxSpeed_size:\t\t\tnull\r\n\t\tfxSettings_open:\t\t{}\r\n\t\tfxSettings_close:\t\t{}\r\n\t\tfxSettings_size:\t\t{}\r\n\t*/\r\n\t//\tCHILD/NESTED LAYOUTS\r\n\t,\tchildren:\t\t\t\tnull\t\t// Layout-options for nested/child layout - even {} is valid as options\r\n\t,\tcontainerSelector:\t\t''\t\t\t// if child is NOT 'directly nested', a selector to find it/them (can have more than one child layout!)\r\n\t,\tinitChildren:\t\t\ttrue\t\t// true = child layout will be created as soon as _this_ layout completes initialization\r\n\t,\tdestroyChildren:\t\ttrue\t\t// true = destroy child-layout if this pane is destroyed\r\n\t,\tresizeChildren:\t\t\ttrue\t\t// true = trigger child-layout.resizeAll() when this pane is resized\r\n\t//\tEVENT TRIGGERING\r\n\t,\ttriggerEventsOnLoad:\tfalse\t\t// true = trigger onopen OR onclose callbacks when layout initializes\r\n\t,\ttriggerEventsDuringLiveResize: true\t// true = trigger onresize callback REPEATEDLY if livePaneResizing==true\r\n\t//\tPANE CALLBACKS\r\n\t,\tonshow_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Show\t- BEFORE onopen/onhide_start\r\n\t,\tonshow_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Shown\t- AFTER  onopen/onhide_end\r\n\t,\tonhide_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Close\t- BEFORE onclose_start\r\n\t,\tonhide_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Closed\t- AFTER  onclose_end\r\n\t,\tonopen_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Open\r\n\t,\tonopen_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Opened\r\n\t,\tonclose_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Close\r\n\t,\tonclose_end:\t\t\tnull\t\t// CALLBACK when pane ENDS being Closed\r\n\t,\tonresize_start:\t\t\tnull\t\t// CALLBACK when pane STARTS being Resized ***FOR ANY REASON***\r\n\t,\tonresize_end:\t\t\tnull\t\t// CALLBACK when pane ENDS being Resized ***FOR ANY REASON***\r\n\t,\tonsizecontent_start:\tnull\t\t// CALLBACK when sizing of content-element STARTS\r\n\t,\tonsizecontent_end:\t\tnull\t\t// CALLBACK when sizing of content-element ENDS\r\n\t,\tonswap_start:\t\t\tnull\t\t// CALLBACK when pane STARTS to Swap\r\n\t,\tonswap_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being Swapped\r\n\t,\tondrag_start:\t\t\tnull\t\t// CALLBACK when pane STARTS being ***MANUALLY*** Resized\r\n\t,\tondrag_end:\t\t\t\tnull\t\t// CALLBACK when pane ENDS being ***MANUALLY*** Resized\r\n\t}\r\n/*\r\n *\tPANE-SPECIFIC SETTINGS\r\n *\t- options listed below MUST be specified per-pane - they CANNOT be set under 'panes'\r\n *\t- all options under the 'panes' key can also be set specifically for any pane\r\n *\t- most options under the 'panes' key apply only to 'border-panes' - NOT the the center-pane\r\n */\r\n,\tnorth: {\r\n\t\tpaneSelector:\t\t\t\".ui-layout-north\"\r\n\t,\tsize:\t\t\t\t\t\"auto\"\t\t// eg: \"auto\", \"30%\", .30, 200\r\n\t,\tresizerCursor:\t\t\t\"n-resize\"\t// custom = url(myCursor.cur)\r\n\t,\tcustomHotkey:\t\t\t\"\"\t\t\t// EITHER a charCode (43) OR a character (\"o\")\r\n\t}\r\n,\tsouth: {\r\n\t\tpaneSelector:\t\t\t\".ui-layout-south\"\r\n\t,\tsize:\t\t\t\t\t\"auto\"\r\n\t,\tresizerCursor:\t\t\t\"s-resize\"\r\n\t,\tcustomHotkey:\t\t\t\"\"\r\n\t}\r\n,\teast: {\r\n\t\tpaneSelector:\t\t\t\".ui-layout-east\"\r\n\t,\tsize:\t\t\t\t\t200\r\n\t,\tresizerCursor:\t\t\t\"e-resize\"\r\n\t,\tcustomHotkey:\t\t\t\"\"\r\n\t}\r\n,\twest: {\r\n\t\tpaneSelector:\t\t\t\".ui-layout-west\"\r\n\t,\tsize:\t\t\t\t\t200\r\n\t,\tresizerCursor:\t\t\t\"w-resize\"\r\n\t,\tcustomHotkey:\t\t\t\"\"\r\n\t}\r\n,\tcenter: {\r\n\t\tpaneSelector:\t\t\t\".ui-layout-center\"\r\n\t,\tminWidth:\t\t\t\t0\r\n\t,\tminHeight:\t\t\t\t0\r\n\t}\r\n};\r\n\r\n$.layout.optionsMap = {\r\n\t// layout/global options - NOT pane-options\r\n\tlayout: (\"name,instanceKey,stateManagement,effects,inset,zIndexes,errors,\"\r\n\t+\t\"zIndex,scrollToBookmarkOnLoad,showErrorMessages,maskPanesEarly,\"\r\n\t+\t\"outset,resizeWithWindow,resizeWithWindowDelay,resizeWithWindowMaxDelay,\"\r\n\t+\t\"onresizeall,onresizeall_start,onresizeall_end,onload,onload_start,onload_end,onunload,onunload_start,onunload_end\").split(\",\")\r\n//\tborderPanes: [ ALL options that are NOT specified as 'layout' ]\r\n\t// default.panes options that apply to the center-pane (most options apply _only_ to border-panes)\r\n,\tcenter: (\"paneClass,contentSelector,contentIgnoreSelector,findNestedContent,applyDemoStyles,triggerEventsOnLoad,\"\r\n\t+\t\"showOverflowOnHover,maskContents,maskObjects,liveContentResizing,\"\r\n\t+\t\"containerSelector,children,initChildren,resizeChildren,destroyChildren,\"\r\n\t+\t\"onresize,onresize_start,onresize_end,onsizecontent,onsizecontent_start,onsizecontent_end\").split(\",\")\r\n\t// options that MUST be specifically set 'per-pane' - CANNOT set in the panes (defaults) key\r\n,\tnoDefault: (\"paneSelector,resizerCursor,customHotkey\").split(\",\")\r\n};\r\n\r\n/**\r\n * Processes options passed in converts flat-format data into subkey (JSON) format\r\n * In flat-format, subkeys are _currently_ separated with 2 underscores, like north__optName\r\n * Plugins may also call this method so they can transform their own data\r\n *\r\n * @param  {!Object}\thash\t\t\tData/options passed by user - may be a single level or nested levels\r\n * @param  {boolean=}\t[addKeys=false]\tShould the primary layout.options keys be added if they do not exist?\r\n * @return {Object}\t\t\t\t\t\tReturns hash of minWidth & minHeight\r\n */\r\n$.layout.transformData = function (hash, addKeys) {\r\n\tvar\tjson = addKeys ? { panes: {}, center: {} } : {} // init return object\r\n\t,\tbranch, optKey, keys, key, val, i, c;\r\n\r\n\tif (typeof hash !== \"object\") return json; // no options passed\r\n\r\n\t// convert all 'flat-keys' to 'sub-key' format\r\n\tfor (optKey in hash) {\r\n\t\tbranch\t= json;\r\n\t\tval\t\t= hash[ optKey ];\r\n\t\tkeys\t= optKey.split(\"__\"); // eg: west__size or north__fxSettings__duration\r\n\t\tc\t\t= keys.length - 1;\r\n\t\t// convert underscore-delimited to subkeys\r\n\t\tfor (i=0; i <= c; i++) {\r\n\t\t\tkey = keys[i];\r\n\t\t\tif (i === c) {\t// last key = value\r\n\t\t\t\tif ($.isPlainObject( val ))\r\n\t\t\t\t\tbranch[key] = $.layout.transformData( val ); // RECURSE\r\n\t\t\t\telse\r\n\t\t\t\t\tbranch[key] = val;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!branch[key])\r\n\t\t\t\t\tbranch[key] = {}; // create the subkey\r\n\t\t\t\t// recurse to sub-key for next loop - if not done\r\n\t\t\t\tbranch = branch[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn json;\r\n};\r\n\r\n// INTERNAL CONFIG DATA - DO NOT CHANGE THIS!\r\n$.layout.backwardCompatibility = {\r\n\t// data used by renameOldOptions()\r\n\tmap: {\r\n\t//\tOLD Option Name:\t\t\tNEW Option Name\r\n\t\tapplyDefaultStyles:\t\t\t\"applyDemoStyles\"\r\n\t//\tCHILD/NESTED LAYOUTS\r\n\t,\tchildOptions:\t\t\t\t\"children\"\r\n\t,\tinitChildLayout:\t\t\t\"initChildren\"\r\n\t,\tdestroyChildLayout:\t\t\t\"destroyChildren\"\r\n\t,\tresizeChildLayout:\t\t\t\"resizeChildren\"\r\n\t,\tresizeNestedLayout:\t\t\t\"resizeChildren\"\r\n\t//\tMISC Options\r\n\t,\tresizeWhileDragging:\t\t\"livePaneResizing\"\r\n\t,\tresizeContentWhileDragging:\t\"liveContentResizing\"\r\n\t,\ttriggerEventsWhileDragging:\t\"triggerEventsDuringLiveResize\"\r\n\t,\tmaskIframesOnResize:\t\t\"maskContents\"\r\n\t//\tSTATE MANAGEMENT\r\n\t,\tuseStateCookie:\t\t\t\t\"stateManagement.enabled\"\r\n\t,\t\"cookie.autoLoad\":\t\t\t\"stateManagement.autoLoad\"\r\n\t,\t\"cookie.autoSave\":\t\t\t\"stateManagement.autoSave\"\r\n\t,\t\"cookie.keys\":\t\t\t\t\"stateManagement.stateKeys\"\r\n\t,\t\"cookie.name\":\t\t\t\t\"stateManagement.cookie.name\"\r\n\t,\t\"cookie.domain\":\t\t\t\"stateManagement.cookie.domain\"\r\n\t,\t\"cookie.path\":\t\t\t\t\"stateManagement.cookie.path\"\r\n\t,\t\"cookie.expires\":\t\t\t\"stateManagement.cookie.expires\"\r\n\t,\t\"cookie.secure\":\t\t\t\"stateManagement.cookie.secure\"\r\n\t//\tOLD Language options\r\n\t,\tnoRoomToOpenTip:\t\t\t\"tips.noRoomToOpen\"\r\n\t,\ttogglerTip_open:\t\t\t\"tips.Close\"\t// open   = Close\r\n\t,\ttogglerTip_closed:\t\t\t\"tips.Open\"\t\t// closed = Open\r\n\t,\tresizerTip:\t\t\t\t\t\"tips.Resize\"\r\n\t,\tsliderTip:\t\t\t\t\t\"tips.Slide\"\r\n\t}\r\n\r\n/**\r\n* @param {Object}\topts\r\n*/\r\n,\trenameOptions: function (opts) {\r\n\t\tvar map = $.layout.backwardCompatibility.map\r\n\t\t,\toldData, newData, value\r\n\t\t;\r\n\t\tfor (var itemPath in map) {\r\n\t\t\toldData\t= getBranch( itemPath );\r\n\t\t\tvalue\t= oldData.branch[ oldData.key ];\r\n\t\t\tif (value !== undefined) {\r\n\t\t\t\tnewData = getBranch( map[itemPath], true );\r\n\t\t\t\tnewData.branch[ newData.key ] = value;\r\n\t\t\t\tdelete oldData.branch[ oldData.key ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {string}\tpath\r\n\t\t * @param {boolean=}\t[create=false]\tCreate path if does not exist\r\n\t\t */\r\n\t\tfunction getBranch (path, create) {\r\n\t\t\tvar a = path.split(\".\") // split keys into array\r\n\t\t\t,\tc = a.length - 1\r\n\t\t\t,\tD = { branch: opts, key: a[c] } // init branch at top & set key (last item)\r\n\t\t\t,\ti = 0, k, undef;\r\n\t\t\tfor (; i<c; i++) { // skip the last key (data)\r\n\t\t\t\tk = a[i];\r\n\t\t\t\tif (D.branch[ k ] == undefined) { // child-key does not exist\r\n\t\t\t\t\tif (create) {\r\n\t\t\t\t\t\tD.branch = D.branch[ k ] = {}; // create child-branch\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse // can't go any farther\r\n\t\t\t\t\t\tD.branch = {}; // branch is undefined\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tD.branch = D.branch[ k ]; // get child-branch\r\n\t\t\t}\r\n\t\t\treturn D;\r\n\t\t};\r\n\t}\r\n\r\n/**\r\n* @param {Object}\topts\r\n*/\r\n,\trenameAllOptions: function (opts) {\r\n\t\tvar ren = $.layout.backwardCompatibility.renameOptions;\r\n\t\t// rename root (layout) options\r\n\t\tren( opts );\r\n\t\t// rename 'defaults' to 'panes'\r\n\t\tif (opts.defaults) {\r\n\t\t\tif (typeof opts.panes !== \"object\")\r\n\t\t\t\topts.panes = {};\r\n\t\t\t$.extend(true, opts.panes, opts.defaults);\r\n\t\t\tdelete opts.defaults;\r\n\t\t}\r\n\t\t// rename options in the the options.panes key\r\n\t\tif (opts.panes) ren( opts.panes );\r\n\t\t// rename options inside *each pane key*, eg: options.west\r\n\t\t$.each($.layout.config.allPanes, function (i, pane) {\r\n\t\t\tif (opts[pane]) ren( opts[pane] );\r\n\t\t});\t\r\n\t\treturn opts;\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n/*\t============================================================\r\n *\tBEGIN WIDGET: $( selector ).layout( {options} );\r\n *\t============================================================\r\n */\r\n$.fn.layout = function (opts) {\r\n\tvar\r\n\r\n\t// local aliases to global data\r\n\tbrowser\t= $.layout.browser\r\n,\t_c\t\t= $.layout.config\r\n\r\n\t// local aliases to utlity methods\r\n,\tcssW\t= $.layout.cssWidth\r\n,\tcssH\t= $.layout.cssHeight\r\n,\telDims\t= $.layout.getElementDimensions\r\n,\tstyles\t= $.layout.getElementStyles\r\n,\tevtObj\t= $.layout.getEventObject\r\n,\tevtPane\t= $.layout.parsePaneName\r\n\r\n/**\r\n * options - populated by initOptions()\r\n */\r\n,\toptions = $.extend(true, {}, $.layout.defaults)\r\n,\teffects\t= options.effects = $.extend(true, {}, $.layout.effects)\r\n\r\n/**\r\n * layout-state object\r\n */\r\n,\tstate = {\r\n\t\t// generate unique ID to use for event.namespace so can unbind only events added by 'this layout'\r\n\t\tid:\t\t\t\t\"layout\"+ $.now()\t// code uses alias: sID\r\n\t,\tinitialized:\tfalse\r\n\t,\tpaneResizing:\tfalse\r\n\t,\tpanesSliding:\t{}\r\n\t,\tcontainer:\t{ \t// list all keys referenced in code to avoid compiler error msgs\r\n\t\t\tinnerWidth:\t\t0\r\n\t\t,\tinnerHeight:\t0\r\n\t\t,\touterWidth:\t\t0\r\n\t\t,\touterHeight:\t0\r\n\t\t,\tlayoutWidth:\t0\r\n\t\t,\tlayoutHeight:\t0\r\n\t\t}\r\n\t,\tnorth:\t\t{ childIdx: 0 }\r\n\t,\tsouth:\t\t{ childIdx: 0 }\r\n\t,\teast:\t\t{ childIdx: 0 }\r\n\t,\twest:\t\t{ childIdx: 0 }\r\n\t,\tcenter:\t\t{ childIdx: 0 }\r\n\t}\r\n\r\n/**\r\n * parent/child-layout pointers\r\n */\r\n//,\thasParentLayout\t= false\t- exists ONLY inside Instance so can be set externally\r\n,\tchildren = {\r\n\t\tnorth:\t\tnull\r\n\t,\tsouth:\t\tnull\r\n\t,\teast:\t\tnull\r\n\t,\twest:\t\tnull\r\n\t,\tcenter:\t\tnull\r\n\t}\r\n\r\n/*\r\n * ###########################\r\n *  INTERNAL HELPER FUNCTIONS\r\n * ###########################\r\n */\r\n\r\n\t/**\r\n\t * Manages all internal timers\r\n\t */\r\n,\ttimer = {\r\n\t\tdata:\t{}\r\n\t,\tset:\tfunction (s, fn, ms) { timer.clear(s); timer.data[s] = setTimeout(fn, ms); }\r\n\t,\tclear:\tfunction (s) { var t=timer.data; if (t[s]) {clearTimeout(t[s]); delete t[s];} }\r\n\t}\r\n\r\n\t/**\r\n\t * Alert or console.log a message - IF option is enabled.\r\n\t *\r\n\t * @param {(string|!Object)}\tmsg\t\t\t\tMessage (or debug-data) to display\r\n\t * @param {boolean=}\t\t\t[popup=false]\tTrue by default, means 'alert', false means use console.log\r\n\t * @param {boolean=}\t\t\t[debug=false]\tTrue means is a widget debugging message\r\n\t */\r\n,\t_log = function (msg, popup, debug) {\r\n\t\tvar o = options;\r\n\t\tif ((o.showErrorMessages && !debug) || (debug && o.showDebugMessages))\r\n\t\t\t$.layout.msg( o.name +' / '+ msg, (popup !== false) );\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Executes a Callback function after a trigger event, like resize, open or close\r\n\t *\r\n\t * @param {string}\t\t\t\tevtName\t\t\t\t\tName of the layout callback, eg \"onresize_start\"\r\n\t * @param {(string|boolean)=}\t[pane=\"\"]\t\t\t\tThis is passed only so we can pass the 'pane object' to the callback\r\n\t * @param {(string|boolean)=}\t[skipBoundEvents=false]\tTrue = do not run events bound to the elements - only the callbacks set in options\r\n\t */\r\n,\t_runCallbacks = function (evtName, pane, skipBoundEvents) {\r\n\t\tvar\thasPane\t= pane && isStr(pane)\r\n\t\t,\ts\t\t= hasPane ? state[pane] : state\r\n\t\t,\to\t\t= hasPane ? options[pane] : options\r\n\t\t,\tlName\t= options.name\r\n\t\t\t// names like onopen and onopen_end separate are interchangeable in options...\r\n\t\t,\tlng\t\t= evtName + (evtName.match(/_/) ? \"\" : \"_end\")\r\n\t\t,\tshrt\t= lng.match(/_end$/) ? lng.substr(0, lng.length - 4) : \"\"\r\n\t\t,\tfn\t\t= o[lng] || o[shrt]\r\n\t\t,\tretVal\t= \"NC\" // NC = No Callback\r\n\t\t,\targs\t= []\r\n\t\t,\t$P\t\t= hasPane ? $Ps[pane] : 0\r\n\t\t;\r\n\t\tif (hasPane && !$P) // a pane is specified, but does not exist!\r\n\t\t\treturn retVal;\r\n\t\tif ( !hasPane && $.type(pane) === \"boolean\" ) {\r\n\t\t\tskipBoundEvents = pane; // allow pane param to be skipped for Layout callback\r\n\t\t\tpane = \"\";\r\n\t\t}\r\n\r\n\t\t// first trigger the callback set in the options\r\n\t\tif (fn) {\r\n\t\t\ttry {\r\n\t\t\t\t// convert function name (string) to function object\r\n\t\t\t\tif (isStr( fn )) {\r\n\t\t\t\t\tif (fn.match(/,/)) {\r\n\t\t\t\t\t\t// function name cannot contain a comma, \r\n\t\t\t\t\t\t// so must be a function name AND a parameter to pass\r\n\t\t\t\t\t\targs = fn.split(\",\")\r\n\t\t\t\t\t\t,\tfn = eval(args[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse // just the name of an external function?\r\n\t\t\t\t\t\tfn = eval(fn);\r\n\t\t\t\t}\r\n\t\t\t\t// execute the callback, if exists\r\n\t\t\t\tif ($.isFunction( fn )) {\r\n\t\t\t\t\tif (args.length)\r\n\t\t\t\t\t\tretVal = g(fn)(args[1]); // pass the argument parsed from 'list'\r\n\t\t\t\t\telse if ( hasPane )\r\n\t\t\t\t\t\t// pass data: pane-name, pane-element, pane-state, pane-options, and layout-name\r\n\t\t\t\t\t\tretVal = g(fn)( pane, $Ps[pane], s, o, lName );\r\n\t\t\t\t\telse // must be a layout/container callback - pass suitable info\r\n\t\t\t\t\t\tretVal = g(fn)( Instance, s, o, lName );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\t_log( options.errors.callbackError.replace(/EVENT/, $.trim((pane || \"\") +\" \"+ lng)), false );\r\n\t\t\t\tif ($.type(ex) === \"string\" && string.length)\r\n\t\t\t\t\t_log(\"Exception:  \"+ ex, false );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// trigger additional events bound directly to the pane\r\n\t\tif (!skipBoundEvents && retVal !== false) {\r\n\t\t\tif ( hasPane ) { // PANE events can be bound to each pane-elements\r\n\t\t\t\to\t= options[pane];\r\n\t\t\t\ts\t= state[pane];\r\n\t\t\t\t$P.triggerHandler(\"layoutpane\"+ lng, [ pane, $P, s, o, lName ]);\r\n\t\t\t\tif (shrt)\r\n\t\t\t\t\t$P.triggerHandler(\"layoutpane\"+ shrt, [ pane, $P, s, o, lName ]);\r\n\t\t\t}\r\n\t\t\telse { // LAYOUT events can be bound to the container-element\r\n\t\t\t\t$N.triggerHandler(\"layout\"+ lng, [ Instance, s, o, lName ]);\r\n\t\t\t\tif (shrt)\r\n\t\t\t\t\t$N.triggerHandler(\"layout\"+ shrt, [ Instance, s, o, lName ]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// ALWAYS resizeChildren after an onresize_end event - even during initialization\r\n\t\t// IGNORE onsizecontent_end event because causes child-layouts to resize TWICE\r\n\t\tif (hasPane && evtName === \"onresize_end\") // BAD: || evtName === \"onsizecontent_end\"\r\n\t\t\tresizeChildren(pane+\"\", true); // compiler hack -force string\r\n\r\n\t\treturn retVal;\r\n\r\n\t\tfunction g (f) { return f; }; // compiler hack\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * cure iframe display issues in IE & other browsers\r\n\t */\r\n,\t_fixIframe = function (pane) {\r\n\t\tif (browser.mozilla) return; // skip FireFox - it auto-refreshes iframes onShow\r\n\t\tvar $P = $Ps[pane];\r\n\t\t// if the 'pane' is an iframe, do it\r\n\t\tif (state[pane].tagName === \"IFRAME\")\r\n\t\t\t$P.css(_c.hidden).css(_c.visible); \r\n\t\telse // ditto for any iframes INSIDE the pane\r\n\t\t\t$P.find('IFRAME').css(_c.hidden).css(_c.visible);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  {string}\t\tpane\t\tCan accept ONLY a 'pane' (east, west, etc)\r\n\t * @param  {number=}\t\touterSize\t(optional) Can pass a width, allowing calculations BEFORE element is resized\r\n\t * @return {number}\t\tReturns the innerHeight/Width of el by subtracting padding and borders\r\n\t */\r\n,\tcssSize = function (pane, outerSize) {\r\n\t\tvar fn = _c[pane].dir==\"horz\" ? cssH : cssW;\r\n\t\treturn fn($Ps[pane], outerSize);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  {string}\t\tpane\t\tCan accept ONLY a 'pane' (east, west, etc)\r\n\t * @return {Object}\t\tReturns hash of minWidth & minHeight\r\n\t */\r\n,\tcssMinDims = function (pane) {\r\n\t\t// minWidth/Height means CSS width/height = 1px\r\n\t\tvar\t$P\t= $Ps[pane]\r\n\t\t,\tdir\t= _c[pane].dir\r\n\t\t,\td\t= {\r\n\t\t\t\tminWidth:\t1001 - cssW($P, 1000)\r\n\t\t\t,\tminHeight:\t1001 - cssH($P, 1000)\r\n\t\t\t}\r\n\t\t;\r\n\t\tif (dir === \"horz\") d.minSize = d.minHeight;\r\n\t\tif (dir === \"vert\") d.minSize = d.minWidth;\r\n\t\treturn d;\r\n\t}\r\n\r\n\t// TODO: see if these methods can be made more useful...\r\n\t// TODO: *maybe* return cssW/H from these so caller can use this info\r\n\r\n\t/**\r\n\t * @param {(string|!Object)}\t\tel\r\n\t * @param {number=}\t\t\t\touterWidth\r\n\t * @param {boolean=}\t\t\t\t[autoHide=false]\r\n\t */\r\n,\tsetOuterWidth = function (el, outerWidth, autoHide) {\r\n\t\tvar $E = el, w;\r\n\t\tif (isStr(el)) $E = $Ps[el]; // west\r\n\t\telse if (!el.jquery) $E = $(el);\r\n\t\tw = cssW($E, outerWidth);\r\n\t\t$E.css({ width: w });\r\n\t\tif (w > 0) {\r\n\t\t\tif (autoHide && $E.data('autoHidden') && $E.innerHeight() > 0) {\r\n\t\t\t\t$E.show().data('autoHidden', false);\r\n\t\t\t\tif (!browser.mozilla) // FireFox refreshes iframes - IE does not\r\n\t\t\t\t\t// make hidden, then visible to 'refresh' display after animation\r\n\t\t\t\t\t$E.css(_c.hidden).css(_c.visible);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (autoHide && !$E.data('autoHidden'))\r\n\t\t\t$E.hide().data('autoHidden', true);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {(string|!Object)}\t\tel\r\n\t * @param {number=}\t\t\t\touterHeight\r\n\t * @param {boolean=}\t\t\t\t[autoHide=false]\r\n\t */\r\n,\tsetOuterHeight = function (el, outerHeight, autoHide) {\r\n\t\tvar $E = el, h;\r\n\t\tif (isStr(el)) $E = $Ps[el]; // west\r\n\t\telse if (!el.jquery) $E = $(el);\r\n\t\th = cssH($E, outerHeight);\r\n\t\t$E.css({ height: h, visibility: \"visible\" }); // may have been 'hidden' by sizeContent\r\n\t\tif (h > 0 && $E.innerWidth() > 0) {\r\n\t\t\tif (autoHide && $E.data('autoHidden')) {\r\n\t\t\t\t$E.show().data('autoHidden', false);\r\n\t\t\t\tif (!browser.mozilla) // FireFox refreshes iframes - IE does not\r\n\t\t\t\t\t$E.css(_c.hidden).css(_c.visible);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (autoHide && !$E.data('autoHidden'))\r\n\t\t\t$E.hide().data('autoHidden', true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts any 'size' params to a pixel/integer size, if not already\r\n\t * If 'auto' or a decimal/percentage is passed as 'size', a pixel-size is calculated\r\n\t *\r\n\t/**\r\n\t * @param  {string}\t\t\t\tpane\r\n\t * @param  {(string|number)=}\tsize\r\n\t * @param  {string=}\t\t\t\t[dir]\r\n\t * @return {number}\r\n\t */\r\n,\t_parseSize = function (pane, size, dir) {\r\n\t\tif (!dir) dir = _c[pane].dir;\r\n\r\n\t\tif (isStr(size) && size.match(/%/))\r\n\t\t\tsize = (size === '100%') ? -1 : parseInt(size, 10) / 100; // convert % to decimal\r\n\r\n\t\tif (size === 0)\r\n\t\t\treturn 0;\r\n\t\telse if (size >= 1)\r\n\t\t\treturn parseInt(size, 10);\r\n\r\n\t\tvar o = options, avail = 0;\r\n\t\tif (dir==\"horz\") // north or south or center.minHeight\r\n\t\t\tavail = sC.innerHeight - ($Ps.north ? o.north.spacing_open : 0) - ($Ps.south ? o.south.spacing_open : 0);\r\n\t\telse if (dir==\"vert\") // east or west or center.minWidth\r\n\t\t\tavail = sC.innerWidth - ($Ps.west ? o.west.spacing_open : 0) - ($Ps.east ? o.east.spacing_open : 0);\r\n\r\n\t\tif (size === -1) // -1 == 100%\r\n\t\t\treturn avail;\r\n\t\telse if (size > 0) // percentage, eg: .25\r\n\t\t\treturn round(avail * size);\r\n\t\telse if (pane==\"center\")\r\n\t\t\treturn 0;\r\n\t\telse { // size < 0 || size=='auto' || size==Missing || size==Invalid\r\n\t\t\t// auto-size the pane\r\n\t\t\tvar\tdim\t= (dir === \"horz\" ? \"height\" : \"width\")\r\n\t\t\t,\t$P\t= $Ps[pane]\r\n\t\t\t,\t$C\t= dim === 'height' ? $Cs[pane] : false\r\n\t\t\t,\tvis\t= $.layout.showInvisibly($P) // show pane invisibly if hidden\r\n\t\t\t,\tszP\t= $P.css(dim) // SAVE current pane size\r\n\t\t\t,\tszC\t= $C ? $C.css(dim) : 0 // SAVE current content size\r\n\t\t\t;\r\n\t\t\t$P.css(dim, \"auto\");\r\n\t\t\tif ($C) $C.css(dim, \"auto\");\r\n\t\t\tsize = (dim === \"height\") ? $P.outerHeight() : $P.outerWidth(); // MEASURE\r\n\t\t\t$P.css(dim, szP).css(vis); // RESET size & visibility\r\n\t\t\tif ($C) $C.css(dim, szC);\r\n\t\t\treturn size;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates current 'size' (outer-width or outer-height) of a border-pane - optionally with 'pane-spacing' added\r\n\t *\r\n\t * @param  {(string|!Object)}\tpane\r\n\t * @param  {boolean=}\t\t\t[inclSpace=false]\r\n\t * @return {number}\t\t\t\tReturns EITHER Width for east/west panes OR Height for north/south panes\r\n\t */\r\n,\tgetPaneSize = function (pane, inclSpace) {\r\n\t\tvar \r\n\t\t\t$P\t= $Ps[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\toSp\t= (inclSpace ? o.spacing_open : 0)\r\n\t\t,\tcSp\t= (inclSpace ? o.spacing_closed : 0)\r\n\t\t;\r\n\t\tif (!$P || s.isHidden)\r\n\t\t\treturn 0;\r\n\t\telse if (s.isClosed || (s.isSliding && inclSpace))\r\n\t\t\treturn cSp;\r\n\t\telse if (_c[pane].dir === \"horz\")\r\n\t\t\treturn $P.outerHeight() + oSp;\r\n\t\telse // dir === \"vert\"\r\n\t\t\treturn $P.outerWidth() + oSp;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate min/max pane dimensions and limits for resizing\r\n\t *\r\n\t * @param  {string}\t\tpane\r\n\t * @param  {boolean=}\t[slide=false]\r\n\t */\r\n,\tsetSizeLimits = function (pane, slide) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar \r\n\t\t\to\t\t\t\t= options[pane]\r\n\t\t,\ts\t\t\t\t= state[pane]\r\n\t\t,\tc\t\t\t\t= _c[pane]\r\n\t\t,\tdir\t\t\t\t= c.dir\r\n\t\t,\ttype\t\t\t= c.sizeType.toLowerCase()\r\n\t\t,\tisSliding\t\t= (slide != undefined ? slide : s.isSliding) // only open() passes 'slide' param\r\n\t\t,\t$P\t\t\t\t= $Ps[pane]\r\n\t\t,\tpaneSpacing\t\t= o.spacing_open\r\n\t\t//\tmeasure the pane on the *opposite side* from this pane\r\n\t\t,\taltPane\t\t\t= _c.oppositeEdge[pane]\r\n\t\t,\taltS\t\t\t= state[altPane]\r\n\t\t,\t$altP\t\t\t= $Ps[altPane]\r\n\t\t,\taltPaneSize\t\t= (!$altP || altS.isVisible===false || altS.isSliding ? 0 : (dir==\"horz\" ? $altP.outerHeight() : $altP.outerWidth()))\r\n\t\t,\taltPaneSpacing\t= ((!$altP || altS.isHidden ? 0 : options[altPane][ altS.isClosed !== false ? \"spacing_closed\" : \"spacing_open\" ]) || 0)\r\n\t\t//\tlimitSize prevents this pane from 'overlapping' opposite pane\r\n\t\t,\tcontainerSize\t= (dir==\"horz\" ? sC.innerHeight : sC.innerWidth)\r\n\t\t,\tminCenterDims\t= cssMinDims(\"center\")\r\n\t\t,\tminCenterSize\t= dir==\"horz\" ? max(options.center.minHeight, minCenterDims.minHeight) : max(options.center.minWidth, minCenterDims.minWidth)\r\n\t\t//\tif pane is 'sliding', then ignore center and alt-pane sizes - because 'overlays' them\r\n\t\t,\tlimitSize\t\t= (containerSize - paneSpacing - (isSliding ? 0 : (_parseSize(\"center\", minCenterSize, dir) + altPaneSize + altPaneSpacing)))\r\n\t\t,\tminSize\t\t\t= s.minSize = max( _parseSize(pane, o.minSize), cssMinDims(pane).minSize )\r\n\t\t,\tmaxSize\t\t\t= s.maxSize = min( (o.maxSize ? _parseSize(pane, o.maxSize) : 100000), limitSize )\r\n\t\t,\tr\t\t\t\t= s.resizerPosition = {} // used to set resizing limits\r\n\t\t,\ttop\t\t\t\t= sC.inset.top\r\n\t\t,\tleft\t\t\t= sC.inset.left\r\n\t\t,\tW\t\t\t\t= sC.innerWidth\r\n\t\t,\tH\t\t\t\t= sC.innerHeight\r\n\t\t,\trW\t\t\t\t= o.spacing_open // subtract resizer-width to get top/left position for south/east\r\n\t\t;\r\n\t\tswitch (pane) {\r\n\t\t\tcase \"north\":\tr.min = top + minSize;\r\n\t\t\t\t\t\t\tr.max = top + maxSize;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\tcase \"west\":\tr.min = left + minSize;\r\n\t\t\t\t\t\t\tr.max = left + maxSize;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\tcase \"south\":\tr.min = top + H - maxSize - rW;\r\n\t\t\t\t\t\t\tr.max = top + H - minSize - rW;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\tcase \"east\":\tr.min = left + W - maxSize - rW;\r\n\t\t\t\t\t\t\tr.max = left + W - minSize - rW;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns data for setting the size/position of center pane. Also used to set Height for east/west panes\r\n\t *\r\n\t * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, (outer) width and (outer) height\r\n\t */\r\n,\tcalcNewCenterPaneDims = function () {\r\n\t\tvar d = {\r\n\t\t\ttop:\tgetPaneSize(\"north\", true) // true = include 'spacing' value for pane\r\n\t\t,\tbottom:\tgetPaneSize(\"south\", true)\r\n\t\t,\tleft:\tgetPaneSize(\"west\", true)\r\n\t\t,\tright:\tgetPaneSize(\"east\", true)\r\n\t\t,\twidth:\t0\r\n\t\t,\theight:\t0\r\n\t\t};\r\n\r\n\t\t// NOTE: sC = state.container\r\n\t\t// calc center-pane outer dimensions\r\n\t\td.width\t\t= sC.innerWidth - d.left - d.right;  // outerWidth\r\n\t\td.height\t= sC.innerHeight - d.bottom - d.top; // outerHeight\r\n\t\t// add the 'container border/padding' to get final positions relative to the container\r\n\t\td.top\t\t+= sC.inset.top;\r\n\t\td.bottom\t+= sC.inset.bottom;\r\n\t\td.left\t\t+= sC.inset.left;\r\n\t\td.right\t\t+= sC.inset.right;\r\n\r\n\t\treturn d;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {!Object}\t\tel\r\n\t * @param {boolean=}\t\t[allStates=false]\r\n\t */\r\n,\tgetHoverClasses = function (el, allStates) {\r\n\t\tvar\r\n\t\t\t$El\t\t= $(el)\r\n\t\t,\ttype\t= $El.data(\"layoutRole\")\r\n\t\t,\tpane\t= $El.data(\"layoutEdge\")\r\n\t\t,\to\t\t= options[pane]\r\n\t\t,\troot\t= o[type +\"Class\"]\r\n\t\t,\t_pane\t= \"-\"+ pane // eg: \"-west\"\r\n\t\t,\t_open\t= \"-open\"\r\n\t\t,\t_closed\t= \"-closed\"\r\n\t\t,\t_slide\t= \"-sliding\"\r\n\t\t,\t_hover\t= \"-hover \" // NOTE the trailing space\r\n\t\t,\t_state\t= $El.hasClass(root+_closed) ? _closed : _open\r\n\t\t,\t_alt\t= _state === _closed ? _open : _closed\r\n\t\t,\tclasses = (root+_hover) + (root+_pane+_hover) + (root+_state+_hover) + (root+_pane+_state+_hover)\r\n\t\t;\r\n\t\tif (allStates) // when 'removing' classes, also remove alternate-state classes\r\n\t\t\tclasses += (root+_alt+_hover) + (root+_pane+_alt+_hover);\r\n\r\n\t\tif (type==\"resizer\" && $El.hasClass(root+_slide))\r\n\t\t\tclasses += (root+_slide+_hover) + (root+_pane+_slide+_hover);\r\n\r\n\t\treturn $.trim(classes);\r\n\t}\r\n,\taddHover\t= function (evt, el) {\r\n\t\tvar $E = $(el || this);\r\n\t\tif (evt && $E.data(\"layoutRole\") === \"toggler\")\r\n\t\t\tevt.stopPropagation(); // prevent triggering 'slide' on Resizer-bar\r\n\t\t$E.addClass( getHoverClasses($E) );\r\n\t}\r\n,\tremoveHover\t= function (evt, el) {\r\n\t\tvar $E = $(el || this);\r\n\t\t$E.removeClass( getHoverClasses($E, true) );\r\n\t}\r\n\r\n,\tonResizerEnter\t= function (evt) { // ALSO called by toggler.mouseenter\r\n\t\tvar pane\t= $(this).data(\"layoutEdge\")\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\t$d\t\t= $(document)\r\n\t\t;\r\n\t\t// ignore closed-panes and mouse moving back & forth over resizer!\r\n\t\t// also ignore if ANY pane is currently resizing\r\n\t\tif ( s.isResizing || state.paneResizing ) return;\r\n\r\n\t\tif (options.maskPanesEarly)\r\n\t\t\tshowMasks( pane, { resizing: true });\r\n\t}\r\n,\tonResizerLeave\t= function (evt, el) {\r\n\t\tvar\te\t\t= el || this // el is only passed when called by the timer\r\n\t\t,\tpane\t= $(e).data(\"layoutEdge\")\r\n\t\t,\tname\t= pane +\"ResizerLeave\"\r\n\t\t,\t$d\t\t= $(document)\r\n\t\t;\r\n\t\ttimer.clear(pane+\"_openSlider\"); // cancel slideOpen timer, if set\r\n\t\ttimer.clear(name); // cancel enableSelection timer - may re/set below\r\n\t\t// this method calls itself on a timer because it needs to allow\r\n\t\t// enough time for dragging to kick-in and set the isResizing flag\r\n\t\t// dragging has a 100ms delay set, so this delay must be >100\r\n\t\tif (!el) // 1st call - mouseleave event\r\n\t\t\ttimer.set(name, function(){ onResizerLeave(evt, e); }, 200);\r\n\t\t// if user is resizing, dragStop will reset everything, so skip it here\r\n\t\telse if (options.maskPanesEarly && !state.paneResizing) // 2nd call - by timer\r\n\t\t\thideMasks();\r\n\t}\r\n\r\n/*\r\n * ###########################\r\n *   INITIALIZATION METHODS\r\n * ###########################\r\n */\r\n\r\n\t/**\r\n\t * Initialize the layout - called automatically whenever an instance of layout is created\r\n\t *\r\n\t * @see  none - triggered onInit\r\n\t * @return  mixed\ttrue = fully initialized | false = panes not initialized (yet) | 'cancel' = abort\r\n\t */\r\n,\t_create = function () {\r\n\t\t// initialize config/options\r\n\t\tinitOptions();\r\n\t\tvar o = options\r\n\t\t,\ts = state;\r\n\r\n\t\t// TEMP state so isInitialized returns true during init process\r\n\t\ts.creatingLayout = true;\r\n\r\n\t\t// init plugins for this layout, if there are any (eg: stateManagement)\r\n\t\trunPluginCallbacks( Instance, $.layout.onCreate );\r\n\r\n\t\t// options & state have been initialized, so now run beforeLoad callback\r\n\t\t// onload will CANCEL layout creation if it returns false\r\n\t\tif (false === _runCallbacks(\"onload_start\"))\r\n\t\t\treturn 'cancel';\r\n\r\n\t\t// initialize the container element\r\n\t\t_initContainer();\r\n\r\n\t\t// bind hotkey function - keyDown - if required\r\n\t\tinitHotkeys();\r\n\r\n\t\t// bind window.onunload\r\n\t\t$(window).bind(\"unload.\"+ sID, unload);\r\n\r\n\t\t// init plugins for this layout, if there are any (eg: customButtons)\r\n\t\trunPluginCallbacks( Instance, $.layout.onLoad );\r\n\r\n\t\t// if layout elements are hidden, then layout WILL NOT complete initialization!\r\n\t\t// initLayoutElements will set initialized=true and run the onload callback IF successful\r\n\t\tif (o.initPanes) _initLayoutElements();\r\n\r\n\t\tdelete s.creatingLayout;\r\n\r\n\t\treturn state.initialized;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the layout IF not already\r\n\t *\r\n\t * @see  All methods in Instance run this test\r\n\t * @return  boolean\ttrue = layoutElements have been initialized | false = panes are not initialized (yet)\r\n\t */\r\n,\tisInitialized = function () {\r\n\t\tif (state.initialized || state.creatingLayout) return true;\t// already initialized\r\n\t\telse return _initLayoutElements();\t// try to init panes NOW\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the layout - called automatically whenever an instance of layout is created\r\n\t *\r\n\t * @see  _create() & isInitialized\r\n\t * @param {boolean=}\t\t[retry=false]\t// indicates this is a 2nd try\r\n\t * @return  An object pointer to the instance created\r\n\t */\r\n,\t_initLayoutElements = function (retry) {\r\n\t\t// initialize config/options\r\n\t\tvar o = options;\r\n\t\t// CANNOT init panes inside a hidden container!\r\n\t\tif (!$N.is(\":visible\")) {\r\n\t\t\t// handle Chrome bug where popup window 'has no height'\r\n\t\t\t// if layout is BODY element, try again in 50ms\r\n\t\t\t// SEE: http://layout.jquery-dev.com/samples/test_popup_window.html\r\n\t\t\tif ( !retry && browser.webkit && $N[0].tagName === \"BODY\" )\r\n\t\t\t\tsetTimeout(function(){ _initLayoutElements(true); }, 50);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// a center pane is required, so make sure it exists\r\n\t\tif (!getPane(\"center\").length) {\r\n\t\t\treturn _log( o.errors.centerPaneMissing );\r\n\t\t}\r\n\r\n\t\t// TEMP state so isInitialized returns true during init process\r\n\t\tstate.creatingLayout = true;\r\n\r\n\t\t// update Container dims\r\n\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values\r\n\r\n\t\t// initialize all layout elements\r\n\t\tinitPanes();\t// size & position panes - calls initHandles() - which calls initResizable()\r\n\r\n\t\tif (o.scrollToBookmarkOnLoad) {\r\n\t\t\tvar l = self.location;\r\n\t\t\tif (l.hash) l.replace( l.hash ); // scrollTo Bookmark\r\n\t\t}\r\n\r\n\t\t// check to see if this layout 'nested' inside a pane\r\n\t\tif (Instance.hasParentLayout)\r\n\t\t\to.resizeWithWindow = false;\r\n\t\t// bind resizeAll() for 'this layout instance' to window.resize event\r\n\t\telse if (o.resizeWithWindow)\r\n\t\t\t$(window).bind(\"resize.\"+ sID, windowResize);\r\n\r\n\t\tdelete state.creatingLayout;\r\n\t\tstate.initialized = true;\r\n\r\n\t\t// init plugins for this layout, if there are any\r\n\t\trunPluginCallbacks( Instance, $.layout.onReady );\r\n\r\n\t\t// now run the onload callback, if exists\r\n\t\t_runCallbacks(\"onload_end\");\r\n\r\n\t\treturn true; // elements initialized successfully\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize nested layouts for a specific pane - can optionally pass layout-options\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\tThe pane being opened, ie: north, south, east, or west\r\n\t * @param {Object=}\t\t\t[opts]\t\tLayout-options - if passed, will OVERRRIDE options[pane].children\r\n\t * @return  An object pointer to the layout instance created - or null\r\n\t */\r\n,\tcreateChildren = function (evt_or_pane, opts) {\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t;\r\n\t\tif (!$P) return;\r\n\t\tvar\t$C\t= $Cs[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\tsm\t= options.stateManagement || {}\r\n\t\t,\tcos = opts ? (o.children = opts) : o.children\r\n\t\t;\r\n\t\tif ( $.isPlainObject( cos ) )\r\n\t\t\tcos = [ cos ]; // convert a hash to a 1-elem array\r\n\t\telse if (!cos || !$.isArray( cos ))\r\n\t\t\treturn;\r\n\r\n\t\t$.each( cos, function (idx, co) {\r\n\t\t\tif ( !$.isPlainObject( co ) ) return;\r\n\r\n\t\t\t// determine which element is supposed to be the 'child container'\r\n\t\t\t// if pane has a 'containerSelector' OR a 'content-div', use those instead of the pane\r\n\t\t\tvar $containers = co.containerSelector ? $P.find( co.containerSelector ) : ($C || $P);\r\n\r\n\t\t\t$containers.each(function(){\r\n\t\t\t\tvar $cont\t= $(this)\r\n\t\t\t\t,\tchild\t= $cont.data(\"layout\") //\tsee if a child-layout ALREADY exists on this element\r\n\t\t\t\t;\r\n\t\t\t\t// if no layout exists, but children are set, try to create the layout now\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// TODO: see about moving this to the stateManagement plugin, as a method\r\n\t\t\t\t\t// set a unique child-instance key for this layout, if not already set\r\n\t\t\t\t\tsetInstanceKey({ container: $cont, options: co }, s );\r\n\t\t\t\t\t// If THIS layout has a hash in stateManagement.autoLoad,\r\n\t\t\t\t\t// then see if it also contains state-data for this child-layout\r\n\t\t\t\t\t// If so, copy the stateData to child.options.stateManagement.autoLoad\r\n\t\t\t\t\tif ( sm.includeChildren && state.stateData[pane] ) {\r\n\t\t\t\t\t\t//\tTHIS layout's state was cached when its state was loaded\r\n\t\t\t\t\t\tvar\tpaneChildren = state.stateData[pane].children || {}\r\n\t\t\t\t\t\t,\tchildState\t= paneChildren[ co.instanceKey ]\r\n\t\t\t\t\t\t,\tco_sm\t\t= co.stateManagement || (co.stateManagement = { autoLoad: true })\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\t\t// COPY the stateData into the autoLoad key\r\n\t\t\t\t\t\tif ( co_sm.autoLoad === true && childState ) {\r\n\t\t\t\t\t\t\tco_sm.autoSave\t\t\t= false; // disable autoSave because saving handled by parent-layout\r\n\t\t\t\t\t\t\tco_sm.includeChildren\t= true;  // cascade option - FOR NOW\r\n\t\t\t\t\t\t\tco_sm.autoLoad = $.extend(true, {}, childState); // COPY the state-hash\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create the layout\r\n\t\t\t\t\tchild = $cont.layout( co );\r\n\r\n\t\t\t\t\t// if successful, update data\r\n\t\t\t\t\tif (child) {\r\n\t\t\t\t\t\t// add the child and update all layout-pointers\r\n\t\t\t\t\t\t// MAY have already been done by child-layout calling parent.refreshChildren()\r\n\t\t\t\t\t\trefreshChildren( pane, child );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n,\tsetInstanceKey = function (child, parentPaneState) {\r\n\t\t// create a named key for use in state and instance branches\r\n\t\tvar\t$c\t= child.container\r\n\t\t,\to\t= child.options\r\n\t\t,\tsm\t= o.stateManagement\r\n\t\t,\tkey\t= o.instanceKey || $c.data(\"layoutInstanceKey\")\r\n\t\t;\r\n\t\tif (!key) key = (sm && sm.cookie ? sm.cookie.name : '') || o.name; // look for a name/key\r\n\t\tif (!key) key = \"layout\"+ (++parentPaneState.childIdx);\t// if no name/key found, generate one\r\n\t\telse key = key.replace(/[^\\w-]/gi, '_').replace(/_{2,}/g, '_');\t // ensure is valid as a hash key\r\n\t\to.instanceKey = key;\r\n\t\t$c.data(\"layoutInstanceKey\", key); // useful if layout is destroyed and then recreated\r\n\t\treturn key;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\t\tpane\t\tThe pane being opened, ie: north, south, east, or west\r\n\t * @param {Object=}\t\tnewChild\tNew child-layout Instance to add to this pane\r\n\t */\r\n,\trefreshChildren = function (pane, newChild) {\r\n\t\tvar\t$P\t= $Ps[pane]\r\n\t\t,\tpC\t= children[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\to\r\n\t\t;\r\n\t\t// check for destroy()ed layouts and update the child pointers & arrays\r\n\t\tif ($.isPlainObject( pC )) {\r\n\t\t\t$.each( pC, function (key, child) {\r\n\t\t\t\tif (child.destroyed) delete pC[key]\r\n\t\t\t});\r\n\t\t\t// if no more children, remove the children hash\r\n\t\t\tif ($.isEmptyObject( pC ))\r\n\t\t\t\tpC = children[pane] = null; // clear children hash\r\n\t\t}\r\n\r\n\t\t// see if there is a directly-nested layout inside this pane\r\n\t\t// if there is, then there can be only ONE child-layout, so check that...\r\n\t\tif (!newChild && !pC) {\r\n\t\t\tnewChild = $P.data(\"layout\");\r\n\t\t}\r\n\r\n\t\t// if a newChild instance was passed, add it to children[pane]\r\n\t\tif (newChild) {\r\n\t\t\t// update child.state\r\n\t\t\tnewChild.hasParentLayout = true; // set parent-flag in child\r\n\t\t\t// instanceKey is a key-name used in both state and children\r\n\t\t\to = newChild.options;\r\n\t\t\t// set a unique child-instance key for this layout, if not already set\r\n\t\t\tsetInstanceKey( newChild, s );\r\n\t\t\t// add pointer to pane.children hash\r\n\t\t\tif (!pC) pC = children[pane] = {}; // create an empty children hash\r\n\t\t\tpC[ o.instanceKey ] = newChild.container.data(\"layout\"); // add childLayout instance\r\n\t\t}\r\n\r\n\t\t// ALWAYS refresh the pane.children alias, even if null\r\n\t\tInstance[pane].children = children[pane];\r\n\r\n\t\t// if newChild was NOT passed - see if there is a child layout NOW\r\n\t\tif (!newChild) {\r\n\t\t\tcreateChildren(pane); // MAY create a child and re-call this method\r\n\t\t}\r\n\t}\r\n\r\n,\twindowResize = function () {\r\n\t\tvar\to = options\r\n\t\t,\tdelay = Number(o.resizeWithWindowDelay);\r\n\t\tif (delay < 10) delay = 100; // MUST have a delay!\r\n\t\t// resizing uses a delay-loop because the resize event fires repeatly - except in FF, but delay anyway\r\n\t\ttimer.clear(\"winResize\"); // if already running\r\n\t\ttimer.set(\"winResize\", function(){\r\n\t\t\ttimer.clear(\"winResize\");\r\n\t\t\ttimer.clear(\"winResizeRepeater\");\r\n\t\t\tvar dims = elDims( $N, o.inset );\r\n\t\t\t// only trigger resizeAll() if container has changed size\r\n\t\t\tif (dims.innerWidth !== sC.innerWidth || dims.innerHeight !== sC.innerHeight)\r\n\t\t\t\tresizeAll();\r\n\t\t}, delay);\r\n\t\t// ALSO set fixed-delay timer, if not already running\r\n\t\tif (!timer.data[\"winResizeRepeater\"]) setWindowResizeRepeater();\r\n\t}\r\n\r\n,\tsetWindowResizeRepeater = function () {\r\n\t\tvar delay = Number(options.resizeWithWindowMaxDelay);\r\n\t\tif (delay > 0)\r\n\t\t\ttimer.set(\"winResizeRepeater\", function(){ setWindowResizeRepeater(); resizeAll(); }, delay);\r\n\t}\r\n\r\n,\tunload = function () {\r\n\t\tvar o = options;\r\n\r\n\t\t_runCallbacks(\"onunload_start\");\r\n\r\n\t\t// trigger plugin callabacks for this layout (eg: stateManagement)\r\n\t\trunPluginCallbacks( Instance, $.layout.onUnload );\r\n\r\n\t\t_runCallbacks(\"onunload_end\");\r\n\t}\r\n\r\n\t/**\r\n\t * Validate and initialize container CSS and events\r\n\t *\r\n\t * @see  _create()\r\n\t */\r\n,\t_initContainer = function () {\r\n\t\tvar\r\n\t\t\tN\t\t= $N[0]\t\r\n\t\t,\t$H\t\t= $(\"html\")\r\n\t\t,\ttag\t\t= sC.tagName = N.tagName\r\n\t\t,\tid\t\t= sC.id = N.id\r\n\t\t,\tcls\t\t= sC.className = N.className\r\n\t\t,\to\t\t= options\r\n\t\t,\tname\t= o.name\r\n\t\t,\tprops\t= \"position,margin,padding,border\"\r\n\t\t,\tcss\t\t= \"layoutCSS\"\r\n\t\t,\tCSS\t\t= {}\r\n\t\t,\thid\t\t= \"hidden\" // used A LOT!\r\n\t\t//\tsee if this container is a 'pane' inside an outer-layout\r\n\t\t,\tparent\t= $N.data(\"parentLayout\")\t// parent-layout Instance\r\n\t\t,\tpane\t= $N.data(\"layoutEdge\")\t\t// pane-name in parent-layout\r\n\t\t,\tisChild\t= parent && pane\r\n\t\t,\tnum\t\t= $.layout.cssNum\r\n\t\t,\t$parent, n\r\n\t\t;\r\n\t\t// sC = state.container\r\n\t\tsC.ref\t\t= (o.name ? o.name +' layout / ' : '') + tag + (id ? \"#\"+id : cls ? '.['+cls+']' : ''); // used in messages\r\n\t\tsC.isBody\t= (tag === \"BODY\");\r\n\r\n\t\t// try to find a parent-layout\r\n\t\tif (!isChild && !sC.isBody) {\r\n\t\t\t$parent = $N.closest(\".\"+ $.layout.defaults.panes.paneClass);\r\n\t\t\tparent\t= $parent.data(\"parentLayout\");\r\n\t\t\tpane\t= $parent.data(\"layoutEdge\");\r\n\t\t\tisChild\t= parent && pane;\r\n\t\t}\r\n\r\n\t\t$N\t.data({\r\n\t\t\t\tlayout: Instance\r\n\t\t\t,\tlayoutContainer: sID // FLAG to indicate this is a layout-container - contains unique internal ID\r\n\t\t\t})\r\n\t\t\t.addClass(o.containerClass)\r\n\t\t;\r\n\t\tvar layoutMethods = {\r\n\t\t\tdestroy:\t''\r\n\t\t,\tinitPanes:\t''\r\n\t\t,\tresizeAll:\t'resizeAll'\r\n\t\t,\tresize:\t\t'resizeAll'\r\n\t\t};\r\n\t\t// loop hash and bind all methods - include layoutID namespacing\r\n\t\tfor (name in layoutMethods) {\r\n\t\t\t$N.bind(\"layout\"+ name.toLowerCase() +\".\"+ sID, Instance[ layoutMethods[name] || name ]);\r\n\t\t}\r\n\r\n\t\t// if this container is another layout's 'pane', then set child/parent pointers\r\n\t\tif (isChild) {\r\n\t\t\t// update parent flag\r\n\t\t\tInstance.hasParentLayout = true;\r\n\t\t\t// set pointers to THIS child-layout (Instance) in parent-layout\r\n\t\t\tparent.refreshChildren( pane, Instance );\r\n\t\t}\r\n\r\n\t\t// SAVE original container CSS for use in destroy()\r\n\t\tif (!$N.data(css)) {\r\n\t\t\t// handle props like overflow different for BODY & HTML - has 'system default' values\r\n\t\t\tif (sC.isBody) {\r\n\t\t\t\t// SAVE <BODY> CSS\r\n\t\t\t\t$N.data(css, $.extend( styles($N, props), {\r\n\t\t\t\t\theight:\t\t$N.css(\"height\")\r\n\t\t\t\t,\toverflow:\t$N.css(\"overflow\")\r\n\t\t\t\t,\toverflowX:\t$N.css(\"overflowX\")\r\n\t\t\t\t,\toverflowY:\t$N.css(\"overflowY\")\r\n\t\t\t\t}));\r\n\t\t\t\t// ALSO SAVE <HTML> CSS\r\n\t\t\t\t$H.data(css, $.extend( styles($H, 'padding'), {\r\n\t\t\t\t\theight:\t\t\"auto\" // FF would return a fixed px-size!\r\n\t\t\t\t,\toverflow:\t$H.css(\"overflow\")\r\n\t\t\t\t,\toverflowX:\t$H.css(\"overflowX\")\r\n\t\t\t\t,\toverflowY:\t$H.css(\"overflowY\")\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse // handle props normally for non-body elements\r\n\t\t\t\t$N.data(css, styles($N, props+\",top,bottom,left,right,width,height,overflow,overflowX,overflowY\") );\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// common container CSS\r\n\t\t\tCSS = {\r\n\t\t\t\toverflow:\thid\r\n\t\t\t,\toverflowX:\thid\r\n\t\t\t,\toverflowY:\thid\r\n\t\t\t};\r\n\t\t\t$N.css( CSS );\r\n\r\n\t\t\tif (o.inset && !$.isPlainObject(o.inset)) {\r\n\t\t\t\t// can specify a single number for equal outset all-around\r\n\t\t\t\tn = parseInt(o.inset, 10) || 0\r\n\t\t\t\to.inset = {\r\n\t\t\t\t\ttop:\tn\r\n\t\t\t\t,\tbottom:\tn\r\n\t\t\t\t,\tleft:\tn\r\n\t\t\t\t,\tright:\tn\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// format html & body if this is a full page layout\r\n\t\t\tif (sC.isBody) {\r\n\t\t\t\t// if HTML has padding, use this as an outer-spacing around BODY\r\n\t\t\t\tif (!o.outset) {\r\n\t\t\t\t\t// use padding from parent-elem (HTML) as outset\r\n\t\t\t\t\to.outset = {\r\n\t\t\t\t\t\ttop:\tnum($H, \"paddingTop\")\r\n\t\t\t\t\t,\tbottom:\tnum($H, \"paddingBottom\")\r\n\t\t\t\t\t,\tleft:\tnum($H, \"paddingLeft\")\r\n\t\t\t\t\t,\tright:\tnum($H, \"paddingRight\")\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\telse if (!$.isPlainObject(o.outset)) {\r\n\t\t\t\t\t// can specify a single number for equal outset all-around\r\n\t\t\t\t\tn = parseInt(o.outset, 10) || 0\r\n\t\t\t\t\to.outset = {\r\n\t\t\t\t\t\ttop:\tn\r\n\t\t\t\t\t,\tbottom:\tn\r\n\t\t\t\t\t,\tleft:\tn\r\n\t\t\t\t\t,\tright:\tn\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t// HTML\r\n\t\t\t\t$H.css( CSS ).css({\r\n\t\t\t\t\theight:\t\t\"100%\"\r\n\t\t\t\t,\tborder:\t\t\"none\"\t// no border or padding allowed when using height = 100%\r\n\t\t\t\t,\tpadding:\t0\t\t// ditto\r\n\t\t\t\t,\tmargin:\t\t0\r\n\t\t\t\t});\r\n\t\t\t\t// BODY\r\n\t\t\t\tif (browser.isIE6) {\r\n\t\t\t\t\t// IE6 CANNOT use the trick of setting absolute positioning on all 4 sides - must have 'height'\r\n\t\t\t\t\t$N.css({\r\n\t\t\t\t\t\twidth:\t\t\"100%\"\r\n\t\t\t\t\t,\theight:\t\t\"100%\"\r\n\t\t\t\t\t,\tborder:\t\t\"none\"\t// no border or padding allowed when using height = 100%\r\n\t\t\t\t\t,\tpadding:\t0\t\t// ditto\r\n\t\t\t\t\t,\tmargin:\t\t0\r\n\t\t\t\t\t,\tposition:\t\"relative\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// convert body padding to an inset option - the border cannot be measured in IE6!\r\n\t\t\t\t\tif (!o.inset) o.inset = elDims( $N ).inset;\r\n\t\t\t\t}\r\n\t\t\t\telse { // use absolute positioning for BODY to allow borders & padding without overflow\r\n\t\t\t\t\t$N.css({\r\n\t\t\t\t\t\twidth:\t\t\"auto\"\r\n\t\t\t\t\t,\theight:\t\t\"auto\"\r\n\t\t\t\t\t,\tmargin:\t\t0\r\n\t\t\t\t\t,\tposition:\t\"absolute\"\t// allows for border and padding on BODY\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// apply edge-positioning created above\r\n\t\t\t\t\t$N.css( o.outset );\r\n\t\t\t\t}\r\n\t\t\t\t// set current layout-container dimensions\r\n\t\t\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// container MUST have 'position'\r\n\t\t\t\tvar\tp = $N.css(\"position\");\r\n\t\t\t\tif (!p || !p.match(/(fixed|absolute|relative)/))\r\n\t\t\t\t\t$N.css(\"position\",\"relative\");\r\n\r\n\t\t\t\t// set current layout-container dimensions\r\n\t\t\t\tif ( $N.is(\":visible\") ) {\r\n\t\t\t\t\t$.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT change insetX (padding) values\r\n\t\t\t\t\tif (sC.innerHeight < 1) // container has no 'height' - warn developer\r\n\t\t\t\t\t\t_log( o.errors.noContainerHeight.replace(/CONTAINER/, sC.ref) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if container has min-width/height, then enable scrollbar(s)\r\n\t\t\tif ( num($N, \"minWidth\")  ) $N.parent().css(\"overflowX\",\"auto\");\r\n\t\t\tif ( num($N, \"minHeight\") ) $N.parent().css(\"overflowY\",\"auto\");\r\n\r\n\t\t} catch (ex) {}\r\n\t}\r\n\r\n\t/**\r\n\t * Bind layout hotkeys - if options enabled\r\n\t *\r\n\t * @see  _create() and addPane()\r\n\t * @param {string=}\t[panes=\"\"]\tThe edge(s) to process\r\n\t */\r\n,\tinitHotkeys = function (panes) {\r\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\r\n\t\t// bind keyDown to capture hotkeys, if option enabled for ANY pane\r\n\t\t$.each(panes, function (i, pane) {\r\n\t\t\tvar o = options[pane];\r\n\t\t\tif (o.enableCursorHotkey || o.customHotkey) {\r\n\t\t\t\t$(document).bind(\"keydown.\"+ sID, keyDown); // only need to bind this ONCE\r\n\t\t\t\treturn false; // BREAK - binding was done\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Build final OPTIONS data\r\n\t *\r\n\t * @see  _create()\r\n\t */\r\n,\tinitOptions = function () {\r\n\t\tvar data, d, pane, key, val, i, c, o;\r\n\r\n\t\t// reprocess user's layout-options to have correct options sub-key structure\r\n\t\topts = $.layout.transformData( opts, true ); // panes = default subkey\r\n\r\n\t\t// auto-rename old options for backward compatibility\r\n\t\topts = $.layout.backwardCompatibility.renameAllOptions( opts );\r\n\r\n\t\t// if user-options has 'panes' key (pane-defaults), clean it...\r\n\t\tif (!$.isEmptyObject(opts.panes)) {\r\n\t\t\t// REMOVE any pane-defaults that MUST be set per-pane\r\n\t\t\tdata = $.layout.optionsMap.noDefault;\r\n\t\t\tfor (i=0, c=data.length; i<c; i++) {\r\n\t\t\t\tkey = data[i];\r\n\t\t\t\tdelete opts.panes[key]; // OK if does not exist\r\n\t\t\t}\r\n\t\t\t// REMOVE any layout-options specified under opts.panes\r\n\t\t\tdata = $.layout.optionsMap.layout;\r\n\t\t\tfor (i=0, c=data.length; i<c; i++) {\r\n\t\t\t\tkey = data[i];\r\n\t\t\t\tdelete opts.panes[key]; // OK if does not exist\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// MOVE any NON-layout-options from opts-root to opts.panes\r\n\t\tdata = $.layout.optionsMap.layout;\r\n\t\tvar rootKeys = $.layout.config.optionRootKeys;\r\n\t\tfor (key in opts) {\r\n\t\t\tval = opts[key];\r\n\t\t\tif ($.inArray(key, rootKeys) < 0 && $.inArray(key, data) < 0) {\r\n\t\t\t\tif (!opts.panes[key])\r\n\t\t\t\t\topts.panes[key] = $.isPlainObject(val) ? $.extend(true, {}, val) : val;\r\n\t\t\t\tdelete opts[key]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// START by updating ALL options from opts\r\n\t\t$.extend(true, options, opts);\r\n\r\n\t\t// CREATE final options (and config) for EACH pane\r\n\t\t$.each(_c.allPanes, function (i, pane) {\r\n\r\n\t\t\t// apply 'pane-defaults' to CONFIG.[PANE]\r\n\t\t\t_c[pane] = $.extend(true, {}, _c.panes, _c[pane]);\r\n\r\n\t\t\td = options.panes;\r\n\t\t\to = options[pane];\r\n\r\n\t\t\t// center-pane uses SOME keys in defaults.panes branch\r\n\t\t\tif (pane === 'center') {\r\n\t\t\t\t// ONLY copy keys from opts.panes listed in: $.layout.optionsMap.center\r\n\t\t\t\tdata = $.layout.optionsMap.center;\t\t// list of 'center-pane keys'\r\n\t\t\t\tfor (i=0, c=data.length; i<c; i++) {\t// loop the list...\r\n\t\t\t\t\tkey = data[i];\r\n\t\t\t\t\t// only need to use pane-default if pane-specific value not set\r\n\t\t\t\t\tif (!opts.center[key] && (opts.panes[key] || !o[key]))\r\n\t\t\t\t\t\to[key] = d[key]; // pane-default\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// border-panes use ALL keys in defaults.panes branch\r\n\t\t\t\to = options[pane] = $.extend(true, {}, d, o); // re-apply pane-specific opts AFTER pane-defaults\r\n\t\t\t\tcreateFxOptions( pane );\r\n\t\t\t\t// ensure all border-pane-specific base-classes exist\r\n\t\t\t\tif (!o.resizerClass)\to.resizerClass\t= \"ui-layout-resizer\";\r\n\t\t\t\tif (!o.togglerClass)\to.togglerClass\t= \"ui-layout-toggler\";\r\n\t\t\t}\r\n\t\t\t// ensure we have base pane-class (ALL panes)\r\n\t\t\tif (!o.paneClass) o.paneClass = \"ui-layout-pane\";\r\n\t\t});\r\n\r\n\t\t// update options.zIndexes if a zIndex-option specified\r\n\t\tvar zo\t= opts.zIndex\r\n\t\t,\tz\t= options.zIndexes;\r\n\t\tif (zo > 0) {\r\n\t\t\tz.pane_normal\t\t= zo;\r\n\t\t\tz.content_mask\t\t= max(zo+1, z.content_mask);\t// MIN = +1\r\n\t\t\tz.resizer_normal\t= max(zo+2, z.resizer_normal);\t// MIN = +2\r\n\t\t}\r\n\r\n\t\t// DELETE 'panes' key now that we are done - values were copied to EACH pane\r\n\t\tdelete options.panes;\r\n\r\n\r\n\t\tfunction createFxOptions ( pane ) {\r\n\t\t\tvar\to = options[pane]\r\n\t\t\t,\td = options.panes;\r\n\t\t\t// ensure fxSettings key to avoid errors\r\n\t\t\tif (!o.fxSettings) o.fxSettings = {};\r\n\t\t\tif (!d.fxSettings) d.fxSettings = {};\r\n\r\n\t\t\t$.each([\"_open\",\"_close\",\"_size\"], function (i,n) { \r\n\t\t\t\tvar\r\n\t\t\t\t\tsName\t\t= \"fxName\"+ n\r\n\t\t\t\t,\tsSpeed\t\t= \"fxSpeed\"+ n\r\n\t\t\t\t,\tsSettings\t= \"fxSettings\"+ n\r\n\t\t\t\t\t// recalculate fxName according to specificity rules\r\n\t\t\t\t,\tfxName = o[sName] =\r\n\t\t\t\t\t\to[sName]\t// options.west.fxName_open\r\n\t\t\t\t\t||\td[sName]\t// options.panes.fxName_open\r\n\t\t\t\t\t||\to.fxName\t// options.west.fxName\r\n\t\t\t\t\t||\td.fxName\t// options.panes.fxName\r\n\t\t\t\t\t||\t\"none\"\t\t// MEANS $.layout.defaults.panes.fxName == \"\" || false || null || 0\r\n\t\t\t\t,\tfxExists\t= $.effects && ($.effects[fxName] || ($.effects.effect && $.effects.effect[fxName]))\r\n\t\t\t\t;\r\n\t\t\t\t// validate fxName to ensure is valid effect - MUST have effect-config data in options.effects\r\n\t\t\t\tif (fxName === \"none\" || !options.effects[fxName] || !fxExists)\r\n\t\t\t\t\tfxName = o[sName] = \"none\"; // effect not loaded OR unrecognized fxName\r\n\r\n\t\t\t\t// set vars for effects subkeys to simplify logic\r\n\t\t\t\tvar\tfx\t\t= options.effects[fxName] || {}\t// effects.slide\r\n\t\t\t\t,\tfx_all\t= fx.all\t|| null\t\t\t\t// effects.slide.all\r\n\t\t\t\t,\tfx_pane\t= fx[pane]\t|| null\t\t\t\t// effects.slide.west\r\n\t\t\t\t;\r\n\t\t\t\t// create fxSpeed[_open|_close|_size]\r\n\t\t\t\to[sSpeed] =\r\n\t\t\t\t\to[sSpeed]\t\t\t\t// options.west.fxSpeed_open\r\n\t\t\t\t||\td[sSpeed]\t\t\t\t// options.west.fxSpeed_open\r\n\t\t\t\t||\to.fxSpeed\t\t\t\t// options.west.fxSpeed\r\n\t\t\t\t||\td.fxSpeed\t\t\t\t// options.panes.fxSpeed\r\n\t\t\t\t||\tnull\t\t\t\t\t// DEFAULT - let fxSetting.duration control speed\r\n\t\t\t\t;\r\n\t\t\t\t// create fxSettings[_open|_close|_size]\r\n\t\t\t\to[sSettings] = $.extend(\r\n\t\t\t\t\ttrue\r\n\t\t\t\t,\t{}\r\n\t\t\t\t,\tfx_all\t\t\t\t\t// effects.slide.all\r\n\t\t\t\t,\tfx_pane\t\t\t\t\t// effects.slide.west\r\n\t\t\t\t,\td.fxSettings\t\t\t// options.panes.fxSettings\r\n\t\t\t\t,\to.fxSettings\t\t\t// options.west.fxSettings\r\n\t\t\t\t,\td[sSettings]\t\t\t// options.panes.fxSettings_open\r\n\t\t\t\t,\to[sSettings]\t\t\t// options.west.fxSettings_open\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\t// DONE creating action-specific-settings for this pane,\r\n\t\t\t// so DELETE generic options - are no longer meaningful\r\n\t\t\tdelete o.fxName;\r\n\t\t\tdelete o.fxSpeed;\r\n\t\t\tdelete o.fxSettings;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize module objects, styling, size and position for all panes\r\n\t *\r\n\t * @see  _initElements()\r\n\t * @param {string}\tpane\t\tThe pane to process\r\n\t */\r\n,\tgetPane = function (pane) {\r\n\t\tvar sel = options[pane].paneSelector\r\n\t\tif (sel.substr(0,1)===\"#\") // ID selector\r\n\t\t\t// NOTE: elements selected 'by ID' DO NOT have to be 'children'\r\n\t\t\treturn $N.find(sel).eq(0);\r\n\t\telse { // class or other selector\r\n\t\t\tvar $P = $N.children(sel).eq(0);\r\n\t\t\t// look for the pane nested inside a 'form' element\r\n\t\t\treturn $P.length ? $P : $N.children(\"form:first\").children(sel).eq(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object=}\t\tevt\r\n\t */\r\n,\tinitPanes = function (evt) {\r\n\t\t// stopPropagation if called by trigger(\"layoutinitpanes\") - use evtPane utility \r\n\t\tevtPane(evt);\r\n\r\n\t\t// NOTE: do north & south FIRST so we can measure their height - do center LAST\r\n\t\t$.each(_c.allPanes, function (idx, pane) {\r\n\t\t\taddPane( pane, true );\r\n\t\t});\r\n\r\n\t\t// init the pane-handles NOW in case we have to hide or close the pane below\r\n\t\tinitHandles();\r\n\r\n\t\t// now that all panes have been initialized and initially-sized,\r\n\t\t// make sure there is really enough space available for each pane\r\n\t\t$.each(_c.borderPanes, function (i, pane) {\r\n\t\t\tif ($Ps[pane] && state[pane].isVisible) { // pane is OPEN\r\n\t\t\t\tsetSizeLimits(pane);\r\n\t\t\t\tmakePaneFit(pane); // pane may be Closed, Hidden or Resized by makePaneFit()\r\n\t\t\t}\r\n\t\t});\r\n\t\t// size center-pane AGAIN in case we 'closed' a border-pane in loop above\r\n\t\tsizeMidPanes(\"center\");\r\n\r\n\t\t//\tChrome/Webkit sometimes fires callbacks BEFORE it completes resizing!\r\n\t\t//\tBefore RC30.3, there was a 10ms delay here, but that caused layout \r\n\t\t//\tto load asynchrously, which is BAD, so try skipping delay for now\r\n\r\n\t\t// process pane contents and callbacks, and init/resize child-layout if exists\r\n\t\t$.each(_c.allPanes, function (idx, pane) {\r\n\t\t\tafterInitPane(pane);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Add a pane to the layout - subroutine of initPanes()\r\n\t *\r\n\t * @see  initPanes()\r\n\t * @param {string}\tpane\t\t\tThe pane to process\r\n\t * @param {boolean=}\t[force=false]\tSize content after init\r\n\t */\r\n,\taddPane = function (pane, force) {\r\n\t\tif ( !force && !isInitialized() ) return;\r\n\t\tvar\r\n\t\t\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tc\t\t= _c[pane]\r\n\t\t,\tdir\t\t= c.dir\r\n\t\t,\tfx\t\t= s.fx\r\n\t\t,\tspacing\t= o.spacing_open || 0\r\n\t\t,\tisCenter = (pane === \"center\")\r\n\t\t,\tCSS\t\t= {}\r\n\t\t,\t$P\t\t= $Ps[pane]\r\n\t\t,\tsize, minSize, maxSize, child\r\n\t\t;\r\n\t\t// if pane-pointer already exists, remove the old one first\r\n\t\tif ($P)\r\n\t\t\tremovePane( pane, false, true, false );\r\n\t\telse\r\n\t\t\t$Cs[pane] = false; // init\r\n\r\n\t\t$P = $Ps[pane] = getPane(pane);\r\n\t\tif (!$P.length) {\r\n\t\t\t$Ps[pane] = false; // logic\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// SAVE original Pane CSS\r\n\t\tif (!$P.data(\"layoutCSS\")) {\r\n\t\t\tvar props = \"position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border\";\r\n\t\t\t$P.data(\"layoutCSS\", styles($P, props));\r\n\t\t}\r\n\r\n\t\t// create alias for pane data in Instance - initHandles will add more\r\n\t\tInstance[pane] = {\r\n\t\t\tname:\t\tpane\r\n\t\t,\tpane:\t\t$Ps[pane]\r\n\t\t,\tcontent:\t$Cs[pane]\r\n\t\t,\toptions:\toptions[pane]\r\n\t\t,\tstate:\t\tstate[pane]\r\n\t\t,\tchildren:\tchildren[pane]\r\n\t\t};\r\n\r\n\t\t// add classes, attributes & events\r\n\t\t$P\t.data({\r\n\t\t\t\tparentLayout:\tInstance\t\t// pointer to Layout Instance\r\n\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\r\n\t\t\t,\tlayoutEdge:\t\tpane\r\n\t\t\t,\tlayoutRole:\t\t\"pane\"\r\n\t\t\t})\r\n\t\t\t.css(c.cssReq).css(\"zIndex\", options.zIndexes.pane_normal)\r\n\t\t\t.css(o.applyDemoStyles ? c.cssDemo : {}) // demo styles\r\n\t\t\t.addClass( o.paneClass +\" \"+ o.paneClass+\"-\"+pane ) // default = \"ui-layout-pane ui-layout-pane-west\" - may be a dupe of 'paneSelector'\r\n\t\t\t.bind(\"mouseenter.\"+ sID, addHover )\r\n\t\t\t.bind(\"mouseleave.\"+ sID, removeHover )\r\n\t\t\t;\r\n\t\tvar paneMethods = {\r\n\t\t\t\thide:\t\t\t\t''\r\n\t\t\t,\tshow:\t\t\t\t''\r\n\t\t\t,\ttoggle:\t\t\t\t''\r\n\t\t\t,\tclose:\t\t\t\t''\r\n\t\t\t,\topen:\t\t\t\t''\r\n\t\t\t,\tslideOpen:\t\t\t''\r\n\t\t\t,\tslideClose:\t\t\t''\r\n\t\t\t,\tslideToggle:\t\t''\r\n\t\t\t,\tsize:\t\t\t\t'sizePane'\r\n\t\t\t,\tsizePane:\t\t\t'sizePane'\r\n\t\t\t,\tsizeContent:\t\t''\r\n\t\t\t,\tsizeHandles:\t\t''\r\n\t\t\t,\tenableClosable:\t\t''\r\n\t\t\t,\tdisableClosable:\t''\r\n\t\t\t,\tenableSlideable:\t''\r\n\t\t\t,\tdisableSlideable:\t''\r\n\t\t\t,\tenableResizable:\t''\r\n\t\t\t,\tdisableResizable:\t''\r\n\t\t\t,\tswapPanes:\t\t\t'swapPanes'\r\n\t\t\t,\tswap:\t\t\t\t'swapPanes'\r\n\t\t\t,\tmove:\t\t\t\t'swapPanes'\r\n\t\t\t,\tremovePane:\t\t\t'removePane'\r\n\t\t\t,\tremove:\t\t\t\t'removePane'\r\n\t\t\t,\tcreateChildren:\t\t''\r\n\t\t\t,\tresizeChildren:\t\t''\r\n\t\t\t,\tresizeAll:\t\t\t'resizeAll'\r\n\t\t\t,\tresizeLayout:\t\t'resizeAll'\r\n\t\t\t}\r\n\t\t,\tname;\r\n\t\t// loop hash and bind all methods - include layoutID namespacing\r\n\t\tfor (name in paneMethods) {\r\n\t\t\t$P.bind(\"layoutpane\"+ name.toLowerCase() +\".\"+ sID, Instance[ paneMethods[name] || name ]);\r\n\t\t}\r\n\r\n\t\t// see if this pane has a 'scrolling-content element'\r\n\t\tinitContent(pane, false); // false = do NOT sizeContent() - called later\r\n\r\n\t\tif (!isCenter) {\r\n\t\t\t// call _parseSize AFTER applying pane classes & styles - but before making visible (if hidden)\r\n\t\t\t// if o.size is auto or not valid, then MEASURE the pane and use that as its 'size'\r\n\t\t\tsize\t= s.size = _parseSize(pane, o.size);\r\n\t\t\tminSize\t= _parseSize(pane,o.minSize) || 1;\r\n\t\t\tmaxSize\t= _parseSize(pane,o.maxSize) || 100000;\r\n\t\t\tif (size > 0) size = max(min(size, maxSize), minSize);\r\n\t\t\ts.autoResize = o.autoResize; // used with percentage sizes\r\n\r\n\t\t\t// state for border-panes\r\n\t\t\ts.isClosed  = false; // true = pane is closed\r\n\t\t\ts.isSliding = false; // true = pane is currently open by 'sliding' over adjacent panes\r\n\t\t\ts.isResizing= false; // true = pane is in process of being resized\r\n\t\t\ts.isHidden\t= false; // true = pane is hidden - no spacing, resizer or toggler is visible!\r\n\r\n\t\t\t// array for 'pin buttons' whose classNames are auto-updated on pane-open/-close\r\n\t\t\tif (!s.pins) s.pins = [];\r\n\t\t}\r\n\t\t//\tstates common to ALL panes\r\n\t\ts.tagName\t= $P[0].tagName;\r\n\t\ts.edge\t\t= pane;\t\t// useful if pane is (or about to be) 'swapped' - easy find out where it is (or is going)\r\n\t\ts.noRoom\t= false;\t// true = pane 'automatically' hidden due to insufficient room - will unhide automatically\r\n\t\ts.isVisible\t= true;\t\t// false = pane is invisible - closed OR hidden - simplify logic\r\n\r\n\t\t// init pane positioning\r\n\t\tsetPanePosition( pane );\r\n\r\n\t\t// if pane is not visible, \r\n\t\tif (dir === \"horz\") // north or south pane\r\n\t\t\tCSS.height = cssH($P, size);\r\n\t\telse if (dir === \"vert\") // east or west pane\r\n\t\t\tCSS.width = cssW($P, size);\r\n\t\t//else if (isCenter) {}\r\n\r\n\t\t$P.css(CSS); // apply size -- top, bottom & height will be set by sizeMidPanes\r\n\t\tif (dir != \"horz\") sizeMidPanes(pane, true); // true = skipCallback\r\n\r\n\t\t// if manually adding a pane AFTER layout initialization, then...\r\n\t\tif (state.initialized) {\r\n\t\t\tinitHandles( pane );\r\n\t\t\tinitHotkeys( pane );\r\n\t\t}\r\n\r\n\t\t// close or hide the pane if specified in settings\r\n\t\tif (o.initClosed && o.closable && !o.initHidden)\r\n\t\t\tclose(pane, true, true); // true, true = force, noAnimation\r\n\t\telse if (o.initHidden || o.initClosed)\r\n\t\t\thide(pane); // will be completely invisible - no resizer or spacing\r\n\t\telse if (!s.noRoom)\r\n\t\t\t// make the pane visible - in case was initially hidden\r\n\t\t\t$P.css(\"display\",\"block\");\r\n\t\t// ELSE setAsOpen() - called later by initHandles()\r\n\r\n\t\t// RESET visibility now - pane will appear IF display:block\r\n\t\t$P.css(\"visibility\",\"visible\");\r\n\r\n\t\t// check option for auto-handling of pop-ups & drop-downs\r\n\t\tif (o.showOverflowOnHover)\r\n\t\t\t$P.hover( allowOverflow, resetOverflow );\r\n\r\n\t\t// if manually adding a pane AFTER layout initialization, then...\r\n\t\tif (state.initialized) {\r\n\t\t\tafterInitPane( pane );\r\n\t\t}\r\n\t}\r\n\r\n,\tafterInitPane = function (pane) {\r\n\t\tvar\t$P\t= $Ps[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t;\r\n\t\tif (!$P) return;\r\n\r\n\t\t// see if there is a directly-nested layout inside this pane\r\n\t\tif ($P.data(\"layout\"))\r\n\t\t\trefreshChildren( pane, $P.data(\"layout\") );\r\n\r\n\t\t// process pane contents and callbacks, and init/resize child-layout if exists\r\n\t\tif (s.isVisible) { // pane is OPEN\r\n\t\t\tif (state.initialized) // this pane was added AFTER layout was created\r\n\t\t\t\tresizeAll(); // will also sizeContent\r\n\t\t\telse\r\n\t\t\t\tsizeContent(pane);\r\n\r\n\t\t\tif (o.triggerEventsOnLoad)\r\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\r\n\t\t\telse // automatic if onresize called, otherwise call it specifically\r\n\t\t\t\t// resize child - IF inner-layout already exists (created before this layout)\r\n\t\t\t\tresizeChildren(pane, true); // a previously existing childLayout\r\n\t\t}\r\n\r\n\t\t// init childLayouts - even if pane is not visible\r\n\t\tif (o.initChildren && o.children)\r\n\t\t\tcreateChildren(pane);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string=}\tpanes\t\tThe pane(s) to process\r\n\t */\r\n,\tsetPanePosition = function (panes) {\r\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\r\n\r\n\t\t// create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV\r\n\t\t$.each(panes, function (i, pane) {\r\n\t\t\tvar $P\t= $Ps[pane]\r\n\t\t\t,\t$R\t= $Rs[pane]\r\n\t\t\t,\to\t= options[pane]\r\n\t\t\t,\ts\t= state[pane]\r\n\t\t\t,\tside =  _c[pane].side\r\n\t\t\t,\tCSS\t= {}\r\n\t\t\t;\r\n\t\t\tif (!$P) return; // pane does not exist - skip\r\n\r\n\t\t\t// set css-position to account for container borders & padding\r\n\t\t\tswitch (pane) {\r\n\t\t\t\tcase \"north\": \tCSS.top \t= sC.inset.top;\r\n\t\t\t\t\t\t\t\tCSS.left \t= sC.inset.left;\r\n\t\t\t\t\t\t\t\tCSS.right\t= sC.inset.right;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"south\": \tCSS.bottom\t= sC.inset.bottom;\r\n\t\t\t\t\t\t\t\tCSS.left \t= sC.inset.left;\r\n\t\t\t\t\t\t\t\tCSS.right \t= sC.inset.right;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"west\": \tCSS.left \t= sC.inset.left; // top, bottom & height set by sizeMidPanes()\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"east\": \tCSS.right \t= sC.inset.right; // ditto\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"center\":\t// top, left, width & height set by sizeMidPanes()\r\n\t\t\t}\r\n\t\t\t// apply position\r\n\t\t\t$P.css(CSS); \r\n\r\n\t\t\t// update resizer position\r\n\t\t\tif ($R && s.isClosed)\r\n\t\t\t\t$R.css(side, sC.inset[side]);\r\n\t\t\telse if ($R && !s.isHidden)\r\n\t\t\t\t$R.css(side, sC.inset[side] + getPaneSize(pane));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize module objects, styling, size and position for all resize bars and toggler buttons\r\n\t *\r\n\t * @see  _create()\r\n\t * @param {string=}\t[panes=\"\"]\tThe edge(s) to process\r\n\t */\r\n,\tinitHandles = function (panes) {\r\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\r\n\r\n\t\t// create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV\r\n\t\t$.each(panes, function (i, pane) {\r\n\t\t\tvar $P\t\t= $Ps[pane];\r\n\t\t\t$Rs[pane]\t= false; // INIT\r\n\t\t\t$Ts[pane]\t= false;\r\n\t\t\tif (!$P) return; // pane does not exist - skip\r\n\r\n\t\t\tvar\to\t\t= options[pane]\r\n\t\t\t,\ts\t\t= state[pane]\r\n\t\t\t,\tc\t\t= _c[pane]\r\n\t\t\t,\tpaneId\t= o.paneSelector.substr(0,1) === \"#\" ? o.paneSelector.substr(1) : \"\"\r\n\t\t\t,\trClass\t= o.resizerClass\r\n\t\t\t,\ttClass\t= o.togglerClass\r\n\t\t\t,\tspacing\t= (s.isVisible ? o.spacing_open : o.spacing_closed)\r\n\t\t\t,\t_pane\t= \"-\"+ pane // used for classNames\r\n\t\t\t,\t_state\t= (s.isVisible ? \"-open\" : \"-closed\") // used for classNames\r\n\t\t\t,\tI\t\t= Instance[pane]\r\n\t\t\t\t// INIT RESIZER BAR\r\n\t\t\t,\t$R\t\t= I.resizer = $Rs[pane] = $(\"<div></div>\")\r\n\t\t\t\t// INIT TOGGLER BUTTON\r\n\t\t\t,\t$T\t\t= I.toggler = (o.closable ? $Ts[pane] = $(\"<div></div>\") : false)\r\n\t\t\t;\r\n\r\n\t\t\t//if (s.isVisible && o.resizable) ... handled by initResizable\r\n\t\t\tif (!s.isVisible && o.slidable)\r\n\t\t\t\t$R.attr(\"title\", o.tips.Slide).css(\"cursor\", o.sliderCursor);\r\n\r\n\t\t\t$R\t// if paneSelector is an ID, then create a matching ID for the resizer, eg: \"#paneLeft\" => \"paneLeft-resizer\"\r\n\t\t\t\t.attr(\"id\", paneId ? paneId +\"-resizer\" : \"\" )\r\n\t\t\t\t.data({\r\n\t\t\t\t\tparentLayout:\tInstance\r\n\t\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\r\n\t\t\t\t,\tlayoutEdge:\t\tpane\r\n\t\t\t\t,\tlayoutRole:\t\t\"resizer\"\r\n\t\t\t\t})\r\n\t\t\t\t.css(_c.resizers.cssReq).css(\"zIndex\", options.zIndexes.resizer_normal)\r\n\t\t\t\t.css(o.applyDemoStyles ? _c.resizers.cssDemo : {}) // add demo styles\r\n\t\t\t\t.addClass(rClass +\" \"+ rClass+_pane)\r\n\t\t\t\t.hover(addHover, removeHover) // ALWAYS add hover-classes, even if resizing is not enabled - handle with CSS instead\r\n\t\t\t\t.hover(onResizerEnter, onResizerLeave) // ALWAYS NEED resizer.mouseleave to balance toggler.mouseenter\r\n\t\t\t\t.mousedown($.layout.disableTextSelection)\t// prevent text-selection OUTSIDE resizer\r\n\t\t\t\t.mouseup($.layout.enableTextSelection)\t\t// not really necessary, but just in case\r\n\t\t\t\t.appendTo($N) // append DIV to container\r\n\t\t\t;\r\n\t\t\tif ($.fn.disableSelection)\r\n\t\t\t\t$R.disableSelection(); // prevent text-selection INSIDE resizer\r\n\t\t\tif (o.resizerDblClickToggle)\r\n\t\t\t\t$R.bind(\"dblclick.\"+ sID, toggle );\r\n\r\n\t\t\tif ($T) {\r\n\t\t\t\t$T\t// if paneSelector is an ID, then create a matching ID for the resizer, eg: \"#paneLeft\" => \"#paneLeft-toggler\"\r\n\t\t\t\t\t.attr(\"id\", paneId ? paneId +\"-toggler\" : \"\" )\r\n\t\t\t\t\t.data({\r\n\t\t\t\t\t\tparentLayout:\tInstance\r\n\t\t\t\t\t,\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\r\n\t\t\t\t\t,\tlayoutEdge:\t\tpane\r\n\t\t\t\t\t,\tlayoutRole:\t\t\"toggler\"\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.css(_c.togglers.cssReq) // add base/required styles\r\n\t\t\t\t\t.css(o.applyDemoStyles ? _c.togglers.cssDemo : {}) // add demo styles\r\n\t\t\t\t\t.addClass(tClass +\" \"+ tClass+_pane)\r\n\t\t\t\t\t.hover(addHover, removeHover) // ALWAYS add hover-classes, even if toggling is not enabled - handle with CSS instead\r\n\t\t\t\t\t.bind(\"mouseenter\", onResizerEnter) // NEED toggler.mouseenter because mouseenter MAY NOT fire on resizer\r\n\t\t\t\t\t.appendTo($R) // append SPAN to resizer DIV\r\n\t\t\t\t;\r\n\t\t\t\t// ADD INNER-SPANS TO TOGGLER\r\n\t\t\t\tif (o.togglerContent_open) // ui-layout-open\r\n\t\t\t\t\t$(\"<span>\"+ o.togglerContent_open +\"</span>\")\r\n\t\t\t\t\t\t.data({\r\n\t\t\t\t\t\t\tlayoutEdge:\t\tpane\r\n\t\t\t\t\t\t,\tlayoutRole:\t\t\"togglerContent\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.data(\"layoutRole\", \"togglerContent\")\r\n\t\t\t\t\t\t.data(\"layoutEdge\", pane)\r\n\t\t\t\t\t\t.addClass(\"content content-open\")\r\n\t\t\t\t\t\t.css(\"display\",\"none\")\r\n\t\t\t\t\t\t.appendTo( $T )\r\n\t\t\t\t\t\t//.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-open instead!\r\n\t\t\t\t\t;\r\n\t\t\t\tif (o.togglerContent_closed) // ui-layout-closed\r\n\t\t\t\t\t$(\"<span>\"+ o.togglerContent_closed +\"</span>\")\r\n\t\t\t\t\t\t.data({\r\n\t\t\t\t\t\t\tlayoutEdge:\t\tpane\r\n\t\t\t\t\t\t,\tlayoutRole:\t\t\"togglerContent\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.addClass(\"content content-closed\")\r\n\t\t\t\t\t\t.css(\"display\",\"none\")\r\n\t\t\t\t\t\t.appendTo( $T )\r\n\t\t\t\t\t\t//.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-closed instead!\r\n\t\t\t\t\t;\r\n\t\t\t\t// ADD TOGGLER.click/.hover\r\n\t\t\t\tenableClosable(pane);\r\n\t\t\t}\r\n\r\n\t\t\t// add Draggable events\r\n\t\t\tinitResizable(pane);\r\n\r\n\t\t\t// ADD CLASSNAMES & SLIDE-BINDINGS - eg: class=\"resizer resizer-west resizer-open\"\r\n\t\t\tif (s.isVisible)\r\n\t\t\t\tsetAsOpen(pane);\t// onOpen will be called, but NOT onResize\r\n\t\t\telse {\r\n\t\t\t\tsetAsClosed(pane);\t// onClose will be called\r\n\t\t\t\tbindStartSlidingEvents(pane, true); // will enable events IF option is set\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// SET ALL HANDLE DIMENSIONS\r\n\t\tsizeHandles();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initialize scrolling ui-layout-content div - if exists\r\n\t *\r\n\t * @see  initPane() - or externally after an Ajax injection\r\n\t * @param {string}\tpane\t\t\tThe pane to process\r\n\t * @param {boolean=}\t[resize=true]\tSize content after init\r\n\t */\r\n,\tinitContent = function (pane, resize) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar \r\n\t\t\to\t= options[pane]\r\n\t\t,\tsel\t= o.contentSelector\r\n\t\t,\tI\t= Instance[pane]\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$C\r\n\t\t;\r\n\t\tif (sel) $C = I.content = $Cs[pane] = (o.findNestedContent)\r\n\t\t\t? $P.find(sel).eq(0) // match 1-element only\r\n\t\t\t: $P.children(sel).eq(0)\r\n\t\t;\r\n\t\tif ($C && $C.length) {\r\n\t\t\t$C.data(\"layoutRole\", \"content\");\r\n\t\t\t// SAVE original Content CSS\r\n\t\t\tif (!$C.data(\"layoutCSS\"))\r\n\t\t\t\t$C.data(\"layoutCSS\", styles($C, \"height\"));\r\n\t\t\t$C.css( _c.content.cssReq );\r\n\t\t\tif (o.applyDemoStyles) {\r\n\t\t\t\t$C.css( _c.content.cssDemo ); // add padding & overflow: auto to content-div\r\n\t\t\t\t$P.css( _c.content.cssDemoPane ); // REMOVE padding/scrolling from pane\r\n\t\t\t}\r\n\t\t\t// ensure no vertical scrollbar on pane - will mess up measurements\r\n\t\t\tif ($P.css(\"overflowX\").match(/(scroll|auto)/)) {\r\n\t\t\t\t$P.css(\"overflow\", \"hidden\");\r\n\t\t\t}\r\n\t\t\tstate[pane].content = {}; // init content state\r\n\t\t\tif (resize !== false) sizeContent(pane);\r\n\t\t\t// sizeContent() is called AFTER init of all elements\r\n\t\t}\r\n\t\telse\r\n\t\t\tI.content = $Cs[pane] = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Add resize-bars to all panes that specify it in options\r\n\t * -dependancy: $.fn.resizable - will skip if not found\r\n\t *\r\n\t * @see  _create()\r\n\t * @param {string=}\t[panes=\"\"]\tThe edge(s) to process\r\n\t */\r\n,\tinitResizable = function (panes) {\r\n\t\tvar\tdraggingAvailable = $.layout.plugins.draggable\r\n\t\t,\tside // set in start()\r\n\t\t;\r\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\r\n\r\n\t\t$.each(panes, function (idx, pane) {\r\n\t\t\tvar o = options[pane];\r\n\t\t\tif (!draggingAvailable || !$Ps[pane] || !o.resizable) {\r\n\t\t\t\to.resizable = false;\r\n\t\t\t\treturn true; // skip to next\r\n\t\t\t}\r\n\r\n\t\t\tvar s\t\t= state[pane]\r\n\t\t\t,\tz\t\t= options.zIndexes\r\n\t\t\t,\tc\t\t= _c[pane]\r\n\t\t\t,\tside\t= c.dir==\"horz\" ? \"top\" : \"left\"\r\n\t\t\t,\t$P \t\t= $Ps[pane]\r\n\t\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t\t,\tbase\t= o.resizerClass\r\n\t\t\t,\tlastPos\t= 0 // used when live-resizing\r\n\t\t\t,\tr, live // set in start because may change\r\n\t\t\t//\t'drag' classes are applied to the ORIGINAL resizer-bar while dragging is in process\r\n\t\t\t,\tresizerClass\t\t= base+\"-drag\"\t\t\t\t// resizer-drag\r\n\t\t\t,\tresizerPaneClass\t= base+\"-\"+pane+\"-drag\"\t\t// resizer-north-drag\r\n\t\t\t//\t'helper' class is applied to the CLONED resizer-bar while it is being dragged\r\n\t\t\t,\thelperClass\t\t\t= base+\"-dragging\"\t\t\t// resizer-dragging\r\n\t\t\t,\thelperPaneClass\t\t= base+\"-\"+pane+\"-dragging\" // resizer-north-dragging\r\n\t\t\t,\thelperLimitClass\t= base+\"-dragging-limit\"\t// resizer-drag\r\n\t\t\t,\thelperPaneLimitClass = base+\"-\"+pane+\"-dragging-limit\"\t// resizer-north-drag\r\n\t\t\t,\thelperClassesSet\t= false \t\t\t\t\t// logic var\r\n\t\t\t;\r\n\r\n\t\t\tif (!s.isClosed)\r\n\t\t\t\t$R.attr(\"title\", o.tips.Resize)\r\n\t\t\t\t  .css(\"cursor\", o.resizerCursor); // n-resize, s-resize, etc\r\n\r\n\t\t\t$R.draggable({\r\n\t\t\t\tcontainment:\t$N[0] // limit resizing to layout container\r\n\t\t\t,\taxis:\t\t\t(c.dir==\"horz\" ? \"y\" : \"x\") // limit resizing to horz or vert axis\r\n\t\t\t,\tdelay:\t\t\t0\r\n\t\t\t,\tdistance:\t\t1\r\n\t\t\t,\tgrid:\t\t\to.resizingGrid\r\n\t\t\t//\tbasic format for helper - style it using class: .ui-draggable-dragging\r\n\t\t\t,\thelper:\t\t\t\"clone\"\r\n\t\t\t,\topacity:\t\to.resizerDragOpacity\r\n\t\t\t,\taddClasses:\t\tfalse // avoid ui-state-disabled class when disabled\r\n\t\t\t//,\tiframeFix:\t\to.draggableIframeFix // TODO: consider using when bug is fixed\r\n\t\t\t,\tzIndex:\t\t\tz.resizer_drag\r\n\r\n\t\t\t,\tstart: function (e, ui) {\r\n\t\t\t\t\t// REFRESH options & state pointers in case we used swapPanes\r\n\t\t\t\t\to = options[pane];\r\n\t\t\t\t\ts = state[pane];\r\n\t\t\t\t\t// re-read options\r\n\t\t\t\t\tlive = o.livePaneResizing;\r\n\r\n\t\t\t\t\t// ondrag_start callback - will CANCEL hide if returns false\r\n\t\t\t\t\t// TODO: dragging CANNOT be cancelled like this, so see if there is a way?\r\n\t\t\t\t\tif (false === _runCallbacks(\"ondrag_start\", pane)) return false;\r\n\r\n\t\t\t\t\ts.isResizing\t\t= true; // prevent pane from closing while resizing\r\n\t\t\t\t\tstate.paneResizing\t= pane; // easy to see if ANY pane is resizing\r\n\t\t\t\t\ttimer.clear(pane+\"_closeSlider\"); // just in case already triggered\r\n\r\n\t\t\t\t\t// SET RESIZER LIMITS - used in drag()\r\n\t\t\t\t\tsetSizeLimits(pane); // update pane/resizer state\r\n\t\t\t\t\tr = s.resizerPosition;\r\n\t\t\t\t\tlastPos = ui.position[ side ]\r\n\r\n\t\t\t\t\t$R.addClass( resizerClass +\" \"+ resizerPaneClass ); // add drag classes\r\n\t\t\t\t\thelperClassesSet = false; // reset logic var - see drag()\r\n\r\n\t\t\t\t\t// MASK PANES CONTAINING IFRAMES, APPLETS OR OTHER TROUBLESOME ELEMENTS\r\n\t\t\t\t\tshowMasks( pane, { resizing: true });\r\n\t\t\t\t}\r\n\r\n\t\t\t,\tdrag: function (e, ui) {\r\n\t\t\t\t\tif (!helperClassesSet) { // can only add classes after clone has been added to the DOM\r\n\t\t\t\t\t\t//$(\".ui-draggable-dragging\")\r\n\t\t\t\t\t\tui.helper\r\n\t\t\t\t\t\t\t.addClass( helperClass +\" \"+ helperPaneClass ) // add helper classes\r\n\t\t\t\t\t\t\t.css({ right: \"auto\", bottom: \"auto\" })\t// fix dir=\"rtl\" issue\r\n\t\t\t\t\t\t\t.children().css(\"visibility\",\"hidden\")\t// hide toggler inside dragged resizer-bar\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\t\thelperClassesSet = true;\r\n\t\t\t\t\t\t// draggable bug!? RE-SET zIndex to prevent E/W resize-bar showing through N/S pane!\r\n\t\t\t\t\t\tif (s.isSliding) $Ps[pane].css(\"zIndex\", z.pane_sliding);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// CONTAIN RESIZER-BAR TO RESIZING LIMITS\r\n\t\t\t\t\tvar limit = 0;\r\n\t\t\t\t\tif (ui.position[side] < r.min) {\r\n\t\t\t\t\t\tui.position[side] = r.min;\r\n\t\t\t\t\t\tlimit = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ui.position[side] > r.max) {\r\n\t\t\t\t\t\tui.position[side] = r.max;\r\n\t\t\t\t\t\tlimit = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// ADD/REMOVE dragging-limit CLASS\r\n\t\t\t\t\tif (limit) {\r\n\t\t\t\t\t\tui.helper.addClass( helperLimitClass +\" \"+ helperPaneLimitClass ); // at dragging-limit\r\n\t\t\t\t\t\twindow.defaultStatus = (limit>0 && pane.match(/(north|west)/)) || (limit<0 && pane.match(/(south|east)/)) ? o.tips.maxSizeWarning : o.tips.minSizeWarning;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tui.helper.removeClass( helperLimitClass +\" \"+ helperPaneLimitClass ); // not at dragging-limit\r\n\t\t\t\t\t\twindow.defaultStatus = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// DYNAMICALLY RESIZE PANES IF OPTION ENABLED\r\n\t\t\t\t\t// won't trigger unless resizer has actually moved!\r\n\t\t\t\t\tif (live && Math.abs(ui.position[side] - lastPos) >= o.liveResizingTolerance) {\r\n\t\t\t\t\t\tlastPos = ui.position[side];\r\n\t\t\t\t\t\tresizePanes(e, ui, pane)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t,\tstop: function (e, ui) {\r\n\t\t\t\t\t$('body').enableSelection(); // RE-ENABLE TEXT SELECTION\r\n\t\t\t\t\twindow.defaultStatus = \"\"; // clear 'resizing limit' message from statusbar\r\n\t\t\t\t\t$R.removeClass( resizerClass +\" \"+ resizerPaneClass ); // remove drag classes from Resizer\r\n\t\t\t\t\ts.isResizing\t\t= false;\r\n\t\t\t\t\tstate.paneResizing\t= false; // easy to see if ANY pane is resizing\r\n\t\t\t\t\tresizePanes(e, ui, pane, true); // true = resizingDone\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * resizePanes\r\n\t\t *\r\n\t\t * Sub-routine called from stop() - and drag() if livePaneResizing\r\n\t\t *\r\n\t\t * @param {!Object}\t\tevt\r\n\t\t * @param {!Object}\t\tui\r\n\t\t * @param {string}\t\tpane\r\n\t\t * @param {boolean=}\t\t[resizingDone=false]\r\n\t\t */\r\n\t\tvar resizePanes = function (evt, ui, pane, resizingDone) {\r\n\t\t\tvar\tdragPos\t= ui.position\r\n\t\t\t,\tc\t\t= _c[pane]\r\n\t\t\t,\to\t\t= options[pane]\r\n\t\t\t,\ts\t\t= state[pane]\r\n\t\t\t,\tresizerPos\r\n\t\t\t;\r\n\t\t\tswitch (pane) {\r\n\t\t\t\tcase \"north\":\tresizerPos = dragPos.top; break;\r\n\t\t\t\tcase \"west\":\tresizerPos = dragPos.left; break;\r\n\t\t\t\tcase \"south\":\tresizerPos = sC.layoutHeight - dragPos.top  - o.spacing_open; break;\r\n\t\t\t\tcase \"east\":\tresizerPos = sC.layoutWidth  - dragPos.left - o.spacing_open; break;\r\n\t\t\t};\r\n\t\t\t// remove container margin from resizer position to get the pane size\r\n\t\t\tvar newSize = resizerPos - sC.inset[c.side];\r\n\r\n\t\t\t// Disable OR Resize Mask(s) created in drag.start\r\n\t\t\tif (!resizingDone) {\r\n\t\t\t\t// ensure we meet liveResizingTolerance criteria\r\n\t\t\t\tif (Math.abs(newSize - s.size) < o.liveResizingTolerance)\r\n\t\t\t\t\treturn; // SKIP resize this time\r\n\t\t\t\t// resize the pane\r\n\t\t\t\tmanualSizePane(pane, newSize, false, true); // true = noAnimation\r\n\t\t\t\tsizeMasks(); // resize all visible masks\r\n\t\t\t}\r\n\t\t\telse { // resizingDone\r\n\t\t\t\t// ondrag_end callback\r\n\t\t\t\tif (false !== _runCallbacks(\"ondrag_end\", pane))\r\n\t\t\t\t\tmanualSizePane(pane, newSize, false, true); // true = noAnimation\r\n\t\t\t\thideMasks(true); // true = force hiding all masks even if one is 'sliding'\r\n\t\t\t\tif (s.isSliding) // RE-SHOW 'object-masks' so objects won't show through sliding pane\r\n\t\t\t\t\tshowMasks( pane, { resizing: true });\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t *\tsizeMask\r\n\t *\r\n\t *\tNeeded to overlay a DIV over an IFRAME-pane because mask CANNOT be *inside* the pane\r\n\t *\tCalled when mask created, and during livePaneResizing\r\n\t */\r\n,\tsizeMask = function () {\r\n\t\tvar $M\t\t= $(this)\r\n\t\t,\tpane\t= $M.data(\"layoutMask\") // eg: \"west\"\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t;\r\n\t\t// only masks over an IFRAME-pane need manual resizing\r\n\t\tif (s.tagName == \"IFRAME\" && s.isVisible) // no need to mask closed/hidden panes\r\n\t\t\t$M.css({\r\n\t\t\t\ttop:\ts.offsetTop\r\n\t\t\t,\tleft:\ts.offsetLeft\r\n\t\t\t,\twidth:\ts.outerWidth\r\n\t\t\t,\theight:\ts.outerHeight\r\n\t\t\t});\r\n\t\t/* ALT Method...\r\n\t\tvar $P = $Ps[pane];\r\n\t\t$M.css( $P.position() ).css({ width: $P[0].offsetWidth, height: $P[0].offsetHeight });\r\n\t\t*/\r\n\t}\r\n,\tsizeMasks = function () {\r\n\t\t$Ms.each( sizeMask ); // resize all 'visible' masks\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\tpane\t\tThe pane being resized, animated or isSliding\r\n\t * @param {Object=}\t[args]\t\t(optional) Options: which masks to apply, and to which panes\r\n\t */\r\n,\tshowMasks = function (pane, args) {\r\n\t\tvar\tc\t\t= _c[pane]\r\n\t\t,\tpanes\t=  [\"center\"]\r\n\t\t,\tz\t\t= options.zIndexes\r\n\t\t,\ta\t\t= $.extend({\r\n\t\t\t\t\t\tobjectsOnly:\tfalse\r\n\t\t\t\t\t,\tanimation:\t\tfalse\r\n\t\t\t\t\t,\tresizing:\t\ttrue\r\n\t\t\t\t\t,\tsliding:\t\tstate[pane].isSliding\r\n\t\t\t\t\t},\targs )\r\n\t\t,\to, s\r\n\t\t;\r\n\t\tif (a.resizing)\r\n\t\t\tpanes.push( pane );\r\n\t\tif (a.sliding)\r\n\t\t\tpanes.push( _c.oppositeEdge[pane] ); // ADD the oppositeEdge-pane\r\n\r\n\t\tif (c.dir === \"horz\") {\r\n\t\t\tpanes.push(\"west\");\r\n\t\t\tpanes.push(\"east\");\r\n\t\t}\r\n\r\n\t\t$.each(panes, function(i,p){\r\n\t\t\ts = state[p];\r\n\t\t\to = options[p];\r\n\t\t\tif (s.isVisible && ( o.maskObjects || (!a.objectsOnly && o.maskContents) )) {\r\n\t\t\t\tgetMasks(p).each(function(){\r\n\t\t\t\t\tsizeMask.call(this);\r\n\t\t\t\t\tthis.style.zIndex = s.isSliding ? z.pane_sliding+1 : z.pane_normal+1\r\n\t\t\t\t\tthis.style.display = \"block\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @param {boolean=}\tforce\t\tHide masks even if a pane is sliding\r\n\t */\r\n,\thideMasks = function (force) {\r\n\t\t// ensure no pane is resizing - could be a timing issue\r\n\t\tif (force || !state.paneResizing) {\r\n\t\t\t$Ms.hide(); // hide ALL masks\r\n\t\t}\r\n\t\t// if ANY pane is sliding, then DO NOT remove masks from panes with maskObjects enabled\r\n\t\telse if (!force && !$.isEmptyObject( state.panesSliding )) {\r\n\t\t\tvar\ti = $Ms.length - 1\r\n\t\t\t,\tp, $M;\r\n\t\t\tfor (; i >= 0; i--) {\r\n\t\t\t\t$M\t= $Ms.eq(i);\r\n\t\t\t\tp\t= $M.data(\"layoutMask\");\r\n\t\t\t\tif (!options[p].maskObjects) {\r\n\t\t\t\t\t$M.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\tpane\r\n\t */\r\n,\tgetMasks = function (pane) {\r\n\t\tvar $Masks\t= $([])\r\n\t\t,\t$M, i = 0, c = $Ms.length\r\n\t\t;\r\n\t\tfor (; i<c; i++) {\r\n\t\t\t$M = $Ms.eq(i);\r\n\t\t\tif ($M.data(\"layoutMask\") === pane)\r\n\t\t\t\t$Masks = $Masks.add( $M );\r\n\t\t}\r\n\t\tif ($Masks.length)\r\n\t\t\treturn $Masks;\r\n\t\telse\r\n\t\t\treturn createMasks(pane);\r\n\t}\r\n\r\n\t/**\r\n\t * createMasks\r\n\t *\r\n\t * Generates both DIV (ALWAYS used) and IFRAME (optional) elements as masks\r\n\t * An IFRAME mask is created *under* the DIV when maskObjects=true, because a DIV cannot mask an applet\r\n\t *\r\n\t * @param {string}\tpane\r\n\t */\r\n,\tcreateMasks = function (pane) {\r\n\t\tvar\r\n\t\t\t$P\t= $Ps[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\tz\t= options.zIndexes\r\n\t\t,\tisIframe, el, $M, css, i\r\n\t\t;\r\n\t\tif (!o.maskContents && !o.maskObjects) return $([]);\r\n\t\t// if o.maskObjects=true, then loop TWICE to create BOTH kinds of mask, else only create a DIV\r\n\t\tfor (i=0; i < (o.maskObjects ? 2 : 1); i++) {\r\n\t\t\tisIframe = o.maskObjects && i==0;\r\n\t\t\tel = document.createElement( isIframe ? \"iframe\" : \"div\" );\r\n\t\t\t$M = $(el).data(\"layoutMask\", pane); // add data to relate mask to pane\r\n\t\t\tel.className = \"ui-layout-mask ui-layout-mask-\"+ pane; // for user styling\r\n\t\t\tcss = el.style;\r\n\t\t\t// Both DIVs and IFRAMES\r\n\t\t\tcss.background\t= \"#FFF\";\r\n\t\t\tcss.position\t= \"absolute\";\r\n\t\t\tcss.display\t\t= \"block\";\r\n\t\t\tif (isIframe) { // IFRAME-only props\r\n\t\t\t\tel.src\t\t= \"about:blank\";\r\n\t\t\t\tel.frameborder = 0;\r\n\t\t\t\tcss.border\t= 0;\r\n\t\t\t\tcss.opacity\t= 0;\r\n\t\t\t\tcss.filter\t= \"Alpha(Opacity='0')\";\r\n\t\t\t\t//el.allowTransparency = true; - for IE, but breaks masking ability!\r\n\t\t\t}\r\n\t\t\telse { // DIV-only props\r\n\t\t\t\tcss.opacity\t= 0.001;\r\n\t\t\t\tcss.filter\t= \"Alpha(Opacity='1')\";\r\n\t\t\t}\r\n\t\t\t// if pane IS an IFRAME, then must mask the pane itself\r\n\t\t\tif (s.tagName == \"IFRAME\") {\r\n\t\t\t\t// NOTE sizing done by a subroutine so can be called during live-resizing\r\n\t\t\t\tcss.zIndex\t= z.pane_normal+1; // 1-higher than pane\r\n\t\t\t\t$N.append( el ); // append to LAYOUT CONTAINER\r\n\t\t\t}\r\n\t\t\t// otherwise put masks *inside the pane* to mask its contents\r\n\t\t\telse {\r\n\t\t\t\t$M.addClass(\"ui-layout-mask-inside-pane\");\r\n\t\t\t\tcss.zIndex\t= o.maskZindex || z.content_mask; // usually 1, but customizable\r\n\t\t\t\tcss.top\t\t= 0;\r\n\t\t\t\tcss.left\t= 0;\r\n\t\t\t\tcss.width\t= \"100%\";\r\n\t\t\t\tcss.height\t= \"100%\";\r\n\t\t\t\t$P.append( el ); // append INSIDE pane element\r\n\t\t\t}\r\n\t\t\t// add Mask to cached array so can be resized & reused\r\n\t\t\t$Ms = $Ms.add( el );\r\n\t\t}\r\n\t\treturn $Ms;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroy this layout and reset all elements\r\n\t *\r\n\t * @param {boolean=}\t[destroyChildren=false]\t\tDestory Child-Layouts first?\r\n\t */\r\n,\tdestroy = function (evt_or_destroyChildren, destroyChildren) {\r\n\t\t// UNBIND layout events and remove global object\r\n\t\t$(window).unbind(\".\"+ sID);\t\t// resize & unload\r\n\t\t$(document).unbind(\".\"+ sID);\t// keyDown (hotkeys)\r\n\r\n\t\tif (typeof evt_or_destroyChildren === \"object\")\r\n\t\t\t// stopPropagation if called by trigger(\"layoutdestroy\") - use evtPane utility \r\n\t\t\tevtPane(evt_or_destroyChildren);\r\n\t\telse // no event, so transfer 1st param to destroyChildren param\r\n\t\t\tdestroyChildren = evt_or_destroyChildren;\r\n\r\n\t\t// need to look for parent layout BEFORE we remove the container data, else skips a level\r\n\t\t//var parentPane = Instance.hasParentLayout ? $.layout.getParentPaneInstance( $N ) : null;\r\n\r\n\t\t// reset layout-container\r\n\t\t$N\t.clearQueue()\r\n\t\t\t.removeData(\"layout\")\r\n\t\t\t.removeData(\"layoutContainer\")\r\n\t\t\t.removeClass(options.containerClass)\r\n\t\t\t.unbind(\".\"+ sID) // remove ALL Layout events\r\n\t\t;\r\n\r\n\t\t// remove all mask elements that have been created\r\n\t\t$Ms.remove();\r\n\r\n\t\t// loop all panes to remove layout classes, attributes and bindings\r\n\t\t$.each(_c.allPanes, function (i, pane) {\r\n\t\t\tremovePane( pane, false, true, destroyChildren ); // true = skipResize\r\n\t\t});\r\n\r\n\t\t// do NOT reset container CSS if is a 'pane' (or 'content') in an outer-layout - ie, THIS layout is 'nested'\r\n\t\tvar css = \"layoutCSS\";\r\n\t\tif ($N.data(css) && !$N.data(\"layoutRole\")) // RESET CSS\r\n\t\t\t$N.css( $N.data(css) ).removeData(css);\r\n\r\n\t\t// for full-page layouts, also reset the <HTML> CSS\r\n\t\tif (sC.tagName === \"BODY\" && ($N = $(\"html\")).data(css)) // RESET <HTML> CSS\r\n\t\t\t$N.css( $N.data(css) ).removeData(css);\r\n\r\n\t\t// trigger plugins for this layout, if there are any\r\n\t\trunPluginCallbacks( Instance, $.layout.onDestroy );\r\n\r\n\t\t// trigger state-management and onunload callback\r\n\t\tunload();\r\n\r\n\t\t// clear the Instance of everything except for container & options (so could recreate)\r\n\t\t// RE-CREATE: myLayout = myLayout.container.layout( myLayout.options );\r\n\t\tfor (var n in Instance)\r\n\t\t\tif (!n.match(/^(container|options)$/)) delete Instance[ n ];\r\n\t\t// add a 'destroyed' flag to make it easy to check\r\n\t\tInstance.destroyed = true;\r\n\r\n\t\t// if this is a child layout, CLEAR the child-pointer in the parent\r\n\t\t/* for now the pointer REMAINS, but with only container, options and destroyed keys\r\n\t\tif (parentPane) {\r\n\t\t\tvar layout\t= parentPane.pane.data(\"parentLayout\")\r\n\t\t\t,\tkey\t\t= layout.options.instanceKey || 'error';\r\n\t\t\t// THIS SYNTAX MAY BE WRONG!\r\n\t\t\tparentPane.children[key] = layout.children[ parentPane.name ].children[key] = null;\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\treturn Instance; // for coding convenience\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a pane from the layout - subroutine of destroy()\r\n\t *\r\n\t * @see  destroy()\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\tThe pane to process\r\n\t * @param {boolean=}\t\t\t[remove=false]\t\tRemove the DOM element?\r\n\t * @param {boolean=}\t\t\t[skipResize=false]\tSkip calling resizeAll()?\r\n\t * @param {boolean=}\t\t\t[destroyChild=true]\tDestroy Child-layouts? If not passed, obeys options setting\r\n\t */\r\n,\tremovePane = function (evt_or_pane, remove, skipResize, destroyChild) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$C\t= $Cs[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t,\t$T\t= $Ts[pane]\r\n\t\t;\r\n\t\t// NOTE: elements can still exist even after remove()\r\n\t\t//\t\tso check for missing data(), which is cleared by removed()\r\n\t\tif ($P && $.isEmptyObject( $P.data() )) $P = false;\r\n\t\tif ($C && $.isEmptyObject( $C.data() )) $C = false;\r\n\t\tif ($R && $.isEmptyObject( $R.data() )) $R = false;\r\n\t\tif ($T && $.isEmptyObject( $T.data() )) $T = false;\r\n\r\n\t\tif ($P) $P.stop(true, true);\r\n\r\n\t\tvar\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\td\t= \"layout\"\r\n\t\t,\tcss\t= \"layoutCSS\"\r\n\t\t,\tpC\t= children[pane]\r\n\t\t,\thasChildren\t= $.isPlainObject( pC ) && !$.isEmptyObject( pC )\r\n\t\t,\tdestroy\t\t= destroyChild !== undefined ? destroyChild : o.destroyChildren\r\n\t\t;\r\n\t\t// FIRST destroy the child-layout(s)\r\n\t\tif (hasChildren && destroy) {\r\n\t\t\t$.each( pC, function (key, child) {\r\n\t\t\t\tif (!child.destroyed)\r\n\t\t\t\t\tchild.destroy(true);// tell child-layout to destroy ALL its child-layouts too\r\n\t\t\t\tif (child.destroyed)\t// destroy was successful\r\n\t\t\t\t\tdelete pC[key];\r\n\t\t\t});\r\n\t\t\t// if no more children, remove the children hash\r\n\t\t\tif ($.isEmptyObject( pC )) {\r\n\t\t\t\tpC = children[pane] = null; // clear children hash\r\n\t\t\t\thasChildren = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Note: can't 'remove' a pane element with non-destroyed children\r\n\t\tif ($P && remove && !hasChildren)\r\n\t\t\t$P.remove(); // remove the pane-element and everything inside it\r\n\t\telse if ($P && $P[0]) {\r\n\t\t\t//\tcreate list of ALL pane-classes that need to be removed\r\n\t\t\tvar\troot\t= o.paneClass // default=\"ui-layout-pane\"\r\n\t\t\t,\tpRoot\t= root +\"-\"+ pane // eg: \"ui-layout-pane-west\"\r\n\t\t\t,\t_open\t= \"-open\"\r\n\t\t\t,\t_sliding= \"-sliding\"\r\n\t\t\t,\t_closed\t= \"-closed\"\r\n\t\t\t,\tclasses\t= [\troot, root+_open, root+_closed, root+_sliding,\t\t// generic classes\r\n\t\t\t\t\t\t\tpRoot, pRoot+_open, pRoot+_closed, pRoot+_sliding ]\t// pane-specific classes\r\n\t\t\t;\r\n\t\t\t$.merge(classes, getHoverClasses($P, true)); // ADD hover-classes\r\n\t\t\t// remove all Layout classes from pane-element\r\n\t\t\t$P\t.removeClass( classes.join(\" \") ) // remove ALL pane-classes\r\n\t\t\t\t.removeData(\"parentLayout\")\r\n\t\t\t\t.removeData(\"layoutPane\")\r\n\t\t\t\t.removeData(\"layoutRole\")\r\n\t\t\t\t.removeData(\"layoutEdge\")\r\n\t\t\t\t.removeData(\"autoHidden\")\t// in case set\r\n\t\t\t\t.unbind(\".\"+ sID) // remove ALL Layout events\r\n\t\t\t\t// TODO: remove these extra unbind commands when jQuery is fixed\r\n\t\t\t\t//.unbind(\"mouseenter\"+ sID)\r\n\t\t\t\t//.unbind(\"mouseleave\"+ sID)\r\n\t\t\t;\r\n\t\t\t// do NOT reset CSS if this pane/content is STILL the container of a nested layout!\r\n\t\t\t// the nested layout will reset its 'container' CSS when/if it is destroyed\r\n\t\t\tif (hasChildren && $C) {\r\n\t\t\t\t// a content-div may not have a specific width, so give it one to contain the Layout\r\n\t\t\t\t$C.width( $C.width() );\r\n\t\t\t\t$.each( pC, function (key, child) {\r\n\t\t\t\t\tchild.resizeAll(); // resize the Layout\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse if ($C)\r\n\t\t\t\t$C.css( $C.data(css) ).removeData(css).removeData(\"layoutRole\");\r\n\t\t\t// remove pane AFTER content in case there was a nested layout\r\n\t\t\tif (!$P.data(d))\r\n\t\t\t\t$P.css( $P.data(css) ).removeData(css);\r\n\t\t}\r\n\r\n\t\t// REMOVE pane resizer and toggler elements\r\n\t\tif ($T) $T.remove();\r\n\t\tif ($R) $R.remove();\r\n\r\n\t\t// CLEAR all pointers and state data\r\n\t\tInstance[pane] = $Ps[pane] = $Cs[pane] = $Rs[pane] = $Ts[pane] = false;\r\n\t\ts = { removed: true };\r\n\r\n\t\tif (!skipResize)\r\n\t\t\tresizeAll();\r\n\t}\r\n\r\n\r\n/*\r\n * ###########################\r\n *\t   ACTION METHODS\r\n * ###########################\r\n */\r\n\r\n\t/**\r\n\t * @param {string}\tpane\r\n\t */\r\n,\t_hidePane = function (pane) {\r\n\t\tvar $P\t= $Ps[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= $P[0].style\r\n\t\t;\r\n\t\tif (o.useOffscreenClose) {\r\n\t\t\tif (!$P.data(_c.offscreenReset))\r\n\t\t\t\t$P.data(_c.offscreenReset, { left: s.left, right: s.right });\r\n\t\t\t$P.css( _c.offscreenCSS );\r\n\t\t}\r\n\t\telse\r\n\t\t\t$P.hide().removeData(_c.offscreenReset);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\tpane\r\n\t */\r\n,\t_showPane = function (pane) {\r\n\t\tvar $P\t= $Ps[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\toff\t= _c.offscreenCSS\r\n\t\t,\told\t= $P.data(_c.offscreenReset)\r\n\t\t,\ts\t= $P[0].style\r\n\t\t;\r\n\t\t$P\t.show() // ALWAYS show, just in case\r\n\t\t\t.removeData(_c.offscreenReset);\r\n\t\tif (o.useOffscreenClose && old) {\r\n\t\t\tif (s.left == off.left)\r\n\t\t\t\ts.left = old.left;\r\n\t\t\tif (s.right == off.right)\r\n\t\t\t\ts.right = old.right;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Completely 'hides' a pane, including its spacing - as if it does not exist\r\n\t * The pane is not actually 'removed' from the source, so can use 'show' to un-hide it\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being hidden, ie: north, south, east, or west\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\t\r\n\t */\r\n,\thide = function (evt_or_pane, noAnimation) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t;\r\n\t\tif (pane === \"center\" || !$P || s.isHidden) return; // pane does not exist OR is already hidden\r\n\r\n\t\t// onhide_start callback - will CANCEL hide if returns false\r\n\t\tif (state.initialized && false === _runCallbacks(\"onhide_start\", pane)) return;\r\n\r\n\t\ts.isSliding = false; // just in case\r\n\t\tdelete state.panesSliding[pane];\r\n\r\n\t\t// now hide the elements\r\n\t\tif ($R) $R.hide(); // hide resizer-bar\r\n\t\tif (!state.initialized || s.isClosed) {\r\n\t\t\ts.isClosed = true; // to trigger open-animation on show()\r\n\t\t\ts.isHidden  = true;\r\n\t\t\ts.isVisible = false;\r\n\t\t\tif (!state.initialized)\r\n\t\t\t\t_hidePane(pane); // no animation when loading page\r\n\t\t\tsizeMidPanes(_c[pane].dir === \"horz\" ? \"\" : \"center\");\r\n\t\t\tif (state.initialized || o.triggerEventsOnLoad)\r\n\t\t\t\t_runCallbacks(\"onhide_end\", pane);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ts.isHiding = true; // used by onclose\r\n\t\t\tclose(pane, false, noAnimation); // adjust all panes to fit\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Show a hidden pane - show as 'closed' by default unless openPane = true\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being opened, ie: north, south, east, or west\r\n\t * @param {boolean=}\t\t\t[openPane=false]\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\r\n\t * @param {boolean=}\t\t\t[noAlert=false]\r\n\t */\r\n,\tshow = function (evt_or_pane, openPane, noAnimation, noAlert) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t;\r\n\t\tif (pane === \"center\" || !$P || !s.isHidden) return; // pane does not exist OR is not hidden\r\n\r\n\t\t// onshow_start callback - will CANCEL show if returns false\r\n\t\tif (false === _runCallbacks(\"onshow_start\", pane)) return;\r\n\r\n\t\ts.isShowing = true; // used by onopen/onclose\r\n\t\t//s.isHidden  = false; - will be set by open/close - if not cancelled\r\n\t\ts.isSliding = false; // just in case\r\n\t\tdelete state.panesSliding[pane];\r\n\r\n\t\t// now show the elements\r\n\t\t//if ($R) $R.show(); - will be shown by open/close\r\n\t\tif (openPane === false)\r\n\t\t\tclose(pane, true); // true = force\r\n\t\telse\r\n\t\t\topen(pane, false, noAnimation, noAlert); // adjust all panes to fit\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Toggles a pane open/closed by calling either open or close\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\tThe pane being toggled, ie: north, south, east, or west\r\n\t * @param {boolean=}\t\t\t[slide=false]\r\n\t */\r\n,\ttoggle = function (evt_or_pane, slide) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\r\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t;\r\n\t\tif (evt) // called from to $R.dblclick OR triggerPaneEvent\r\n\t\t\tevt.stopImmediatePropagation();\r\n\t\tif (s.isHidden)\r\n\t\t\tshow(pane); // will call 'open' after unhiding it\r\n\t\telse if (s.isClosed)\r\n\t\t\topen(pane, !!slide);\r\n\t\telse\r\n\t\t\tclose(pane);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Utility method used during init or other auto-processes\r\n\t *\r\n\t * @param {string}\tpane   The pane being closed\r\n\t * @param {boolean=}\t[setHandles=false]\r\n\t */\r\n,\t_closePane = function (pane, setHandles) {\r\n\t\tvar\r\n\t\t\t$P\t= $Ps[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t;\r\n\t\t_hidePane(pane);\r\n\t\ts.isClosed = true;\r\n\t\ts.isVisible = false;\r\n\t\tif (setHandles) setAsClosed(pane);\r\n\t}\r\n\r\n\t/**\r\n\t * Close the specified pane (animation optional), and resize all other panes as needed\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being closed, ie: north, south, east, or west\r\n\t * @param {boolean=}\t\t\t[force=false]\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\r\n\t * @param {boolean=}\t\t\t[skipCallback=false]\r\n\t */\r\n,\tclose = function (evt_or_pane, force, noAnimation, skipCallback) {\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane);\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\t// if pane has been initialized, but NOT the complete layout, close pane instantly\r\n\t\tif (!state.initialized && $Ps[pane]) {\r\n\t\t\t_closePane(pane, true); // INIT pane as closed\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!isInitialized()) return;\r\n\r\n\t\tvar\r\n\t\t\t$P\t= $Ps[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t,\t$T\t= $Ts[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\tc\t= _c[pane]\r\n\t\t,\tdoFX, isShowing, isHiding, wasSliding;\r\n\r\n\t\t// QUEUE in case another action/animation is in progress\r\n\t\t$N.queue(function( queueNext ){\r\n\r\n\t\t\tif ( !$P\r\n\t\t\t||\t(!o.closable && !s.isShowing && !s.isHiding)\t// invalid request // (!o.resizable && !o.closable) ???\r\n\t\t\t||\t(!force && s.isClosed && !s.isShowing)\t\t\t// already closed\r\n\t\t\t) return queueNext();\r\n\r\n\t\t\t// onclose_start callback - will CANCEL hide if returns false\r\n\t\t\t// SKIP if just 'showing' a hidden pane as 'closed'\r\n\t\t\tvar abort = !s.isShowing && false === _runCallbacks(\"onclose_start\", pane);\r\n\r\n\t\t\t// transfer logic vars to temp vars\r\n\t\t\tisShowing\t= s.isShowing;\r\n\t\t\tisHiding\t= s.isHiding;\r\n\t\t\twasSliding\t= s.isSliding;\r\n\t\t\t// now clear the logic vars (REQUIRED before aborting)\r\n\t\t\tdelete s.isShowing;\r\n\t\t\tdelete s.isHiding;\r\n\r\n\t\t\tif (abort) return queueNext();\r\n\r\n\t\t\tdoFX\t\t= !noAnimation && !s.isClosed && (o.fxName_close != \"none\");\r\n\t\t\ts.isMoving\t= true;\r\n\t\t\ts.isClosed\t= true;\r\n\t\t\ts.isVisible\t= false;\r\n\t\t\t// update isHidden BEFORE sizing panes\r\n\t\t\tif (isHiding) s.isHidden = true;\r\n\t\t\telse if (isShowing) s.isHidden = false;\r\n\r\n\t\t\tif (s.isSliding) // pane is being closed, so UNBIND trigger events\r\n\t\t\t\tbindStopSlidingEvents(pane, false); // will set isSliding=false\r\n\t\t\telse // resize panes adjacent to this one\r\n\t\t\t\tsizeMidPanes(_c[pane].dir === \"horz\" ? \"\" : \"center\", false); // false = NOT skipCallback\r\n\r\n\t\t\t// if this pane has a resizer bar, move it NOW - before animation\r\n\t\t\tsetAsClosed(pane);\r\n\r\n\t\t\t// CLOSE THE PANE\r\n\t\t\tif (doFX) { // animate the close\r\n\t\t\t\tlockPaneForFX(pane, true);\t// need to set left/top so animation will work\r\n\t\t\t\t$P.hide( o.fxName_close, o.fxSettings_close, o.fxSpeed_close, function () {\r\n\t\t\t\t\tlockPaneForFX(pane, false); // undo\r\n\t\t\t\t\tif (s.isClosed) close_2();\r\n\t\t\t\t\tqueueNext();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse { // hide the pane without animation\r\n\t\t\t\t_hidePane(pane);\r\n\t\t\t\tclose_2();\r\n\t\t\t\tqueueNext();\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// SUBROUTINE\r\n\t\tfunction close_2 () {\r\n\t\t\ts.isMoving\t= false;\r\n\t\t\tbindStartSlidingEvents(pane, true); // will enable if o.slidable = true\r\n\r\n\t\t\t// if opposite-pane was autoClosed, see if it can be autoOpened now\r\n\t\t\tvar altPane = _c.oppositeEdge[pane];\r\n\t\t\tif (state[ altPane ].noRoom) {\r\n\t\t\t\tsetSizeLimits( altPane );\r\n\t\t\t\tmakePaneFit( altPane );\r\n\t\t\t}\r\n\r\n\t\t\tif (!skipCallback && (state.initialized || o.triggerEventsOnLoad)) {\r\n\t\t\t\t// onclose callback - UNLESS just 'showing' a hidden pane as 'closed'\r\n\t\t\t\tif (!isShowing)\t_runCallbacks(\"onclose_end\", pane);\r\n\t\t\t\t// onhide OR onshow callback\r\n\t\t\t\tif (isShowing)\t_runCallbacks(\"onshow_end\", pane);\r\n\t\t\t\tif (isHiding)\t_runCallbacks(\"onhide_end\", pane);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\tpane\tThe pane just closed, ie: north, south, east, or west\r\n\t */\r\n,\tsetAsClosed = function (pane) {\r\n\t\tif (!$Rs[pane]) return; // handles not initialized yet!\r\n\t\tvar\r\n\t\t\t$P\t\t= $Ps[pane]\r\n\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t,\t$T\t\t= $Ts[pane]\r\n\t\t,\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tside\t= _c[pane].side\r\n\t\t,\trClass\t= o.resizerClass\r\n\t\t,\ttClass\t= o.togglerClass\r\n\t\t,\t_pane\t= \"-\"+ pane // used for classNames\r\n\t\t,\t_open\t= \"-open\"\r\n\t\t,\t_sliding= \"-sliding\"\r\n\t\t,\t_closed\t= \"-closed\"\r\n\t\t;\r\n\t\t$R\r\n\t\t\t.css(side, sC.inset[side]) // move the resizer\r\n\t\t\t.removeClass( rClass+_open +\" \"+ rClass+_pane+_open )\r\n\t\t\t.removeClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\r\n\t\t\t.addClass( rClass+_closed +\" \"+ rClass+_pane+_closed )\r\n\t\t;\r\n\t\t// handle already-hidden panes in case called by swap() or a similar method \r\n\t\tif (s.isHidden) $R.hide(); // hide resizer-bar \r\n\r\n\t\t// DISABLE 'resizing' when closed - do this BEFORE bindStartSlidingEvents?\r\n\t\tif (o.resizable && $.layout.plugins.draggable)\r\n\t\t\t$R\r\n\t\t\t\t.draggable(\"disable\")\r\n\t\t\t\t.removeClass(\"ui-state-disabled\") // do NOT apply disabled styling - not suitable here\r\n\t\t\t\t.css(\"cursor\", \"default\")\r\n\t\t\t\t.attr(\"title\",\"\")\r\n\t\t\t;\r\n\r\n\t\t// if pane has a toggler button, adjust that too\r\n\t\tif ($T) {\r\n\t\t\t$T\r\n\t\t\t\t.removeClass( tClass+_open +\" \"+ tClass+_pane+_open )\r\n\t\t\t\t.addClass( tClass+_closed +\" \"+ tClass+_pane+_closed )\r\n\t\t\t\t.attr(\"title\", o.tips.Open) // may be blank\r\n\t\t\t;\r\n\t\t\t// toggler-content - if exists\r\n\t\t\t$T.children(\".content-open\").hide();\r\n\t\t\t$T.children(\".content-closed\").css(\"display\",\"block\");\r\n\t\t}\r\n\r\n\t\t// sync any 'pin buttons'\r\n\t\tsyncPinBtns(pane, false);\r\n\r\n\t\tif (state.initialized) {\r\n\t\t\t// resize 'length' and position togglers for adjacent panes\r\n\t\t\tsizeHandles();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Open the specified pane (animation optional), and resize all other panes as needed\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\tThe pane being opened, ie: north, south, east, or west\r\n\t * @param {boolean=}\t\t\t[slide=false]\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\r\n\t * @param {boolean=}\t\t\t[noAlert=false]\r\n\t */\r\n,\topen = function (evt_or_pane, slide, noAnimation, noAlert) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t,\t$T\t= $Ts[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\tc\t= _c[pane]\r\n\t\t,\tdoFX, isShowing\r\n\t\t;\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\t// QUEUE in case another action/animation is in progress\r\n\t\t$N.queue(function( queueNext ){\r\n\r\n\t\t\tif ( !$P\r\n\t\t\t||\t(!o.resizable && !o.closable && !s.isShowing)\t// invalid request\r\n\t\t\t||\t(s.isVisible && !s.isSliding)\t\t\t\t\t// already open\r\n\t\t\t) return queueNext();\r\n\r\n\t\t\t// pane can ALSO be unhidden by just calling show(), so handle this scenario\r\n\t\t\tif (s.isHidden && !s.isShowing) {\r\n\t\t\t\tqueueNext(); // call before show() because it needs the queue free\r\n\t\t\t\tshow(pane, true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (s.autoResize && s.size != o.size) // resize pane to original size set in options\r\n\t\t\t\tsizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize\r\n\t\t\telse\r\n\t\t\t\t// make sure there is enough space available to open the pane\r\n\t\t\t\tsetSizeLimits(pane, slide);\r\n\r\n\t\t\t// onopen_start callback - will CANCEL open if returns false\r\n\t\t\tvar cbReturn = _runCallbacks(\"onopen_start\", pane);\r\n\r\n\t\t\tif (cbReturn === \"abort\")\r\n\t\t\t\treturn queueNext();\r\n\r\n\t\t\t// update pane-state again in case options were changed in onopen_start\r\n\t\t\tif (cbReturn !== \"NC\") // NC = \"No Callback\"\r\n\t\t\t\tsetSizeLimits(pane, slide);\r\n\r\n\t\t\tif (s.minSize > s.maxSize) { // INSUFFICIENT ROOM FOR PANE TO OPEN!\r\n\t\t\t\tsyncPinBtns(pane, false); // make sure pin-buttons are reset\r\n\t\t\t\tif (!noAlert && o.tips.noRoomToOpen)\r\n\t\t\t\t\talert(o.tips.noRoomToOpen);\r\n\t\t\t\treturn queueNext(); // ABORT\r\n\t\t\t}\r\n\r\n\t\t\tif (slide) // START Sliding - will set isSliding=true\r\n\t\t\t\tbindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane\r\n\t\t\telse if (s.isSliding) // PIN PANE (stop sliding) - open pane 'normally' instead\r\n\t\t\t\tbindStopSlidingEvents(pane, false); // UNBIND trigger events - will set isSliding=false\r\n\t\t\telse if (o.slidable)\r\n\t\t\t\tbindStartSlidingEvents(pane, false); // UNBIND trigger events\r\n\r\n\t\t\ts.noRoom = false; // will be reset by makePaneFit if 'noRoom'\r\n\t\t\tmakePaneFit(pane);\r\n\r\n\t\t\t// transfer logic var to temp var\r\n\t\t\tisShowing = s.isShowing;\r\n\t\t\t// now clear the logic var\r\n\t\t\tdelete s.isShowing;\r\n\r\n\t\t\tdoFX\t\t= !noAnimation && s.isClosed && (o.fxName_open != \"none\");\r\n\t\t\ts.isMoving\t= true;\r\n\t\t\ts.isVisible\t= true;\r\n\t\t\ts.isClosed\t= false;\r\n\t\t\t// update isHidden BEFORE sizing panes - WHY??? Old?\r\n\t\t\tif (isShowing) s.isHidden = false;\r\n\r\n\t\t\tif (doFX) { // ANIMATE\r\n\t\t\t\t// mask adjacent panes with objects\r\n\t\t\t\tlockPaneForFX(pane, true);\t// need to set left/top so animation will work\r\n\t\t\t\t\t$P.show( o.fxName_open, o.fxSettings_open, o.fxSpeed_open, function() {\r\n\t\t\t\t\tlockPaneForFX(pane, false); // undo\r\n\t\t\t\t\tif (s.isVisible) open_2(); // continue\r\n\t\t\t\t\tqueueNext();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse { // no animation\r\n\t\t\t\t_showPane(pane);// just show pane and...\r\n\t\t\t\topen_2();\t\t// continue\r\n\t\t\t\tqueueNext();\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// SUBROUTINE\r\n\t\tfunction open_2 () {\r\n\t\t\ts.isMoving\t= false;\r\n\r\n\t\t\t// cure iframe display issues\r\n\t\t\t_fixIframe(pane);\r\n\r\n\t\t\t// NOTE: if isSliding, then other panes are NOT 'resized'\r\n\t\t\tif (!s.isSliding) { // resize all panes adjacent to this one\r\n\t\t\t\tsizeMidPanes(_c[pane].dir==\"vert\" ? \"center\" : \"\", false); // false = NOT skipCallback\r\n\t\t\t}\r\n\r\n\t\t\t// set classes, position handles and execute callbacks...\r\n\t\t\tsetAsOpen(pane);\r\n\t\t};\r\n\t\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string}\tpane\t\tThe pane just opened, ie: north, south, east, or west\r\n\t * @param {boolean=}\t[skipCallback=false]\r\n\t */\r\n,\tsetAsOpen = function (pane, skipCallback) {\r\n\t\tvar \r\n\t\t\t$P\t\t= $Ps[pane]\r\n\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t,\t$T\t\t= $Ts[pane]\r\n\t\t,\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tside\t= _c[pane].side\r\n\t\t,\trClass\t= o.resizerClass\r\n\t\t,\ttClass\t= o.togglerClass\r\n\t\t,\t_pane\t= \"-\"+ pane // used for classNames\r\n\t\t,\t_open\t= \"-open\"\r\n\t\t,\t_closed\t= \"-closed\"\r\n\t\t,\t_sliding= \"-sliding\"\r\n\t\t;\r\n\t\t$R\r\n\t\t\t.css(side, sC.inset[side] + getPaneSize(pane)) // move the resizer\r\n\t\t\t.removeClass( rClass+_closed +\" \"+ rClass+_pane+_closed )\r\n\t\t\t.addClass( rClass+_open +\" \"+ rClass+_pane+_open )\r\n\t\t;\r\n\t\tif (s.isSliding)\r\n\t\t\t$R.addClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\r\n\t\telse // in case 'was sliding'\r\n\t\t\t$R.removeClass( rClass+_sliding +\" \"+ rClass+_pane+_sliding )\r\n\r\n\t\tremoveHover( 0, $R ); // remove hover classes\r\n\t\tif (o.resizable && $.layout.plugins.draggable)\r\n\t\t\t$R\t.draggable(\"enable\")\r\n\t\t\t\t.css(\"cursor\", o.resizerCursor)\r\n\t\t\t\t.attr(\"title\", o.tips.Resize);\r\n\t\telse if (!s.isSliding)\r\n\t\t\t$R.css(\"cursor\", \"default\"); // n-resize, s-resize, etc\r\n\r\n\t\t// if pane also has a toggler button, adjust that too\r\n\t\tif ($T) {\r\n\t\t\t$T\t.removeClass( tClass+_closed +\" \"+ tClass+_pane+_closed )\r\n\t\t\t\t.addClass( tClass+_open +\" \"+ tClass+_pane+_open )\r\n\t\t\t\t.attr(\"title\", o.tips.Close); // may be blank\r\n\t\t\tremoveHover( 0, $T ); // remove hover classes\r\n\t\t\t// toggler-content - if exists\r\n\t\t\t$T.children(\".content-closed\").hide();\r\n\t\t\t$T.children(\".content-open\").css(\"display\",\"block\");\r\n\t\t}\r\n\r\n\t\t// sync any 'pin buttons'\r\n\t\tsyncPinBtns(pane, !s.isSliding);\r\n\r\n\t\t// update pane-state dimensions - BEFORE resizing content\r\n\t\t$.extend(s, elDims($P));\r\n\r\n\t\tif (state.initialized) {\r\n\t\t\t// resize resizer & toggler sizes for all panes\r\n\t\t\tsizeHandles();\r\n\t\t\t// resize content every time pane opens - to be sure\r\n\t\t\tsizeContent(pane, true); // true = remeasure headers/footers, even if 'pane.isMoving'\r\n\t\t}\r\n\r\n\t\tif (!skipCallback && (state.initialized || o.triggerEventsOnLoad) && $P.is(\":visible\")) {\r\n\t\t\t// onopen callback\r\n\t\t\t_runCallbacks(\"onopen_end\", pane);\r\n\t\t\t// onshow callback - TODO: should this be here?\r\n\t\t\tif (s.isShowing) _runCallbacks(\"onshow_end\", pane);\r\n\r\n\t\t\t// ALSO call onresize because layout-size *may* have changed while pane was closed\r\n\t\t\tif (state.initialized)\r\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\r\n\t\t}\r\n\r\n\t\t// TODO: Somehow sizePane(\"north\") is being called after this point???\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * slideOpen / slideClose / slideToggle\r\n\t *\r\n\t * Pass-though methods for sliding\r\n\t */\r\n,\tslideOpen = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\r\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tdelay\t= options[pane].slideDelay_open\r\n\t\t;\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\t// prevent event from triggering on NEW resizer binding created below\r\n\t\tif (evt) evt.stopImmediatePropagation();\r\n\r\n\t\tif (s.isClosed && evt && evt.type === \"mouseenter\" && delay > 0)\r\n\t\t\t// trigger = mouseenter - use a delay\r\n\t\t\ttimer.set(pane+\"_openSlider\", open_NOW, delay);\r\n\t\telse\r\n\t\t\topen_NOW(); // will unbind events if is already open\r\n\r\n\t\t/**\r\n\t\t * SUBROUTINE for timed open\r\n\t\t */\r\n\t\tfunction open_NOW () {\r\n\t\t\tif (!s.isClosed) // skip if no longer closed!\r\n\t\t\t\tbindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane\r\n\t\t\telse if (!s.isMoving)\r\n\t\t\t\topen(pane, true); // true = slide - open() will handle binding\r\n\t\t};\r\n\t}\r\n\r\n,\tslideClose = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tevt\t\t= evtObj(evt_or_pane)\r\n\t\t,\tpane\t= evtPane.call(this, evt_or_pane)\r\n\t\t,\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tdelay\t= s.isMoving ? 1000 : 300 // MINIMUM delay - option may override\r\n\t\t;\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\tif (s.isClosed || s.isResizing)\r\n\t\t\treturn; // skip if already closed OR in process of resizing\r\n\t\telse if (o.slideTrigger_close === \"click\")\r\n\t\t\tclose_NOW(); // close immediately onClick\r\n\t\telse if (o.preventQuickSlideClose && s.isMoving)\r\n\t\t\treturn; // handle Chrome quick-close on slide-open\r\n\t\telse if (o.preventPrematureSlideClose && evt && $.layout.isMouseOverElem(evt, $Ps[pane]))\r\n\t\t\treturn; // handle incorrect mouseleave trigger, like when over a SELECT-list in IE\r\n\t\telse if (evt) // trigger = mouseleave - use a delay\r\n\t\t\t// 1 sec delay if 'opening', else .3 sec\r\n\t\t\ttimer.set(pane+\"_closeSlider\", close_NOW, max(o.slideDelay_close, delay));\r\n\t\telse // called programically\r\n\t\t\tclose_NOW();\r\n\r\n\t\t/**\r\n\t\t * SUBROUTINE for timed close\r\n\t\t */\r\n\t\tfunction close_NOW () {\r\n\t\t\tif (s.isClosed) // skip 'close' if already closed!\r\n\t\t\t\tbindStopSlidingEvents(pane, false); // UNBIND trigger events - TODO: is this needed here?\r\n\t\t\telse if (!s.isMoving)\r\n\t\t\t\tclose(pane); // close will handle unbinding\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\t\tThe pane being opened, ie: north, south, east, or west\r\n\t */\r\n,\tslideToggle = function (evt_or_pane) {\r\n\t\tvar pane = evtPane.call(this, evt_or_pane);\r\n\t\ttoggle(pane, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Must set left/top on East/South panes so animation will work properly\r\n\t *\r\n\t * @param {string}\tpane\tThe pane to lock, 'east' or 'south' - any other is ignored!\r\n\t * @param {boolean}\tdoLock  true = set left/top, false = remove\r\n\t */\r\n,\tlockPaneForFX = function (pane, doLock) {\r\n\t\tvar $P\t= $Ps[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t,\tz\t= options.zIndexes\r\n\t\t;\r\n\t\tif (doLock) {\r\n\t\t\tshowMasks( pane, { animation: true, objectsOnly: true });\r\n\t\t\t$P.css({ zIndex: z.pane_animate }); // overlay all elements during animation\r\n\t\t\tif (pane==\"south\")\r\n\t\t\t\t$P.css({ top: sC.inset.top + sC.innerHeight - $P.outerHeight() });\r\n\t\t\telse if (pane==\"east\")\r\n\t\t\t\t$P.css({ left: sC.inset.left + sC.innerWidth - $P.outerWidth() });\r\n\t\t}\r\n\t\telse { // animation DONE - RESET CSS\r\n\t\t\thideMasks();\r\n\t\t\t$P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });\r\n\t\t\tif (pane==\"south\")\r\n\t\t\t\t$P.css({ top: \"auto\" });\r\n\t\t\t// if pane is positioned 'off-screen', then DO NOT screw with it!\r\n\t\t\telse if (pane==\"east\" && !$P.css(\"left\").match(/\\-99999/))\r\n\t\t\t\t$P.css({ left: \"auto\" });\r\n\t\t\t// fix anti-aliasing in IE - only needed for animations that change opacity\r\n\t\t\tif (browser.msie && o.fxOpacityFix && o.fxName_open != \"slide\" && $P.css(\"filter\") && $P.css(\"opacity\") == 1)\r\n\t\t\t\t$P[0].style.removeAttribute('filter');\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Toggle sliding functionality of a specific pane on/off by adding removing 'slide open' trigger\r\n\t *\r\n\t * @see  open(), close()\r\n\t * @param {string}\tpane\tThe pane to enable/disable, 'north', 'south', etc.\r\n\t * @param {boolean}\tenable\tEnable or Disable sliding?\r\n\t */\r\n,\tbindStartSlidingEvents = function (pane, enable) {\r\n\t\tvar o\t\t= options[pane]\r\n\t\t,\t$P\t\t= $Ps[pane]\r\n\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t,\tevtName\t= o.slideTrigger_open.toLowerCase()\r\n\t\t;\r\n\t\tif (!$R || (enable && !o.slidable)) return;\r\n\r\n\t\t// make sure we have a valid event\r\n\t\tif (evtName.match(/mouseover/))\r\n\t\t\tevtName = o.slideTrigger_open = \"mouseenter\";\r\n\t\telse if (!evtName.match(/(click|dblclick|mouseenter)/)) \r\n\t\t\tevtName = o.slideTrigger_open = \"click\";\r\n\r\n\t\t// must remove double-click-toggle when using dblclick-slide\r\n\t\tif (o.resizerDblClickToggle && evtName.match(/click/)) {\r\n\t\t\t$R[enable ? \"unbind\" : \"bind\"]('dblclick.'+ sID, toggle)\r\n\t\t}\r\n\r\n\t\t$R\r\n\t\t\t// add or remove event\r\n\t\t\t[enable ? \"bind\" : \"unbind\"](evtName +'.'+ sID, slideOpen)\r\n\t\t\t// set the appropriate cursor & title/tip\r\n\t\t\t.css(\"cursor\", enable ? o.sliderCursor : \"default\")\r\n\t\t\t.attr(\"title\", enable ? o.tips.Slide : \"\")\r\n\t\t;\r\n\t}\r\n\r\n\t/**\r\n\t * Add or remove 'mouseleave' events to 'slide close' when pane is 'sliding' open or closed\r\n\t * Also increases zIndex when pane is sliding open\r\n\t * See bindStartSlidingEvents for code to control 'slide open'\r\n\t *\r\n\t * @see  slideOpen(), slideClose()\r\n\t * @param {string}\tpane\tThe pane to process, 'north', 'south', etc.\r\n\t * @param {boolean}\tenable\tEnable or Disable events?\r\n\t */\r\n,\tbindStopSlidingEvents = function (pane, enable) {\r\n\t\tvar\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tc\t\t= _c[pane]\r\n\t\t,\tz\t\t= options.zIndexes\r\n\t\t,\tevtName\t= o.slideTrigger_close.toLowerCase()\r\n\t\t,\taction\t= (enable ? \"bind\" : \"unbind\")\r\n\t\t,\t$P\t\t= $Ps[pane]\r\n\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t;\r\n\t\ttimer.clear(pane+\"_closeSlider\"); // just in case\r\n\r\n\t\tif (enable) {\r\n\t\t\ts.isSliding = true;\r\n\t\t\tstate.panesSliding[pane] = true;\r\n\t\t\t// remove 'slideOpen' event from resizer\r\n\t\t\t// ALSO will raise the zIndex of the pane & resizer\r\n\t\t\tbindStartSlidingEvents(pane, false);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ts.isSliding = false;\r\n\t\t\tdelete state.panesSliding[pane];\r\n\t\t}\r\n\r\n\t\t// RE/SET zIndex - increases when pane is sliding-open, resets to normal when not\r\n\t\t$P.css(\"zIndex\", enable ? z.pane_sliding : z.pane_normal);\r\n\t\t$R.css(\"zIndex\", enable ? z.pane_sliding+2 : z.resizer_normal); // NOTE: mask = pane_sliding+1\r\n\r\n\t\t// make sure we have a valid event\r\n\t\tif (!evtName.match(/(click|mouseleave)/))\r\n\t\t\tevtName = o.slideTrigger_close = \"mouseleave\"; // also catches 'mouseout'\r\n\r\n\t\t// add/remove slide triggers\r\n\t\t$R[action](evtName, slideClose); // base event on resize\r\n\t\t// need extra events for mouseleave\r\n\t\tif (evtName === \"mouseleave\") {\r\n\t\t\t// also close on pane.mouseleave\r\n\t\t\t$P[action](\"mouseleave.\"+ sID, slideClose);\r\n\t\t\t// cancel timer when mouse moves between 'pane' and 'resizer'\r\n\t\t\t$R[action](\"mouseenter.\"+ sID, cancelMouseOut);\r\n\t\t\t$P[action](\"mouseenter.\"+ sID, cancelMouseOut);\r\n\t\t}\r\n\r\n\t\tif (!enable)\r\n\t\t\ttimer.clear(pane+\"_closeSlider\");\r\n\t\telse if (evtName === \"click\" && !o.resizable) {\r\n\t\t\t// IF pane is not resizable (which already has a cursor and tip) \r\n\t\t\t// then set the a cursor & title/tip on resizer when sliding\r\n\t\t\t$R.css(\"cursor\", enable ? o.sliderCursor : \"default\");\r\n\t\t\t$R.attr(\"title\", enable ? o.tips.Close : \"\"); // use Toggler-tip, eg: \"Close Pane\"\r\n\t\t}\r\n\r\n\t\t// SUBROUTINE for mouseleave timer clearing\r\n\t\tfunction cancelMouseOut (evt) {\r\n\t\t\ttimer.clear(pane+\"_closeSlider\");\r\n\t\t\tevt.stopPropagation();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides/closes a pane if there is insufficient room - reverses this when there is room again\r\n\t * MUST have already called setSizeLimits() before calling this method\r\n\t *\r\n\t * @param {string}\tpane\t\t\t\t\tThe pane being resized\r\n\t * @param {boolean=}\t[isOpening=false]\t\tCalled from onOpen?\r\n\t * @param {boolean=}\t[skipCallback=false]\tShould the onresize callback be run?\r\n\t * @param {boolean=}\t[force=false]\r\n\t */\r\n,\tmakePaneFit = function (pane, isOpening, skipCallback, force) {\r\n\t\tvar\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t,\tc\t= _c[pane]\r\n\t\t,\t$P\t= $Ps[pane]\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t,\tisSidePane \t= c.dir===\"vert\"\r\n\t\t,\thasRoom\t\t= false\r\n\t\t;\r\n\t\t// special handling for center & east/west panes\r\n\t\tif (pane === \"center\" || (isSidePane && s.noVerticalRoom)) {\r\n\t\t\t// see if there is enough room to display the pane\r\n\t\t\t// ERROR: hasRoom = s.minHeight <= s.maxHeight && (isSidePane || s.minWidth <= s.maxWidth);\r\n\t\t\thasRoom = (s.maxHeight >= 0);\r\n\t\t\tif (hasRoom && s.noRoom) { // previously hidden due to noRoom, so show now\r\n\t\t\t\t_showPane(pane);\r\n\t\t\t\tif ($R) $R.show();\r\n\t\t\t\ts.isVisible = true;\r\n\t\t\t\ts.noRoom = false;\r\n\t\t\t\tif (isSidePane) s.noVerticalRoom = false;\r\n\t\t\t\t_fixIframe(pane);\r\n\t\t\t}\r\n\t\t\telse if (!hasRoom && !s.noRoom) { // not currently hidden, so hide now\r\n\t\t\t\t_hidePane(pane);\r\n\t\t\t\tif ($R) $R.hide();\r\n\t\t\t\ts.isVisible = false;\r\n\t\t\t\ts.noRoom = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// see if there is enough room to fit the border-pane\r\n\t\tif (pane === \"center\") {\r\n\t\t\t// ignore center in this block\r\n\t\t}\r\n\t\telse if (s.minSize <= s.maxSize) { // pane CAN fit\r\n\t\t\thasRoom = true;\r\n\t\t\tif (s.size > s.maxSize) // pane is too big - shrink it\r\n\t\t\t\tsizePane(pane, s.maxSize, skipCallback, true, force); // true = noAnimation\r\n\t\t\telse if (s.size < s.minSize) // pane is too small - enlarge it\r\n\t\t\t\tsizePane(pane, s.minSize, skipCallback, true, force); // true = noAnimation\r\n\t\t\t// need s.isVisible because new pseudoClose method keeps pane visible, but off-screen\r\n\t\t\telse if ($R && s.isVisible && $P.is(\":visible\")) {\r\n\t\t\t\t// make sure resizer-bar is positioned correctly\r\n\t\t\t\t// handles situation where nested layout was 'hidden' when initialized\r\n\t\t\t\tvar\tpos = s.size + sC.inset[c.side];\r\n\t\t\t\tif ($.layout.cssNum( $R, c.side ) != pos) $R.css( c.side, pos );\r\n\t\t\t}\r\n\r\n\t\t\t// if was previously hidden due to noRoom, then RESET because NOW there is room\r\n\t\t\tif (s.noRoom) {\r\n\t\t\t\t// s.noRoom state will be set by open or show\r\n\t\t\t\tif (s.wasOpen && o.closable) {\r\n\t\t\t\t\tif (o.autoReopen)\r\n\t\t\t\t\t\topen(pane, false, true, true); // true = noAnimation, true = noAlert\r\n\t\t\t\t\telse // leave the pane closed, so just update state\r\n\t\t\t\t\t\ts.noRoom = false;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tshow(pane, s.wasOpen, true, true); // true = noAnimation, true = noAlert\r\n\t\t\t}\r\n\t\t}\r\n\t\telse { // !hasRoom - pane CANNOT fit\r\n\t\t\tif (!s.noRoom) { // pane not set as noRoom yet, so hide or close it now...\r\n\t\t\t\ts.noRoom = true; // update state\r\n\t\t\t\ts.wasOpen = !s.isClosed && !s.isSliding;\r\n\t\t\t\tif (s.isClosed){} // SKIP\r\n\t\t\t\telse if (o.closable) // 'close' if possible\r\n\t\t\t\t\tclose(pane, true, true); // true = force, true = noAnimation\r\n\t\t\t\telse // 'hide' pane if cannot just be closed\r\n\t\t\t\t\thide(pane, true); // true = noAnimation\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * manualSizePane is an exposed flow-through method allowing extra code when pane is 'manually resized'\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\t\tThe pane being resized\r\n\t * @param {number}\t\t\tsize\t\t\t\t\tThe *desired* new size for this pane - will be validated\r\n\t * @param {boolean=}\t\t\t[skipCallback=false]\tShould the onresize callback be run?\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\r\n\t * @param {boolean=}\t\t\t[force=false]\t\t\tForce resizing even if does not seem necessary\r\n\t */\r\n,\tmanualSizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\to\t= options[pane]\r\n\t\t,\ts\t= state[pane]\r\n\t\t//\tif resizing callbacks have been delayed and resizing is now DONE, force resizing to complete...\r\n\t\t,\tforceResize = force || (o.livePaneResizing && !s.isResizing)\r\n\t\t;\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\t// ANY call to manualSizePane disables autoResize - ie, percentage sizing\r\n\t\ts.autoResize = false;\r\n\t\t// flow-through...\r\n\t\tsizePane(pane, size, skipCallback, noAnimation, forceResize); // will animate resize if option enabled\r\n\t}\r\n\r\n\t/**\r\n\t * sizePane is called only by internal methods whenever a pane needs to be resized\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\t\t\tThe pane being resized\r\n\t * @param {number}\t\t\tsize\t\t\t\t\tThe *desired* new size for this pane - will be validated\r\n\t * @param {boolean=}\t\t\t[skipCallback=false]\tShould the onresize callback be run?\r\n\t * @param {boolean=}\t\t\t[noAnimation=false]\r\n\t * @param {boolean=}\t\t\t[force=false]\t\t\tForce resizing even if does not seem necessary\r\n\t */\r\n,\tsizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane\t= evtPane.call(this, evt_or_pane) // probably NEVER called from event?\r\n\t\t,\to\t\t= options[pane]\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\t$P\t\t= $Ps[pane]\r\n\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t,\tside\t= _c[pane].side\r\n\t\t,\tdimName\t= _c[pane].sizeType.toLowerCase()\r\n\t\t,\tskipResizeWhileDragging = s.isResizing && !o.triggerEventsDuringLiveResize\r\n\t\t,\tdoFX\t= noAnimation !== true && o.animatePaneSizing\r\n\t\t,\toldSize, newSize\r\n\t\t;\r\n\t\tif (pane === \"center\") return; // validate\r\n\t\t// QUEUE in case another action/animation is in progress\r\n\t\t$N.queue(function( queueNext ){\r\n\t\t\t// calculate 'current' min/max sizes\r\n\t\t\tsetSizeLimits(pane); // update pane-state\r\n\t\t\toldSize = s.size;\r\n\t\t\tsize = _parseSize(pane, size); // handle percentages & auto\r\n\t\t\tsize = max(size, _parseSize(pane, o.minSize));\r\n\t\t\tsize = min(size, s.maxSize);\r\n\t\t\tif (size < s.minSize) { // not enough room for pane!\r\n\t\t\t\tqueueNext(); // call before makePaneFit() because it needs the queue free\r\n\t\t\t\tmakePaneFit(pane, false, skipCallback);\t// will hide or close pane\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// IF newSize is same as oldSize, then nothing to do - abort\r\n\t\t\tif (!force && size === oldSize)\r\n\t\t\t\treturn queueNext();\r\n\r\n\t\t\ts.newSize = size;\r\n\r\n\t\t\t// onresize_start callback CANNOT cancel resizing because this would break the layout!\r\n\t\t\tif (!skipCallback && state.initialized && s.isVisible)\r\n\t\t\t\t_runCallbacks(\"onresize_start\", pane);\r\n\r\n\t\t\t// resize the pane, and make sure its visible\r\n\t\t\tnewSize = cssSize(pane, size);\r\n\r\n\t\t\tif (doFX && $P.is(\":visible\")) { // ANIMATE\r\n\t\t\t\tvar fx\t\t= $.layout.effects.size[pane] || $.layout.effects.size.all\r\n\t\t\t\t,\teasing\t= o.fxSettings_size.easing || fx.easing\r\n\t\t\t\t,\tz\t\t= options.zIndexes\r\n\t\t\t\t,\tprops\t= {};\r\n\t\t\t\tprops[ dimName ] = newSize +'px';\r\n\t\t\t\ts.isMoving = true;\r\n\t\t\t\t// overlay all elements during animation\r\n\t\t\t\t$P.css({ zIndex: z.pane_animate })\r\n\t\t\t\t  .show().animate( props, o.fxSpeed_size, easing, function(){\r\n\t\t\t\t\t// reset zIndex after animation\r\n\t\t\t\t\t$P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });\r\n\t\t\t\t\ts.isMoving = false;\r\n\t\t\t\t\tdelete s.newSize;\r\n\t\t\t\t\tsizePane_2(); // continue\r\n\t\t\t\t\tqueueNext();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse { // no animation\r\n\t\t\t\t$P.css( dimName, newSize );\t// resize pane\r\n\t\t\t\tdelete s.newSize;\r\n\t\t\t\t// if pane is visible, then \r\n\t\t\t\tif ($P.is(\":visible\"))\r\n\t\t\t\t\tsizePane_2(); // continue\r\n\t\t\t\telse {\r\n\t\t\t\t\t// pane is NOT VISIBLE, so just update state data...\r\n\t\t\t\t\t// when pane is *next opened*, it will have the new size\r\n\t\t\t\t\ts.size = size;\t\t\t\t// update state.size\r\n\t\t\t\t\t//$.extend(s, elDims($P));\t// update state dimensions - CANNOT do this when not visible!\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tqueueNext();\r\n\t\t\t};\r\n\r\n\t\t});\r\n\r\n\t\t// SUBROUTINE\r\n\t\tfunction sizePane_2 () {\r\n\t\t\t/*\tPanes are sometimes not sized precisely in some browsers!?\r\n\t\t\t *\tThis code will resize the pane up to 3 times to nudge the pane to the correct size\r\n\t\t\t */\r\n\t\t\tvar\tactual\t= dimName==='width' ? $P.outerWidth() : $P.outerHeight()\r\n\t\t\t,\ttries\t= [{\r\n\t\t\t\t\t\t   \tpane:\t\tpane\r\n\t\t\t\t\t\t,\tcount:\t\t1\r\n\t\t\t\t\t\t,\ttarget:\t\tsize\r\n\t\t\t\t\t\t,\tactual:\t\tactual\r\n\t\t\t\t\t\t,\tcorrect:\t(size === actual)\r\n\t\t\t\t\t\t,\tattempt:\tsize\r\n\t\t\t\t\t\t,\tcssSize:\tnewSize\r\n\t\t\t\t\t\t}]\r\n\t\t\t,\tlastTry = tries[0]\r\n\t\t\t,\tthisTry\t= {}\r\n\t\t\t,\tmsg\t\t= 'Inaccurate size after resizing the '+ pane +'-pane.'\r\n\t\t\t;\r\n\t\t\twhile ( !lastTry.correct ) {\r\n\t\t\t\tthisTry = { pane: pane, count: lastTry.count+1, target: size };\r\n\r\n\t\t\t\tif (lastTry.actual > size)\r\n\t\t\t\t\tthisTry.attempt = max(0, lastTry.attempt - (lastTry.actual - size));\r\n\t\t\t\telse // lastTry.actual < size\r\n\t\t\t\t\tthisTry.attempt = max(0, lastTry.attempt + (size - lastTry.actual));\r\n\r\n\t\t\t\tthisTry.cssSize = cssSize(pane, thisTry.attempt);\r\n\t\t\t\t$P.css( dimName, thisTry.cssSize );\r\n\r\n\t\t\t\tthisTry.actual\t= dimName=='width' ? $P.outerWidth() : $P.outerHeight();\r\n\t\t\t\tthisTry.correct\t= (size === thisTry.actual);\r\n\r\n\t\t\t\t// log attempts and alert the user of this *non-fatal error* (if showDebugMessages)\r\n\t\t\t\tif ( tries.length === 1) {\r\n\t\t\t\t\t_log(msg, false, true);\r\n\t\t\t\t\t_log(lastTry, false, true);\r\n\t\t\t\t}\r\n\t\t\t\t_log(thisTry, false, true);\r\n\t\t\t\t// after 4 tries, is as close as its gonna get!\r\n\t\t\t\tif (tries.length > 3) break;\r\n\r\n\t\t\t\ttries.push( thisTry );\r\n\t\t\t\tlastTry = tries[ tries.length - 1 ];\r\n\t\t\t}\r\n\t\t\t// END TESTING CODE\r\n\r\n\t\t\t// update pane-state dimensions\r\n\t\t\ts.size\t= size;\r\n\t\t\t$.extend(s, elDims($P));\r\n\r\n\t\t\tif (s.isVisible && $P.is(\":visible\")) {\r\n\t\t\t\t// reposition the resizer-bar\r\n\t\t\t\tif ($R) $R.css( side, size + sC.inset[side] );\r\n\t\t\t\t// resize the content-div\r\n\t\t\t\tsizeContent(pane);\r\n\t\t\t}\r\n\r\n\t\t\tif (!skipCallback && !skipResizeWhileDragging && state.initialized && s.isVisible)\r\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\r\n\r\n\t\t\t// resize all the adjacent panes, and adjust their toggler buttons\r\n\t\t\t// when skipCallback passed, it means the controlling method will handle 'other panes'\r\n\t\t\tif (!skipCallback) {\r\n\t\t\t\t// also no callback if live-resize is in progress and NOT triggerEventsDuringLiveResize\r\n\t\t\t\tif (!s.isSliding) sizeMidPanes(_c[pane].dir==\"horz\" ? \"\" : \"center\", skipResizeWhileDragging, force);\r\n\t\t\t\tsizeHandles();\r\n\t\t\t}\r\n\r\n\t\t\t// if opposite-pane was autoClosed, see if it can be autoOpened now\r\n\t\t\tvar altPane = _c.oppositeEdge[pane];\r\n\t\t\tif (size < oldSize && state[ altPane ].noRoom) {\r\n\t\t\t\tsetSizeLimits( altPane );\r\n\t\t\t\tmakePaneFit( altPane, false, skipCallback );\r\n\t\t\t}\r\n\r\n\t\t\t// DEBUG - ALERT user/developer so they know there was a sizing problem\r\n\t\t\tif (tries.length > 1)\r\n\t\t\t\t_log(msg +'\\nSee the Error Console for details.', true, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see  initPanes(), sizePane(), \tresizeAll(), open(), close(), hide()\r\n\t * @param {(Array.<string>|string)}\tpanes\t\t\t\t\tThe pane(s) being resized, comma-delmited string\r\n\t * @param {boolean=}\t\t\t\t\t[skipCallback=false]\tShould the onresize callback be run?\r\n\t * @param {boolean=}\t\t\t\t\t[force=false]\r\n\t */\r\n,\tsizeMidPanes = function (panes, skipCallback, force) {\r\n\t\tpanes = (panes ? panes : \"east,west,center\").split(\",\");\r\n\r\n\t\t$.each(panes, function (i, pane) {\r\n\t\t\tif (!$Ps[pane]) return; // NO PANE - skip\r\n\t\t\tvar \r\n\t\t\t\to\t\t= options[pane]\r\n\t\t\t,\ts\t\t= state[pane]\r\n\t\t\t,\t$P\t\t= $Ps[pane]\r\n\t\t\t,\t$R\t\t= $Rs[pane]\r\n\t\t\t,\tisCenter= (pane==\"center\")\r\n\t\t\t,\thasRoom\t= true\r\n\t\t\t,\tCSS\t\t= {}\r\n\t\t\t//\tif pane is not visible, show it invisibly NOW rather than for *each call* in this script\r\n\t\t\t,\tvisCSS\t= $.layout.showInvisibly($P)\r\n\r\n\t\t\t,\tnewCenter\t= calcNewCenterPaneDims()\r\n\t\t\t;\r\n\r\n\t\t\t// update pane-state dimensions\r\n\t\t\t$.extend(s, elDims($P));\r\n\r\n\t\t\tif (pane === \"center\") {\r\n\t\t\t\tif (!force && s.isVisible && newCenter.width === s.outerWidth && newCenter.height === s.outerHeight) {\r\n\t\t\t\t\t$P.css(visCSS);\r\n\t\t\t\t\treturn true; // SKIP - pane already the correct size\r\n\t\t\t\t}\r\n\t\t\t\t// set state for makePaneFit() logic\r\n\t\t\t\t$.extend(s, cssMinDims(pane), {\r\n\t\t\t\t\tmaxWidth:\tnewCenter.width\r\n\t\t\t\t,\tmaxHeight:\tnewCenter.height\r\n\t\t\t\t});\r\n\t\t\t\tCSS = newCenter;\r\n\t\t\t\ts.newWidth\t= CSS.width;\r\n\t\t\t\ts.newHeight\t= CSS.height;\r\n\t\t\t\t// convert OUTER width/height to CSS width/height \r\n\t\t\t\tCSS.width\t= cssW($P, CSS.width);\r\n\t\t\t\t// NEW - allow pane to extend 'below' visible area rather than hide it\r\n\t\t\t\tCSS.height\t= cssH($P, CSS.height);\r\n\t\t\t\thasRoom\t\t= CSS.width >= 0 && CSS.height >= 0; // height >= 0 = ALWAYS TRUE NOW\r\n\r\n\t\t\t\t// during layout init, try to shrink east/west panes to make room for center\r\n\t\t\t\tif (!state.initialized && o.minWidth > newCenter.width) {\r\n\t\t\t\t\tvar\r\n\t\t\t\t\t\treqPx\t= o.minWidth - s.outerWidth\r\n\t\t\t\t\t,\tminE\t= options.east.minSize || 0\r\n\t\t\t\t\t,\tminW\t= options.west.minSize || 0\r\n\t\t\t\t\t,\tsizeE\t= state.east.size\r\n\t\t\t\t\t,\tsizeW\t= state.west.size\r\n\t\t\t\t\t,\tnewE\t= sizeE\r\n\t\t\t\t\t,\tnewW\t= sizeW\r\n\t\t\t\t\t;\r\n\t\t\t\t\tif (reqPx > 0 && state.east.isVisible && sizeE > minE) {\r\n\t\t\t\t\t\tnewE = max( sizeE-minE, sizeE-reqPx );\r\n\t\t\t\t\t\treqPx -= sizeE-newE;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (reqPx > 0 && state.west.isVisible && sizeW > minW) {\r\n\t\t\t\t\t\tnewW = max( sizeW-minW, sizeW-reqPx );\r\n\t\t\t\t\t\treqPx -= sizeW-newW;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// IF we found enough extra space, then resize the border panes as calculated\r\n\t\t\t\t\tif (reqPx === 0) {\r\n\t\t\t\t\t\tif (sizeE && sizeE != minE)\r\n\t\t\t\t\t\t\tsizePane('east', newE, true, true, force); // true = skipCallback/noAnimation - initPanes will handle when done\r\n\t\t\t\t\t\tif (sizeW && sizeW != minW)\r\n\t\t\t\t\t\t\tsizePane('west', newW, true, true, force); // true = skipCallback/noAnimation\r\n\t\t\t\t\t\t// now start over!\r\n\t\t\t\t\t\tsizeMidPanes('center', skipCallback, force);\r\n\t\t\t\t\t\t$P.css(visCSS);\r\n\t\t\t\t\t\treturn; // abort this loop\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse { // for east and west, set only the height, which is same as center height\r\n\t\t\t\t// set state.min/maxWidth/Height for makePaneFit() logic\r\n\t\t\t\tif (s.isVisible && !s.noVerticalRoom)\r\n\t\t\t\t\t$.extend(s, elDims($P), cssMinDims(pane))\r\n\t\t\t\tif (!force && !s.noVerticalRoom && newCenter.height === s.outerHeight) {\r\n\t\t\t\t\t$P.css(visCSS);\r\n\t\t\t\t\treturn true; // SKIP - pane already the correct size\r\n\t\t\t\t}\r\n\t\t\t\t// east/west have same top, bottom & height as center\r\n\t\t\t\tCSS.top\t\t= newCenter.top;\r\n\t\t\t\tCSS.bottom\t= newCenter.bottom;\r\n\t\t\t\ts.newSize\t= newCenter.height\r\n\t\t\t\t// NEW - allow pane to extend 'below' visible area rather than hide it\r\n\t\t\t\tCSS.height\t= cssH($P, newCenter.height);\r\n\t\t\t\ts.maxHeight\t= CSS.height;\r\n\t\t\t\thasRoom\t\t= (s.maxHeight >= 0); // ALWAYS TRUE NOW\r\n\t\t\t\tif (!hasRoom) s.noVerticalRoom = true; // makePaneFit() logic\r\n\t\t\t}\r\n\r\n\t\t\tif (hasRoom) {\r\n\t\t\t\t// resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized\r\n\t\t\t\tif (!skipCallback && state.initialized)\r\n\t\t\t\t\t_runCallbacks(\"onresize_start\", pane);\r\n\r\n\t\t\t\t$P.css(CSS); // apply the CSS to pane\r\n\t\t\t\tif (pane !== \"center\")\r\n\t\t\t\t\tsizeHandles(pane); // also update resizer length\r\n\t\t\t\tif (s.noRoom && !s.isClosed && !s.isHidden)\r\n\t\t\t\t\tmakePaneFit(pane); // will re-open/show auto-closed/hidden pane\r\n\t\t\t\tif (s.isVisible) {\r\n\t\t\t\t\t$.extend(s, elDims($P)); // update pane dimensions\r\n\t\t\t\t\tif (state.initialized) sizeContent(pane); // also resize the contents, if exists\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!s.noRoom && s.isVisible) // no room for pane\r\n\t\t\t\tmakePaneFit(pane); // will hide or close pane\r\n\r\n\t\t\t// reset visibility, if necessary\r\n\t\t\t$P.css(visCSS);\r\n\r\n\t\t\tdelete s.newSize;\r\n\t\t\tdelete s.newWidth;\r\n\t\t\tdelete s.newHeight;\r\n\r\n\t\t\tif (!s.isVisible)\r\n\t\t\t\treturn true; // DONE - next pane\r\n\r\n\t\t\t/*\r\n\t\t\t * Extra CSS for IE6 or IE7 in Quirks-mode - add 'width' to NORTH/SOUTH panes\r\n\t\t\t * Normally these panes have only 'left' & 'right' positions so pane auto-sizes\r\n\t\t\t * ALSO required when pane is an IFRAME because will NOT default to 'full width'\r\n\t\t\t *\tTODO: Can I use width:100% for a north/south iframe?\r\n\t\t\t *\tTODO: Sounds like a job for $P.outerWidth( sC.innerWidth ) SETTER METHOD\r\n\t\t\t */\r\n\t\t\tif (pane === \"center\") { // finished processing midPanes\r\n\t\t\t\tvar fix = browser.isIE6 || !browser.boxModel;\r\n\t\t\t\tif ($Ps.north && (fix || state.north.tagName==\"IFRAME\")) \r\n\t\t\t\t\t$Ps.north.css(\"width\", cssW($Ps.north, sC.innerWidth));\r\n\t\t\t\tif ($Ps.south && (fix || state.south.tagName==\"IFRAME\"))\r\n\t\t\t\t\t$Ps.south.css(\"width\", cssW($Ps.south, sC.innerWidth));\r\n\t\t\t}\r\n\r\n\t\t\t// resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized\r\n\t\t\tif (!skipCallback && state.initialized)\r\n\t\t\t\t_runCallbacks(\"onresize_end\", pane);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see  window.onresize(), callbacks or custom code\r\n\t * @param {(Object|boolean)=}\tevt_or_refresh\tIf 'true', then also reset pane-positioning\r\n\t */\r\n,\tresizeAll = function (evt_or_refresh) {\r\n\t\tvar\toldW\t= sC.innerWidth\r\n\t\t,\toldH\t= sC.innerHeight\r\n\t\t;\r\n\t\t// stopPropagation if called by trigger(\"layoutdestroy\") - use evtPane utility \r\n\t\tevtPane(evt_or_refresh);\r\n\r\n\t\t// cannot size layout when 'container' is hidden or collapsed\r\n\t\tif (!$N.is(\":visible\")) return;\r\n\r\n\t\tif (!state.initialized) {\r\n\t\t\t_initLayoutElements();\r\n\t\t\treturn; // no need to resize since we just initialized!\r\n\t\t}\r\n\r\n\t\tif (evt_or_refresh === true && $.isPlainObject(options.outset)) {\r\n\t\t\t// update container CSS in case outset option has changed\r\n\t\t\t$N.css( options.outset );\r\n\t\t}\r\n\t\t// UPDATE container dimensions\r\n\t\t$.extend(sC, elDims( $N, options.inset ));\r\n\t\tif (!sC.outerHeight) return;\r\n\r\n\t\t// if 'true' passed, refresh pane & handle positioning too\r\n\t\tif (evt_or_refresh === true) {\r\n\t\t\tsetPanePosition();\r\n\t\t}\r\n\r\n\t\t// onresizeall_start will CANCEL resizing if returns false\r\n\t\t// state.container has already been set, so user can access this info for calcuations\r\n\t\tif (false === _runCallbacks(\"onresizeall_start\")) return false;\r\n\r\n\t\tvar\t// see if container is now 'smaller' than before\r\n\t\t\tshrunkH\t= (sC.innerHeight < oldH)\r\n\t\t,\tshrunkW\t= (sC.innerWidth < oldW)\r\n\t\t,\t$P, o, s\r\n\t\t;\r\n\t\t// NOTE special order for sizing: S-N-E-W\r\n\t\t$.each([\"south\",\"north\",\"east\",\"west\"], function (i, pane) {\r\n\t\t\tif (!$Ps[pane]) return; // no pane - SKIP\r\n\t\t\to = options[pane];\r\n\t\t\ts = state[pane];\r\n\t\t\tif (s.autoResize && s.size != o.size) // resize pane to original size set in options\r\n\t\t\t\tsizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize\r\n\t\t\telse {\r\n\t\t\t\tsetSizeLimits(pane);\r\n\t\t\t\tmakePaneFit(pane, false, true, true); // true=skipCallback/forceResize\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsizeMidPanes(\"\", true, true); // true=skipCallback/forceResize\r\n\t\tsizeHandles(); // reposition the toggler elements\r\n\r\n\t\t// trigger all individual pane callbacks AFTER layout has finished resizing\r\n\t\t$.each(_c.allPanes, function (i, pane) {\r\n\t\t\t$P = $Ps[pane];\r\n\t\t\tif (!$P) return; // SKIP\r\n\t\t\tif (state[pane].isVisible) // undefined for non-existent panes\r\n\t\t\t\t_runCallbacks(\"onresize_end\", pane); // callback - if exists\r\n\t\t});\r\n\r\n\t\t_runCallbacks(\"onresizeall_end\");\r\n\t\t//_triggerLayoutEvent(pane, 'resizeall');\r\n\t}\r\n\r\n\t/**\r\n\t * Whenever a pane resizes or opens that has a nested layout, trigger resizeAll\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane\t\tThe pane just resized or opened\r\n\t */\r\n,\tresizeChildren = function (evt_or_pane, skipRefresh) {\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane);\r\n\r\n\t\tif (!options[pane].resizeChildren) return;\r\n\r\n\t\t// ensure the pane-children are up-to-date\r\n\t\tif (!skipRefresh) refreshChildren( pane );\r\n\t\tvar pC = children[pane];\r\n\t\tif ($.isPlainObject( pC )) {\r\n\t\t\t// resize one or more children\r\n\t\t\t$.each( pC, function (key, child) {\r\n\t\t\t\tif (!child.destroyed) child.resizeAll();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * IF pane has a content-div, then resize all elements inside pane to fit pane-height\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_panes\t\tThe pane(s) being resized\r\n\t * @param {boolean=}\t\t\t[remeasure=false]\tShould the content (header/footer) be remeasured?\r\n\t */\r\n,\tsizeContent = function (evt_or_panes, remeasure) {\r\n\t\tif (!isInitialized()) return;\r\n\r\n\t\tvar panes = evtPane.call(this, evt_or_panes);\r\n\t\tpanes = panes ? panes.split(\",\") : _c.allPanes;\r\n\r\n\t\t$.each(panes, function (idx, pane) {\r\n\t\t\tvar\r\n\t\t\t\t$P\t= $Ps[pane]\r\n\t\t\t,\t$C\t= $Cs[pane]\r\n\t\t\t,\to\t= options[pane]\r\n\t\t\t,\ts\t= state[pane]\r\n\t\t\t,\tm\t= s.content // m = measurements\r\n\t\t\t;\r\n\t\t\tif (!$P || !$C || !$P.is(\":visible\")) return true; // NOT VISIBLE - skip\r\n\r\n\t\t\t// if content-element was REMOVED, update OR remove the pointer\r\n\t\t\tif (!$C.length) {\r\n\t\t\t\tinitContent(pane, false);\t// false = do NOT sizeContent() - already there!\r\n\t\t\t\tif (!$C) return;\t\t\t// no replacement element found - pointer have been removed\r\n\t\t\t}\r\n\r\n\t\t\t// onsizecontent_start will CANCEL resizing if returns false\r\n\t\t\tif (false === _runCallbacks(\"onsizecontent_start\", pane)) return;\r\n\r\n\t\t\t// skip re-measuring offsets if live-resizing\r\n\t\t\tif ((!s.isMoving && !s.isResizing) || o.liveContentResizing || remeasure || m.top == undefined) {\r\n\t\t\t\t_measure();\r\n\t\t\t\t// if any footers are below pane-bottom, they may not measure correctly,\r\n\t\t\t\t// so allow pane overflow and re-measure\r\n\t\t\t\tif (m.hiddenFooters > 0 && $P.css(\"overflow\") === \"hidden\") {\r\n\t\t\t\t\t$P.css(\"overflow\", \"visible\");\r\n\t\t\t\t\t_measure(); // remeasure while overflowing\r\n\t\t\t\t\t$P.css(\"overflow\", \"hidden\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// NOTE: spaceAbove/Below *includes* the pane paddingTop/Bottom, but not pane.borders\r\n\t\t\tvar newH = s.innerHeight - (m.spaceAbove - s.css.paddingTop) - (m.spaceBelow - s.css.paddingBottom);\r\n\r\n\t\t\tif (!$C.is(\":visible\") || m.height != newH) {\r\n\t\t\t\t// size the Content element to fit new pane-size - will autoHide if not enough room\r\n\t\t\t\tsetOuterHeight($C, newH, true); // true=autoHide\r\n\t\t\t\tm.height = newH; // save new height\r\n\t\t\t};\r\n\r\n\t\t\tif (state.initialized)\r\n\t\t\t\t_runCallbacks(\"onsizecontent_end\", pane);\r\n\r\n\t\t\tfunction _below ($E) {\r\n\t\t\t\treturn max(s.css.paddingBottom, (parseInt($E.css(\"marginBottom\"), 10) || 0));\r\n\t\t\t};\r\n\r\n\t\t\tfunction _measure () {\r\n\t\t\t\tvar\r\n\t\t\t\t\tignore\t= options[pane].contentIgnoreSelector\r\n\t\t\t\t,\t$Fs\t\t= $C.nextAll().not(\".ui-layout-mask\").not(ignore || \":lt(0)\") // not :lt(0) = ALL\r\n\t\t\t\t,\t$Fs_vis\t= $Fs.filter(':visible')\r\n\t\t\t\t,\t$F\t\t= $Fs_vis.filter(':last')\r\n\t\t\t\t;\r\n\t\t\t\tm = {\r\n\t\t\t\t\ttop:\t\t\t$C[0].offsetTop\r\n\t\t\t\t,\theight:\t\t\t$C.outerHeight()\r\n\t\t\t\t,\tnumFooters:\t\t$Fs.length\r\n\t\t\t\t,\thiddenFooters:\t$Fs.length - $Fs_vis.length\r\n\t\t\t\t,\tspaceBelow:\t\t0 // correct if no content footer ($E)\r\n\t\t\t\t}\r\n\t\t\t\t\tm.spaceAbove\t= m.top; // just for state - not used in calc\r\n\t\t\t\t\tm.bottom\t\t= m.top + m.height;\r\n\t\t\t\tif ($F.length)\r\n\t\t\t\t\t//spaceBelow = (LastFooter.top + LastFooter.height) [footerBottom] - Content.bottom + max(LastFooter.marginBottom, pane.paddingBotom)\r\n\t\t\t\t\tm.spaceBelow = ($F[0].offsetTop + $F.outerHeight()) - m.bottom + _below($F);\r\n\t\t\t\telse // no footer - check marginBottom on Content element itself\r\n\t\t\t\t\tm.spaceBelow = _below($C);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called every time a pane is opened, closed, or resized to slide the togglers to 'center' and adjust their length if necessary\r\n\t *\r\n\t * @see  initHandles(), open(), close(), resizeAll()\r\n\t * @param {(string|Object)=}\t\tevt_or_panes\tThe pane(s) being resized\r\n\t */\r\n,\tsizeHandles = function (evt_or_panes) {\r\n\t\tvar panes = evtPane.call(this, evt_or_panes)\r\n\t\tpanes = panes ? panes.split(\",\") : _c.borderPanes;\r\n\r\n\t\t$.each(panes, function (i, pane) {\r\n\t\t\tvar \r\n\t\t\t\to\t= options[pane]\r\n\t\t\t,\ts\t= state[pane]\r\n\t\t\t,\t$P\t= $Ps[pane]\r\n\t\t\t,\t$R\t= $Rs[pane]\r\n\t\t\t,\t$T\t= $Ts[pane]\r\n\t\t\t,\t$TC\r\n\t\t\t;\r\n\t\t\tif (!$P || !$R) return;\r\n\r\n\t\t\tvar\r\n\t\t\t\tdir\t\t\t= _c[pane].dir\r\n\t\t\t,\t_state\t\t= (s.isClosed ? \"_closed\" : \"_open\")\r\n\t\t\t,\tspacing\t\t= o[\"spacing\"+ _state]\r\n\t\t\t,\ttogAlign\t= o[\"togglerAlign\"+ _state]\r\n\t\t\t,\ttogLen\t\t= o[\"togglerLength\"+ _state]\r\n\t\t\t,\tpaneLen\r\n\t\t\t,\tleft\r\n\t\t\t,\toffset\r\n\t\t\t,\tCSS = {}\r\n\t\t\t;\r\n\r\n\t\t\tif (spacing === 0) {\r\n\t\t\t\t$R.hide();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (!s.noRoom && !s.isHidden) // skip if resizer was hidden for any reason\r\n\t\t\t\t$R.show(); // in case was previously hidden\r\n\r\n\t\t\t// Resizer Bar is ALWAYS same width/height of pane it is attached to\r\n\t\t\tif (dir === \"horz\") { // north/south\r\n\t\t\t\t//paneLen = $P.outerWidth(); // s.outerWidth || \r\n\t\t\t\tpaneLen = sC.innerWidth; // handle offscreen-panes\r\n\t\t\t\ts.resizerLength = paneLen;\r\n\t\t\t\tleft = $.layout.cssNum($P, \"left\")\r\n\t\t\t\t$R.css({\r\n\t\t\t\t\twidth:\tcssW($R, paneLen) // account for borders & padding\r\n\t\t\t\t,\theight:\tcssH($R, spacing) // ditto\r\n\t\t\t\t,\tleft:\tleft > -9999 ? left : sC.inset.left // handle offscreen-panes\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse { // east/west\r\n\t\t\t\tpaneLen = $P.outerHeight(); // s.outerHeight || \r\n\t\t\t\ts.resizerLength = paneLen;\r\n\t\t\t\t$R.css({\r\n\t\t\t\t\theight:\tcssH($R, paneLen) // account for borders & padding\r\n\t\t\t\t,\twidth:\tcssW($R, spacing) // ditto\r\n\t\t\t\t,\ttop:\tsC.inset.top + getPaneSize(\"north\", true) // TODO: what if no North pane?\r\n\t\t\t\t//,\ttop:\t$.layout.cssNum($Ps[\"center\"], \"top\")\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// remove hover classes\r\n\t\t\tremoveHover( o, $R );\r\n\r\n\t\t\tif ($T) {\r\n\t\t\t\tif (togLen === 0 || (s.isSliding && o.hideTogglerOnSlide)) {\r\n\t\t\t\t\t$T.hide(); // always HIDE the toggler when 'sliding'\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t$T.show(); // in case was previously hidden\r\n\r\n\t\t\t\tif (!(togLen > 0) || togLen === \"100%\" || togLen > paneLen) {\r\n\t\t\t\t\ttogLen = paneLen;\r\n\t\t\t\t\toffset = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse { // calculate 'offset' based on options.PANE.togglerAlign_open/closed\r\n\t\t\t\t\tif (isStr(togAlign)) {\r\n\t\t\t\t\t\tswitch (togAlign) {\r\n\t\t\t\t\t\t\tcase \"top\":\r\n\t\t\t\t\t\t\tcase \"left\":\toffset = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\t\tcase \"right\":\toffset = paneLen - togLen;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\t\tcase \"center\":\r\n\t\t\t\t\t\t\tdefault:\t\toffset = round((paneLen - togLen) / 2); // 'default' catches typos\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { // togAlign = number\r\n\t\t\t\t\t\tvar x = parseInt(togAlign, 10); //\r\n\t\t\t\t\t\tif (togAlign >= 0) offset = x;\r\n\t\t\t\t\t\telse offset = paneLen - togLen + x; // NOTE: x is negative!\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dir === \"horz\") { // north/south\r\n\t\t\t\t\tvar width = cssW($T, togLen);\r\n\t\t\t\t\t$T.css({\r\n\t\t\t\t\t\twidth:\twidth  // account for borders & padding\r\n\t\t\t\t\t,\theight:\tcssH($T, spacing) // ditto\r\n\t\t\t\t\t,\tleft:\toffset // TODO: VERIFY that toggler  positions correctly for ALL values\r\n\t\t\t\t\t,\ttop:\t0\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// CENTER the toggler content SPAN\r\n\t\t\t\t\t$T.children(\".content\").each(function(){\r\n\t\t\t\t\t\t$TC = $(this);\r\n\t\t\t\t\t\t$TC.css(\"marginLeft\", round((width-$TC.outerWidth())/2)); // could be negative\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse { // east/west\r\n\t\t\t\t\tvar height = cssH($T, togLen);\r\n\t\t\t\t\t$T.css({\r\n\t\t\t\t\t\theight:\theight // account for borders & padding\r\n\t\t\t\t\t,\twidth:\tcssW($T, spacing) // ditto\r\n\t\t\t\t\t,\ttop:\toffset // POSITION the toggler\r\n\t\t\t\t\t,\tleft:\t0\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// CENTER the toggler content SPAN\r\n\t\t\t\t\t$T.children(\".content\").each(function(){\r\n\t\t\t\t\t\t$TC = $(this);\r\n\t\t\t\t\t\t$TC.css(\"marginTop\", round((height-$TC.outerHeight())/2)); // could be negative\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove ALL hover classes\r\n\t\t\t\tremoveHover( 0, $T );\r\n\t\t\t}\r\n\r\n\t\t\t// DONE measuring and sizing this resizer/toggler, so can be 'hidden' now\r\n\t\t\tif (!state.initialized && (o.initHidden || s.isHidden)) {\r\n\t\t\t\t$R.hide();\r\n\t\t\t\tif ($T) $T.hide();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t */\r\n,\tenableClosable = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$T\t= $Ts[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t;\r\n\t\tif (!$T) return;\r\n\t\to.closable = true;\r\n\t\t$T\t.bind(\"click.\"+ sID, function(evt){ evt.stopPropagation(); toggle(pane); })\r\n\t\t\t.css(\"visibility\", \"visible\")\r\n\t\t\t.css(\"cursor\", \"pointer\")\r\n\t\t\t.attr(\"title\", state[pane].isClosed ? o.tips.Open : o.tips.Close) // may be blank\r\n\t\t\t.show();\r\n\t}\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t * @param {boolean=}\t\t\t[hide=false]\r\n\t */\r\n,\tdisableClosable = function (evt_or_pane, hide) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$T\t= $Ts[pane]\r\n\t\t;\r\n\t\tif (!$T) return;\r\n\t\toptions[pane].closable = false;\r\n\t\t// is closable is disable, then pane MUST be open!\r\n\t\tif (state[pane].isClosed) open(pane, false, true);\r\n\t\t$T\t.unbind(\".\"+ sID)\r\n\t\t\t.css(\"visibility\", hide ? \"hidden\" : \"visible\") // instead of hide(), which creates logic issues\r\n\t\t\t.css(\"cursor\", \"default\")\r\n\t\t\t.attr(\"title\", \"\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t */\r\n,\tenableSlidable = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t;\r\n\t\tif (!$R || !$R.data('draggable')) return;\r\n\t\toptions[pane].slidable = true; \r\n\t\tif (state[pane].isClosed)\r\n\t\t\tbindStartSlidingEvents(pane, true);\r\n\t}\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t */\r\n,\tdisableSlidable = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t;\r\n\t\tif (!$R) return;\r\n\t\toptions[pane].slidable = false; \r\n\t\tif (state[pane].isSliding)\r\n\t\t\tclose(pane, false, true);\r\n\t\telse {\r\n\t\t\tbindStartSlidingEvents(pane, false);\r\n\t\t\t$R\t.css(\"cursor\", \"default\")\r\n\t\t\t\t.attr(\"title\", \"\");\r\n\t\t\tremoveHover(null, $R[0]); // in case currently hovered\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t */\r\n,\tenableResizable = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t,\to\t= options[pane]\r\n\t\t;\r\n\t\tif (!$R || !$R.data('draggable')) return;\r\n\t\to.resizable = true; \r\n\t\t$R.draggable(\"enable\");\r\n\t\tif (!state[pane].isClosed)\r\n\t\t\t$R\t.css(\"cursor\", o.resizerCursor)\r\n\t\t\t \t.attr(\"title\", o.tips.Resize);\r\n\t}\r\n\t/**\r\n\t * @param {(string|Object)}\tevt_or_pane\r\n\t */\r\n,\tdisableResizable = function (evt_or_pane) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar\tpane = evtPane.call(this, evt_or_pane)\r\n\t\t,\t$R\t= $Rs[pane]\r\n\t\t;\r\n\t\tif (!$R || !$R.data('draggable')) return;\r\n\t\toptions[pane].resizable = false; \r\n\t\t$R\t.draggable(\"disable\")\r\n\t\t\t.css(\"cursor\", \"default\")\r\n\t\t\t.attr(\"title\", \"\");\r\n\t\tremoveHover(null, $R[0]); // in case currently hovered\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Move a pane from source-side (eg, west) to target-side (eg, east)\r\n\t * If pane exists on target-side, move that to source-side, ie, 'swap' the panes\r\n\t *\r\n\t * @param {(string|Object)}\tevt_or_pane1\tThe pane/edge being swapped\r\n\t * @param {string}\t\t\tpane2\t\t\tditto\r\n\t */\r\n,\tswapPanes = function (evt_or_pane1, pane2) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tvar pane1 = evtPane.call(this, evt_or_pane1);\r\n\t\t// change state.edge NOW so callbacks can know where pane is headed...\r\n\t\tstate[pane1].edge = pane2;\r\n\t\tstate[pane2].edge = pane1;\r\n\t\t// run these even if NOT state.initialized\r\n\t\tif (false === _runCallbacks(\"onswap_start\", pane1)\r\n\t\t ||\tfalse === _runCallbacks(\"onswap_start\", pane2)\r\n\t\t) {\r\n\t\t\tstate[pane1].edge = pane1; // reset\r\n\t\t\tstate[pane2].edge = pane2;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar\r\n\t\t\toPane1\t= copy( pane1 )\r\n\t\t,\toPane2\t= copy( pane2 )\r\n\t\t,\tsizes\t= {}\r\n\t\t;\r\n\t\tsizes[pane1] = oPane1 ? oPane1.state.size : 0;\r\n\t\tsizes[pane2] = oPane2 ? oPane2.state.size : 0;\r\n\r\n\t\t// clear pointers & state\r\n\t\t$Ps[pane1] = false; \r\n\t\t$Ps[pane2] = false;\r\n\t\tstate[pane1] = {};\r\n\t\tstate[pane2] = {};\r\n\t\t\r\n\t\t// ALWAYS remove the resizer & toggler elements\r\n\t\tif ($Ts[pane1]) $Ts[pane1].remove();\r\n\t\tif ($Ts[pane2]) $Ts[pane2].remove();\r\n\t\tif ($Rs[pane1]) $Rs[pane1].remove();\r\n\t\tif ($Rs[pane2]) $Rs[pane2].remove();\r\n\t\t$Rs[pane1] = $Rs[pane2] = $Ts[pane1] = $Ts[pane2] = false;\r\n\r\n\t\t// transfer element pointers and data to NEW Layout keys\r\n\t\tmove( oPane1, pane2 );\r\n\t\tmove( oPane2, pane1 );\r\n\r\n\t\t// cleanup objects\r\n\t\toPane1 = oPane2 = sizes = null;\r\n\r\n\t\t// make panes 'visible' again\r\n\t\tif ($Ps[pane1]) $Ps[pane1].css(_c.visible);\r\n\t\tif ($Ps[pane2]) $Ps[pane2].css(_c.visible);\r\n\r\n\t\t// fix any size discrepancies caused by swap\r\n\t\tresizeAll();\r\n\r\n\t\t// run these even if NOT state.initialized\r\n\t\t_runCallbacks(\"onswap_end\", pane1);\r\n\t\t_runCallbacks(\"onswap_end\", pane2);\r\n\r\n\t\treturn;\r\n\r\n\t\tfunction copy (n) { // n = pane\r\n\t\t\tvar\r\n\t\t\t\t$P\t= $Ps[n]\r\n\t\t\t,\t$C\t= $Cs[n]\r\n\t\t\t;\r\n\t\t\treturn !$P ? false : {\r\n\t\t\t\tpane:\t\tn\r\n\t\t\t,\tP:\t\t\t$P ? $P[0] : false\r\n\t\t\t,\tC:\t\t\t$C ? $C[0] : false\r\n\t\t\t,\tstate:\t\t$.extend(true, {}, state[n])\r\n\t\t\t,\toptions:\t$.extend(true, {}, options[n])\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction move (oPane, pane) {\r\n\t\t\tif (!oPane) return;\r\n\t\t\tvar\r\n\t\t\t\tP\t\t= oPane.P\r\n\t\t\t,\tC\t\t= oPane.C\r\n\t\t\t,\toldPane = oPane.pane\r\n\t\t\t,\tc\t\t= _c[pane]\r\n\t\t\t//\tsave pane-options that should be retained\r\n\t\t\t,\ts\t\t= $.extend(true, {}, state[pane])\r\n\t\t\t,\to\t\t= options[pane]\r\n\t\t\t//\tRETAIN side-specific FX Settings - more below\r\n\t\t\t,\tfx\t\t= { resizerCursor: o.resizerCursor }\r\n\t\t\t,\tre, size, pos\r\n\t\t\t;\r\n\t\t\t$.each(\"fxName,fxSpeed,fxSettings\".split(\",\"), function (i, k) {\r\n\t\t\t\tfx[k +\"_open\"]  = o[k +\"_open\"];\r\n\t\t\t\tfx[k +\"_close\"] = o[k +\"_close\"];\r\n\t\t\t\tfx[k +\"_size\"]  = o[k +\"_size\"];\r\n\t\t\t});\r\n\r\n\t\t\t// update object pointers and attributes\r\n\t\t\t$Ps[pane] = $(P)\r\n\t\t\t\t.data({\r\n\t\t\t\t\tlayoutPane:\t\tInstance[pane]\t// NEW pointer to pane-alias-object\r\n\t\t\t\t,\tlayoutEdge:\t\tpane\r\n\t\t\t\t})\r\n\t\t\t\t.css(_c.hidden)\r\n\t\t\t\t.css(c.cssReq)\r\n\t\t\t;\r\n\t\t\t$Cs[pane] = C ? $(C) : false;\r\n\r\n\t\t\t// set options and state\r\n\t\t\toptions[pane]\t= $.extend(true, {}, oPane.options, fx);\r\n\t\t\tstate[pane]\t\t= $.extend(true, {}, oPane.state);\r\n\r\n\t\t\t// change classNames on the pane, eg: ui-layout-pane-east ==> ui-layout-pane-west\r\n\t\t\tre = new RegExp(o.paneClass +\"-\"+ oldPane, \"g\");\r\n\t\t\tP.className = P.className.replace(re, o.paneClass +\"-\"+ pane);\r\n\r\n\t\t\t// ALWAYS regenerate the resizer & toggler elements\r\n\t\t\tinitHandles(pane); // create the required resizer & toggler\r\n\r\n\t\t\t// if moving to different orientation, then keep 'target' pane size\r\n\t\t\tif (c.dir != _c[oldPane].dir) {\r\n\t\t\t\tsize = sizes[pane] || 0;\r\n\t\t\t\tsetSizeLimits(pane); // update pane-state\r\n\t\t\t\tsize = max(size, state[pane].minSize);\r\n\t\t\t\t// use manualSizePane to disable autoResize - not useful after panes are swapped\r\n\t\t\t\tmanualSizePane(pane, size, true, true); // true/true = skipCallback/noAnimation\r\n\t\t\t}\r\n\t\t\telse // move the resizer here\r\n\t\t\t\t$Rs[pane].css(c.side, sC.inset[c.side] + (state[pane].isVisible ? getPaneSize(pane) : 0));\r\n\r\n\r\n\t\t\t// ADD CLASSNAMES & SLIDE-BINDINGS\r\n\t\t\tif (oPane.state.isVisible && !s.isVisible)\r\n\t\t\t\tsetAsOpen(pane, true); // true = skipCallback\r\n\t\t\telse {\r\n\t\t\t\tsetAsClosed(pane);\r\n\t\t\t\tbindStartSlidingEvents(pane, true); // will enable events IF option is set\r\n\t\t\t}\r\n\r\n\t\t\t// DESTROY the object\r\n\t\t\toPane = null;\r\n\t\t};\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * INTERNAL method to sync pin-buttons when pane is opened or closed\r\n\t * Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes\r\n\t *\r\n\t * @see  open(), setAsOpen(), setAsClosed()\r\n\t * @param {string}\tpane   These are the params returned to callbacks by layout()\r\n\t * @param {boolean}\tdoPin  True means set the pin 'down', False means 'up'\r\n\t */\r\n,\tsyncPinBtns = function (pane, doPin) {\r\n\t\tif ($.layout.plugins.buttons)\r\n\t\t\t$.each(state[pane].pins, function (i, selector) {\r\n\t\t\t\t$.layout.buttons.setPinState(Instance, $(selector), pane, doPin);\r\n\t\t\t});\r\n\t}\r\n\r\n;\t// END var DECLARATIONS\r\n\r\n\t/**\r\n\t * Capture keys when enableCursorHotkey - toggle pane if hotkey pressed\r\n\t *\r\n\t * @see  document.keydown()\r\n\t */\r\n\tfunction keyDown (evt) {\r\n\t\tif (!evt) return true;\r\n\t\tvar code = evt.keyCode;\r\n\t\tif (code < 33) return true; // ignore special keys: ENTER, TAB, etc\r\n\r\n\t\tvar\r\n\t\t\tPANE = {\r\n\t\t\t\t38: \"north\" // Up Cursor\t- $.ui.keyCode.UP\r\n\t\t\t,\t40: \"south\" // Down Cursor\t- $.ui.keyCode.DOWN\r\n\t\t\t,\t37: \"west\"  // Left Cursor\t- $.ui.keyCode.LEFT\r\n\t\t\t,\t39: \"east\"  // Right Cursor\t- $.ui.keyCode.RIGHT\r\n\t\t\t}\r\n\t\t,\tALT\t\t= evt.altKey // no worky!\r\n\t\t,\tSHIFT\t= evt.shiftKey\r\n\t\t,\tCTRL\t= evt.ctrlKey\r\n\t\t,\tCURSOR\t= (CTRL && code >= 37 && code <= 40)\r\n\t\t,\to, k, m, pane\r\n\t\t;\r\n\r\n\t\tif (CURSOR && options[PANE[code]].enableCursorHotkey) // valid cursor-hotkey\r\n\t\t\tpane = PANE[code];\r\n\t\telse if (CTRL || SHIFT) // check to see if this matches a custom-hotkey\r\n\t\t\t$.each(_c.borderPanes, function (i, p) { // loop each pane to check its hotkey\r\n\t\t\t\to = options[p];\r\n\t\t\t\tk = o.customHotkey;\r\n\t\t\t\tm = o.customHotkeyModifier; // if missing or invalid, treated as \"CTRL+SHIFT\"\r\n\t\t\t\tif ((SHIFT && m==\"SHIFT\") || (CTRL && m==\"CTRL\") || (CTRL && SHIFT)) { // Modifier matches\r\n\t\t\t\t\tif (k && code === (isNaN(k) || k <= 9 ? k.toUpperCase().charCodeAt(0) : k)) { // Key matches\r\n\t\t\t\t\t\tpane = p;\r\n\t\t\t\t\t\treturn false; // BREAK\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// validate pane\r\n\t\tif (!pane || !$Ps[pane] || !options[pane].closable || state[pane].isHidden)\r\n\t\t\treturn true;\r\n\r\n\t\ttoggle(pane);\r\n\r\n\t\tevt.stopPropagation();\r\n\t\tevt.returnValue = false; // CANCEL key\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n/*\r\n * ######################################\r\n *\tUTILITY METHODS\r\n *\tcalled externally or by initButtons\r\n * ######################################\r\n */\r\n\r\n\t/**\r\n\t * Change/reset a pane overflow setting & zIndex to allow popups/drop-downs to work\r\n\t *\r\n\t * @param {Object=}   [el]\t(optional) Can also be 'bound' to a click, mouseOver, or other event\r\n\t */\r\n\tfunction allowOverflow (el) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tif (this && this.tagName) el = this; // BOUND to element\r\n\t\tvar $P;\r\n\t\tif (isStr(el))\r\n\t\t\t$P = $Ps[el];\r\n\t\telse if ($(el).data(\"layoutRole\"))\r\n\t\t\t$P = $(el);\r\n\t\telse\r\n\t\t\t$(el).parents().each(function(){\r\n\t\t\t\tif ($(this).data(\"layoutRole\")) {\r\n\t\t\t\t\t$P = $(this);\r\n\t\t\t\t\treturn false; // BREAK\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tif (!$P || !$P.length) return; // INVALID\r\n\r\n\t\tvar\r\n\t\t\tpane\t= $P.data(\"layoutEdge\")\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t;\r\n\r\n\t\t// if pane is already raised, then reset it before doing it again!\r\n\t\t// this would happen if allowOverflow is attached to BOTH the pane and an element \r\n\t\tif (s.cssSaved)\r\n\t\t\tresetOverflow(pane); // reset previous CSS before continuing\r\n\r\n\t\t// if pane is raised by sliding or resizing, or its closed, then abort\r\n\t\tif (s.isSliding || s.isResizing || s.isClosed) {\r\n\t\t\ts.cssSaved = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar\r\n\t\t\tnewCSS\t= { zIndex: (options.zIndexes.resizer_normal + 1) }\r\n\t\t,\tcurCSS\t= {}\r\n\t\t,\tof\t\t= $P.css(\"overflow\")\r\n\t\t,\tofX\t\t= $P.css(\"overflowX\")\r\n\t\t,\tofY\t\t= $P.css(\"overflowY\")\r\n\t\t;\r\n\t\t// determine which, if any, overflow settings need to be changed\r\n\t\tif (of != \"visible\") {\r\n\t\t\tcurCSS.overflow = of;\r\n\t\t\tnewCSS.overflow = \"visible\";\r\n\t\t}\r\n\t\tif (ofX && !ofX.match(/(visible|auto)/)) {\r\n\t\t\tcurCSS.overflowX = ofX;\r\n\t\t\tnewCSS.overflowX = \"visible\";\r\n\t\t}\r\n\t\tif (ofY && !ofY.match(/(visible|auto)/)) {\r\n\t\t\tcurCSS.overflowY = ofX;\r\n\t\t\tnewCSS.overflowY = \"visible\";\r\n\t\t}\r\n\r\n\t\t// save the current overflow settings - even if blank!\r\n\t\ts.cssSaved = curCSS;\r\n\r\n\t\t// apply new CSS to raise zIndex and, if necessary, make overflow 'visible'\r\n\t\t$P.css( newCSS );\r\n\r\n\t\t// make sure the zIndex of all other panes is normal\r\n\t\t$.each(_c.allPanes, function(i, p) {\r\n\t\t\tif (p != pane) resetOverflow(p);\r\n\t\t});\r\n\r\n\t};\r\n\t/**\r\n\t * @param {Object=}   [el]\t(optional) Can also be 'bound' to a click, mouseOver, or other event\r\n\t */\r\n\tfunction resetOverflow (el) {\r\n\t\tif (!isInitialized()) return;\r\n\t\tif (this && this.tagName) el = this; // BOUND to element\r\n\t\tvar $P;\r\n\t\tif (isStr(el))\r\n\t\t\t$P = $Ps[el];\r\n\t\telse if ($(el).data(\"layoutRole\"))\r\n\t\t\t$P = $(el);\r\n\t\telse\r\n\t\t\t$(el).parents().each(function(){\r\n\t\t\t\tif ($(this).data(\"layoutRole\")) {\r\n\t\t\t\t\t$P = $(this);\r\n\t\t\t\t\treturn false; // BREAK\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tif (!$P || !$P.length) return; // INVALID\r\n\r\n\t\tvar\r\n\t\t\tpane\t= $P.data(\"layoutEdge\")\r\n\t\t,\ts\t\t= state[pane]\r\n\t\t,\tCSS\t\t= s.cssSaved || {}\r\n\t\t;\r\n\t\t// reset the zIndex\r\n\t\tif (!s.isSliding && !s.isResizing)\r\n\t\t\t$P.css(\"zIndex\", options.zIndexes.pane_normal);\r\n\r\n\t\t// reset Overflow - if necessary\r\n\t\t$P.css( CSS );\r\n\r\n\t\t// clear var\r\n\t\ts.cssSaved = false;\r\n\t};\r\n\r\n/*\r\n * #####################\r\n * CREATE/RETURN LAYOUT\r\n * #####################\r\n */\r\n\r\n\t// validate that container exists\r\n\tvar $N = $(this).eq(0); // FIRST matching Container element\r\n\tif (!$N.length) {\r\n\t\treturn _log( options.errors.containerMissing );\r\n\t};\r\n\r\n\t// Users retrieve Instance of a layout with: $N.layout() OR $N.data(\"layout\")\r\n\t// return the Instance-pointer if layout has already been initialized\r\n\tif ($N.data(\"layoutContainer\") && $N.data(\"layout\"))\r\n\t\treturn $N.data(\"layout\"); // cached pointer\r\n\r\n\t// init global vars\r\n\tvar \r\n\t\t$Ps\t= {}\t// Panes x5\t\t- set in initPanes()\r\n\t,\t$Cs\t= {}\t// Content x5\t- set in initPanes()\r\n\t,\t$Rs\t= {}\t// Resizers x4\t- set in initHandles()\r\n\t,\t$Ts\t= {}\t// Togglers x4\t- set in initHandles()\r\n\t,\t$Ms\t= $([])\t// Masks - up to 2 masks per pane (IFRAME + DIV)\r\n\t//\taliases for code brevity\r\n\t,\tsC\t= state.container // alias for easy access to 'container dimensions'\r\n\t,\tsID\t= state.id // alias for unique layout ID/namespace - eg: \"layout435\"\r\n\t;\r\n\r\n\t// create Instance object to expose data & option Properties, and primary action Methods\r\n\tvar Instance = {\r\n\t//\tlayout data\r\n\t\toptions:\t\t\toptions\t\t\t// property - options hash\r\n\t,\tstate:\t\t\t\tstate\t\t\t// property - dimensions hash\r\n\t//\tobject pointers\r\n\t,\tcontainer:\t\t\t$N\t\t\t\t// property - object pointers for layout container\r\n\t,\tpanes:\t\t\t\t$Ps\t\t\t\t// property - object pointers for ALL Panes: panes.north, panes.center\r\n\t,\tcontents:\t\t\t$Cs\t\t\t\t// property - object pointers for ALL Content: contents.north, contents.center\r\n\t,\tresizers:\t\t\t$Rs\t\t\t\t// property - object pointers for ALL Resizers, eg: resizers.north\r\n\t,\ttogglers:\t\t\t$Ts\t\t\t\t// property - object pointers for ALL Togglers, eg: togglers.north\r\n\t//\tborder-pane open/close\r\n\t,\thide:\t\t\t\thide\t\t\t// method - ditto\r\n\t,\tshow:\t\t\t\tshow\t\t\t// method - ditto\r\n\t,\ttoggle:\t\t\t\ttoggle\t\t\t// method - pass a 'pane' (\"north\", \"west\", etc)\r\n\t,\topen:\t\t\t\topen\t\t\t// method - ditto\r\n\t,\tclose:\t\t\t\tclose\t\t\t// method - ditto\r\n\t,\tslideOpen:\t\t\tslideOpen\t\t// method - ditto\r\n\t,\tslideClose:\t\t\tslideClose\t\t// method - ditto\r\n\t,\tslideToggle:\t\tslideToggle\t\t// method - ditto\r\n\t//\tpane actions\r\n\t,\tsetSizeLimits:\t\tsetSizeLimits\t// method - pass a 'pane' - update state min/max data\r\n\t,\t_sizePane:\t\t\tsizePane\t\t// method -intended for user by plugins only!\r\n\t,\tsizePane:\t\t\tmanualSizePane\t// method - pass a 'pane' AND an 'outer-size' in pixels or percent, or 'auto'\r\n\t,\tsizeContent:\t\tsizeContent\t\t// method - pass a 'pane'\r\n\t,\tswapPanes:\t\t\tswapPanes\t\t// method - pass TWO 'panes' - will swap them\r\n\t,\tshowMasks:\t\t\tshowMasks\t\t// method - pass a 'pane' OR list of panes - default = all panes with mask option set\r\n\t,\thideMasks:\t\t\thideMasks\t\t// method - ditto'\r\n\t//\tpane element methods\r\n\t,\tinitContent:\t\tinitContent\t\t// method - ditto\r\n\t,\taddPane:\t\t\taddPane\t\t\t// method - pass a 'pane'\r\n\t,\tremovePane:\t\t\tremovePane\t\t// method - pass a 'pane' to remove from layout, add 'true' to delete the pane-elem\r\n\t,\tcreateChildren:\t\tcreateChildren\t// method - pass a 'pane' and (optional) layout-options (OVERRIDES options[pane].children\r\n\t,\trefreshChildren:\trefreshChildren\t// method - pass a 'pane' and a layout-instance\r\n\t//\tspecial pane option setting\r\n\t,\tenableClosable:\t\tenableClosable\t// method - pass a 'pane'\r\n\t,\tdisableClosable:\tdisableClosable\t// method - ditto\r\n\t,\tenableSlidable:\t\tenableSlidable\t// method - ditto\r\n\t,\tdisableSlidable:\tdisableSlidable\t// method - ditto\r\n\t,\tenableResizable:\tenableResizable\t// method - ditto\r\n\t,\tdisableResizable:\tdisableResizable// method - ditto\r\n\t//\tutility methods for panes\r\n\t,\tallowOverflow:\t\tallowOverflow\t// utility - pass calling element (this)\r\n\t,\tresetOverflow:\t\tresetOverflow\t// utility - ditto\r\n\t//\tlayout control\r\n\t,\tdestroy:\t\t\tdestroy\t\t\t// method - no parameters\r\n\t,\tinitPanes:\t\t\tisInitialized\t// method - no parameters\r\n\t,\tresizeAll:\t\t\tresizeAll\t\t// method - no parameters\r\n\t//\tcallback triggering\r\n\t,\trunCallbacks:\t\t_runCallbacks\t// method - pass evtName & pane (if a pane-event), eg: trigger(\"onopen\", \"west\")\r\n\t//\talias collections of options, state and children - created in addPane and extended elsewhere\r\n\t,\thasParentLayout:\tfalse\t\t\t// set by initContainer()\r\n\t,\tchildren:\t\t\tchildren\t\t// pointers to child-layouts, eg: Instance.children.west.layoutName\r\n\t,\tnorth:\t\t\t\tfalse\t\t\t// alias group: { name: pane, pane: $Ps[pane], options: options[pane], state: state[pane], children: children[pane] }\r\n\t,\tsouth:\t\t\t\tfalse\t\t\t// ditto\r\n\t,\twest:\t\t\t\tfalse\t\t\t// ditto\r\n\t,\teast:\t\t\t\tfalse\t\t\t// ditto\r\n\t,\tcenter:\t\t\t\tfalse\t\t\t// ditto\r\n\t};\r\n\r\n\t// create the border layout NOW\r\n\tif (_create() === 'cancel') // onload_start callback returned false to CANCEL layout creation\r\n\t\treturn null;\r\n\telse // true OR false -- if layout-elements did NOT init (hidden or do not exist), can auto-init later\r\n\t\treturn Instance; // return the Instance object\r\n\r\n}\r\n\r\n\r\n})( jQuery );\r\n\r\n\r\n\r\n\r\n/**\r\n * jquery.layout.state 1.2\r\n * $Date: 2014-08-30 08:00:00 (Sat, 30 Aug 2014) $\r\n *\r\n * Copyright (c) 2014 \r\n *   Kevin Dalman (http://allpro.net)\r\n *\r\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\r\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\r\n *\r\n * @requires: UI Layout 1.4.0 or higher\r\n * @requires: $.ui.cookie (above)\r\n *\r\n * @see: http://groups.google.com/group/jquery-ui-layout\r\n */\r\n;(function ($) {\r\n\r\nif (!$.layout) return;\r\n\r\n\r\n/**\r\n *\tUI COOKIE UTILITY\r\n *\r\n *\tA $.cookie OR $.ui.cookie namespace *should be standard*, but until then...\r\n *\tThis creates $.ui.cookie so Layout does not need the cookie.jquery.js plugin\r\n *\tNOTE: This utility is REQUIRED by the layout.state plugin\r\n *\r\n *\tCookie methods in Layout are created as part of State Management \r\n */\r\nif (!$.ui) $.ui = {};\r\n$.ui.cookie = {\r\n\r\n\t// cookieEnabled is not in DOM specs, but DOES works in all browsers,including IE6\r\n\tacceptsCookies: !!navigator.cookieEnabled\r\n\r\n,\tread: function (name) {\r\n\t\tvar\r\n\t\t\tc\t= document.cookie\r\n\t\t,\tcs\t= c ? c.split(';') : []\r\n\t\t,\tpair, data, i\r\n\t\t;\r\n\t\tfor (i=0; pair=cs[i]; i++) {\r\n\t\t\tdata = $.trim(pair).split('='); // name=value => [ name, value ]\r\n\t\t\tif (data[0] == name) // found the layout cookie\r\n\t\t\t\treturn decodeURIComponent(data[1]);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n,\twrite: function (name, val, cookieOpts) {\r\n\t\tvar\tparams\t= \"\"\r\n\t\t,\tdate\t= \"\"\r\n\t\t,\tclear\t= false\r\n\t\t,\to\t\t= cookieOpts || {}\r\n\t\t,\tx\t\t= o.expires  || null\r\n\t\t,\tt\t\t= $.type(x)\r\n\t\t;\r\n\t\tif (t === \"date\")\r\n\t\t\tdate = x;\r\n\t\telse if (t === \"string\" && x > 0) {\r\n\t\t\tx = parseInt(x,10);\r\n\t\t\tt = \"number\";\r\n\t\t}\r\n\t\tif (t === \"number\") {\r\n\t\t\tdate = new Date();\r\n\t\t\tif (x > 0)\r\n\t\t\t\tdate.setDate(date.getDate() + x);\r\n\t\t\telse {\r\n\t\t\t\tdate.setFullYear(1970);\r\n\t\t\t\tclear = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (date)\t\tparams += \";expires=\"+ date.toUTCString();\r\n\t\tif (o.path)\t\tparams += \";path=\"+ o.path;\r\n\t\tif (o.domain)\tparams += \";domain=\"+ o.domain;\r\n\t\tif (o.secure)\tparams += \";secure\";\r\n\t\tdocument.cookie = name +\"=\"+ (clear ? \"\" : encodeURIComponent( val )) + params; // write or clear cookie\r\n\t}\r\n\r\n,\tclear: function (name) {\r\n\t\t$.ui.cookie.write(name, \"\", {expires: -1});\r\n\t}\r\n\r\n};\r\n// if cookie.jquery.js is not loaded, create an alias to replicate it\r\n// this may be useful to other plugins or code dependent on that plugin\r\nif (!$.cookie) $.cookie = function (k, v, o) {\r\n\tvar C = $.ui.cookie;\r\n\tif (v === null)\r\n\t\tC.clear(k);\r\n\telse if (v === undefined)\r\n\t\treturn C.read(k);\r\n\telse\r\n\t\tC.write(k, v, o);\r\n};\r\n\r\n\r\n\r\n/**\r\n *\tState-management options stored in options.stateManagement, which includes a .cookie hash\r\n *\tDefault options saves ALL KEYS for ALL PANES, ie: pane.size, pane.isClosed, pane.isHidden\r\n *\r\n *\t// STATE/COOKIE OPTIONS\r\n *\t@example $(el).layout({\r\n\t\t\t\tstateManagement: {\r\n\t\t\t\t\tenabled:\ttrue\r\n\t\t\t\t,\tstateKeys:\t\"east.size,west.size,east.isClosed,west.isClosed\"\r\n\t\t\t\t,\tcookie:\t\t{ name: \"appLayout\", path: \"/\" }\r\n\t\t\t\t}\r\n\t\t\t})\r\n *\t@example $(el).layout({ stateManagement__enabled: true }) // enable auto-state-management using cookies\r\n *\t@example $(el).layout({ stateManagement__cookie: { name: \"appLayout\", path: \"/\" } })\r\n *\t@example $(el).layout({ stateManagement__cookie__name: \"appLayout\", stateManagement__cookie__path: \"/\" })\r\n *\r\n *\t// STATE/COOKIE METHODS\r\n *\t@example myLayout.saveCookie( \"west.isClosed,north.size,south.isHidden\", {expires: 7} );\r\n *\t@example myLayout.loadCookie();\r\n *\t@example myLayout.deleteCookie();\r\n *\t@example var JSON = myLayout.readState();\t// CURRENT Layout State\r\n *\t@example var JSON = myLayout.readCookie();\t// SAVED Layout State (from cookie)\r\n *\t@example var JSON = myLayout.state.stateData;\t// LAST LOADED Layout State (cookie saved in layout.state hash)\r\n *\r\n *\tCUSTOM STATE-MANAGEMENT (eg, saved in a database)\r\n *\t@example var JSON = myLayout.readState( \"west.isClosed,north.size,south.isHidden\" );\r\n *\t@example myLayout.loadState( JSON );\r\n */\r\n\r\n// tell Layout that the state plugin is available\r\n$.layout.plugins.stateManagement = true;\r\n\r\n//\tAdd State-Management options to layout.defaults\r\n$.layout.defaults.stateManagement = {\r\n\tenabled:\t\tfalse\t// true = enable state-management, even if not using cookies\r\n,\tautoSave:\t\ttrue\t// Save a state-cookie when page exits?\r\n,\tautoLoad:\t\ttrue\t// Load the state-cookie when Layout inits?\r\n,\tanimateLoad:\ttrue\t// animate panes when loading state into an active layout\r\n,\tincludeChildren: true\t// recurse into child layouts to include their state as well\r\n\t// List state-data to save - must be pane-specific\r\n,\tstateKeys:\t\"north.size,south.size,east.size,west.size,\"+\r\n\t\t\t\t\"north.isClosed,south.isClosed,east.isClosed,west.isClosed,\"+\r\n\t\t\t\t\"north.isHidden,south.isHidden,east.isHidden,west.isHidden\"\r\n,\tcookie: {\r\n\t\tname:\t\"\"\t// If not specified, will use Layout.name, else just \"Layout\"\r\n\t,\tdomain:\t\"\"\t// blank = current domain\r\n\t,\tpath:\t\"\"\t// blank = current page, \"/\" = entire website\r\n\t,\texpires: \"\"\t// 'days' to keep cookie - leave blank for 'session cookie'\r\n\t,\tsecure:\tfalse\r\n\t}\r\n};\r\n\r\n// Set stateManagement as a 'layout-option', NOT a 'pane-option'\r\n$.layout.optionsMap.layout.push(\"stateManagement\");\r\n// Update config so layout does not move options into the pane-default branch (panes)\r\n$.layout.config.optionRootKeys.push(\"stateManagement\");\r\n\r\n/*\r\n *\tState Management methods\r\n */\r\n$.layout.state = {\r\n\r\n\t/**\r\n\t * Get the current layout state and save it to a cookie\r\n\t *\r\n\t * myLayout.saveCookie( keys, cookieOpts )\r\n\t *\r\n\t * @param {Object}\t\t\tinst\r\n\t * @param {(string|Array)=}\tkeys\r\n\t * @param {Object=}\t\t\tcookieOpts\r\n\t */\r\n\tsaveCookie: function (inst, keys, cookieOpts) {\r\n\t\tvar o\t= inst.options\r\n\t\t,\tsm\t= o.stateManagement\r\n\t\t,\toC\t= $.extend(true, {}, sm.cookie, cookieOpts || null)\r\n\t\t,\tdata = inst.state.stateData = inst.readState( keys || sm.stateKeys ) // read current panes-state\r\n\t\t;\r\n\t\t$.ui.cookie.write( oC.name || o.name || \"Layout\", $.layout.state.encodeJSON(data), oC );\r\n\t\treturn $.extend(true, {}, data); // return COPY of state.stateData data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove the state cookie\r\n\t *\r\n\t * @param {Object}\tinst\r\n\t */\r\n,\tdeleteCookie: function (inst) {\r\n\t\tvar o = inst.options;\r\n\t\t$.ui.cookie.clear( o.stateManagement.cookie.name || o.name || \"Layout\" );\r\n\t}\r\n\r\n\t/**\r\n\t * Read & return data from the cookie - as JSON\r\n\t *\r\n\t * @param {Object}\tinst\r\n\t */\r\n,\treadCookie: function (inst) {\r\n\t\tvar o = inst.options;\r\n\t\tvar c = $.ui.cookie.read( o.stateManagement.cookie.name || o.name || \"Layout\" );\r\n\t\t// convert cookie string back to a hash and return it\r\n\t\treturn c ? $.layout.state.decodeJSON(c) : {};\r\n\t}\r\n\r\n\t/**\r\n\t * Get data from the cookie and USE IT to loadState\r\n\t *\r\n\t * @param {Object}\tinst\r\n\t */\r\n,\tloadCookie: function (inst) {\r\n\t\tvar c = $.layout.state.readCookie(inst); // READ the cookie\r\n\t\tif (c && !$.isEmptyObject( c )) {\r\n\t\t\tinst.state.stateData = $.extend(true, {}, c); // SET state.stateData\r\n\t\t\tinst.loadState(c); // LOAD the retrieved state\r\n\t\t}\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * Update layout options from the cookie, if one exists\r\n\t *\r\n\t * @param {Object}\t\tinst\r\n\t * @param {Object=}\t\tstateData\r\n\t * @param {boolean=}\tanimate\r\n\t */\r\n,\tloadState: function (inst, data, opts) {\r\n\t\tif (!$.isPlainObject( data ) || $.isEmptyObject( data )) return;\r\n\r\n\t\t// normalize data & cache in the state object\r\n\t\tdata = inst.state.stateData = $.layout.transformData( data ); // panes = default subkey\r\n\r\n\t\t// add missing/default state-restore options\r\n\t\tvar smo = inst.options.stateManagement;\r\n\t\topts = $.extend({\r\n\t\t\tanimateLoad:\t\tfalse //smo.animateLoad\r\n\t\t,\tincludeChildren:\tsmo.includeChildren\r\n\t\t}, opts );\r\n\r\n\t\tif (!inst.state.initialized) {\r\n\t\t\t/*\r\n\t\t\t *\tlayout NOT initialized, so just update its options\r\n\t\t\t */\r\n\t\t\t// MUST remove pane.children keys before applying to options\r\n\t\t\t// use a copy so we don't remove keys from original data\r\n\t\t\tvar o = $.extend(true, {}, data);\r\n\t\t\t//delete o.center; // center has no state-data - only children\r\n\t\t\t$.each($.layout.config.allPanes, function (idx, pane) {\r\n\t\t\t\tif (o[pane]) delete o[pane].children;\t\t   \r\n\t\t\t });\r\n\t\t\t// update CURRENT layout-options with saved state data\r\n\t\t\t$.extend(true, inst.options, o);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/*\r\n\t\t\t *\tlayout already initialized, so modify layout's configuration\r\n\t\t\t */\r\n\t\t\tvar noAnimate = !opts.animateLoad\r\n\t\t\t,\to, c, h, state, open\r\n\t\t\t;\r\n\t\t\t$.each($.layout.config.borderPanes, function (idx, pane) {\r\n\t\t\t\to = data[ pane ];\r\n\t\t\t\tif (!$.isPlainObject( o )) return; // no key, skip pane\r\n\r\n\t\t\t\ts\t= o.size;\r\n\t\t\t\tc\t= o.initClosed;\r\n\t\t\t\th\t= o.initHidden;\r\n\t\t\t\tar\t= o.autoResize\r\n\t\t\t\tstate\t= inst.state[pane];\r\n\t\t\t\topen\t= state.isVisible;\r\n\r\n\t\t\t\t// reset autoResize\r\n\t\t\t\tif (ar)\r\n\t\t\t\t\tstate.autoResize = ar;\r\n\t\t\t\t// resize BEFORE opening\r\n\t\t\t\tif (!open)\r\n\t\t\t\t\tinst._sizePane(pane, s, false, false, false); // false=skipCallback/noAnimation/forceResize\r\n\t\t\t\t// open/close as necessary - DO NOT CHANGE THIS ORDER!\r\n\t\t\t\tif (h === true)\t\t\tinst.hide(pane, noAnimate);\r\n\t\t\t\telse if (c === true)\tinst.close(pane, false, noAnimate);\r\n\t\t\t\telse if (c === false)\tinst.open (pane, false, noAnimate);\r\n\t\t\t\telse if (h === false)\tinst.show (pane, false, noAnimate);\r\n\t\t\t\t// resize AFTER any other actions\r\n\t\t\t\tif (open)\r\n\t\t\t\t\tinst._sizePane(pane, s, false, false, noAnimate); // animate resize if option passed\r\n\t\t\t});\r\n\r\n\t\t\t/*\r\n\t\t\t *\tRECURSE INTO CHILD-LAYOUTS\r\n\t\t\t */\r\n\t\t\tif (opts.includeChildren) {\r\n\t\t\t\tvar paneStateChildren, childState;\r\n\t\t\t\t$.each(inst.children, function (pane, paneChildren) {\r\n\t\t\t\t\tpaneStateChildren = data[pane] ? data[pane].children : 0;\r\n\t\t\t\t\tif (paneStateChildren && paneChildren) {\r\n\t\t\t\t\t\t$.each(paneChildren, function (stateKey, child) {\r\n\t\t\t\t\t\t\tchildState = paneStateChildren[stateKey];\r\n\t\t\t\t\t\t\tif (child && childState)\r\n\t\t\t\t\t\t\t\tchild.loadState( childState );\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the *current layout state* and return it as a hash\r\n\t *\r\n\t * @param {Object=}\t\tinst\t// Layout instance to get state for\r\n\t * @param {object=}\t\t[opts]\t// State-Managements override options\r\n\t */\r\n,\treadState: function (inst, opts) {\r\n\t\t// backward compatility\r\n\t\tif ($.type(opts) === 'string') opts = { keys: opts };\r\n\t\tif (!opts) opts = {};\r\n\t\tvar\tsm\t\t= inst.options.stateManagement\r\n\t\t,\tic\t\t= opts.includeChildren\r\n\t\t,\trecurse\t= ic !== undefined ? ic : sm.includeChildren\r\n\t\t,\tkeys\t= opts.stateKeys || sm.stateKeys\r\n\t\t,\talt\t\t= { isClosed: 'initClosed', isHidden: 'initHidden' }\r\n\t\t,\tstate\t= inst.state\r\n\t\t,\tpanes\t= $.layout.config.allPanes\r\n\t\t,\tdata\t= {}\r\n\t\t,\tpair, pane, key, val\r\n\t\t,\tps, pC, child, array, count, branch\r\n\t\t;\r\n\t\tif ($.isArray(keys)) keys = keys.join(\",\");\r\n\t\t// convert keys to an array and change delimiters from '__' to '.'\r\n\t\tkeys = keys.replace(/__/g, \".\").split(',');\r\n\t\t// loop keys and create a data hash\r\n\t\tfor (var i=0, n=keys.length; i < n; i++) {\r\n\t\t\tpair = keys[i].split(\".\");\r\n\t\t\tpane = pair[0];\r\n\t\t\tkey  = pair[1];\r\n\t\t\tif ($.inArray(pane, panes) < 0) continue; // bad pane!\r\n\t\t\tval = state[ pane ][ key ];\r\n\t\t\tif (val == undefined) continue;\r\n\t\t\tif (key==\"isClosed\" && state[pane][\"isSliding\"])\r\n\t\t\t\tval = true; // if sliding, then *really* isClosed\r\n\t\t\t( data[pane] || (data[pane]={}) )[ alt[key] ? alt[key] : key ] = val;\r\n\t\t}\r\n\r\n\t\t// recurse into the child-layouts for each pane\r\n\t\tif (recurse) {\r\n\t\t\t$.each(panes, function (idx, pane) {\r\n\t\t\t\tpC = inst.children[pane];\r\n\t\t\t\tps = state.stateData[pane];\r\n\t\t\t\tif ($.isPlainObject( pC ) && !$.isEmptyObject( pC )) {\r\n\t\t\t\t\t// ensure a key exists for this 'pane', eg: branch = data.center\r\n\t\t\t\t\tbranch = data[pane] || (data[pane] = {});\r\n\t\t\t\t\tif (!branch.children) branch.children = {};\r\n\t\t\t\t\t$.each( pC, function (key, child) {\r\n\t\t\t\t\t\t// ONLY read state from an initialize layout\r\n\t\t\t\t\t\tif ( child.state.initialized )\r\n\t\t\t\t\t\t\tbranch.children[ key ] = $.layout.state.readState( child );\r\n\t\t\t\t\t\t// if we have PREVIOUS (onLoad) state for this child-layout, KEEP IT!\r\n\t\t\t\t\t\telse if ( ps && ps.children && ps.children[ key ] ) {\r\n\t\t\t\t\t\t\tbranch.children[ key ] = $.extend(true, {}, ps.children[ key ] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t *\tStringify a JSON hash so can save in a cookie or db-field\r\n\t */\r\n,\tencodeJSON: function (json) {\r\n\t\tvar local = window.JSON || {};\r\n\t\treturn (local.stringify || stringify)(json);\r\n\r\n\t\tfunction stringify (h) {\r\n\t\t\tvar D=[], i=0, k, v, t // k = key, v = value\r\n\t\t\t,\ta = $.isArray(h)\r\n\t\t\t;\r\n\t\t\tfor (k in h) {\r\n\t\t\t\tv = h[k];\r\n\t\t\t\tt = typeof v;\r\n\t\t\t\tif (t == 'string')\t\t// STRING - add quotes\r\n\t\t\t\t\tv = '\"'+ v +'\"';\r\n\t\t\t\telse if (t == 'object')\t// SUB-KEY - recurse into it\r\n\t\t\t\t\tv = parse(v);\r\n\t\t\t\tD[i++] = (!a ? '\"'+ k +'\":' : '') + v;\r\n\t\t\t}\r\n\t\t\treturn (a ? '[' : '{') + D.join(',') + (a ? ']' : '}');\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t *\tConvert stringified JSON back to a hash object\r\n\t *\t@see\t\t$.parseJSON(), adding in jQuery 1.4.1\r\n\t */\r\n,\tdecodeJSON: function (str) {\r\n\t\ttry { return $.parseJSON ? $.parseJSON(str) : window[\"eval\"](\"(\"+ str +\")\") || {}; }\r\n\t\tcatch (e) { return {}; }\r\n\t}\r\n\r\n\r\n,\t_create: function (inst) {\r\n\t\tvar s\t= $.layout.state\r\n\t\t,\to\t= inst.options\r\n\t\t,\tsm\t= o.stateManagement\r\n\t\t;\r\n\t\t//\tADD State-Management plugin methods to inst\r\n\t\t $.extend( inst, {\r\n\t\t//\treadCookie - update options from cookie - returns hash of cookie data\r\n\t\t\treadCookie:\t\tfunction () { return s.readCookie(inst); }\r\n\t\t//\tdeleteCookie\r\n\t\t,\tdeleteCookie:\tfunction () { s.deleteCookie(inst); }\r\n\t\t//\tsaveCookie - optionally pass keys-list and cookie-options (hash)\r\n\t\t,\tsaveCookie:\t\tfunction (keys, cookieOpts) { return s.saveCookie(inst, keys, cookieOpts); }\r\n\t\t//\tloadCookie - readCookie and use to loadState() - returns hash of cookie data\r\n\t\t,\tloadCookie:\t\tfunction () { return s.loadCookie(inst); }\r\n\t\t//\tloadState - pass a hash of state to use to update options\r\n\t\t,\tloadState:\t\tfunction (stateData, opts) { s.loadState(inst, stateData, opts); }\r\n\t\t//\treadState - returns hash of current layout-state\r\n\t\t,\treadState:\t\tfunction (keys) { return s.readState(inst, keys); }\r\n\t\t//\tadd JSON utility methods too...\r\n\t\t,\tencodeJSON:\t\ts.encodeJSON\r\n\t\t,\tdecodeJSON:\t\ts.decodeJSON\r\n\t\t});\r\n\r\n\t\t// init state.stateData key, even if plugin is initially disabled\r\n\t\tinst.state.stateData = {};\r\n\r\n\t\t// autoLoad MUST BE one of: data-array, data-hash, callback-function, or TRUE\r\n\t\tif ( !sm.autoLoad ) return;\r\n\r\n\t\t//\tWhen state-data exists in the autoLoad key USE IT,\r\n\t\t//\teven if stateManagement.enabled == false\r\n\t\tif ($.isPlainObject( sm.autoLoad )) {\r\n\t\t\tif (!$.isEmptyObject( sm.autoLoad )) {\r\n\t\t\t\tinst.loadState( sm.autoLoad );\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ( sm.enabled ) {\r\n\t\t\t// update the options from cookie or callback\r\n\t\t\t// if options is a function, call it to get stateData\r\n\t\t\tif ($.isFunction( sm.autoLoad )) {\r\n\t\t\t\tvar d = {};\r\n\t\t\t\ttry {\r\n\t\t\t\t\td = sm.autoLoad( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t\tif (d && $.isPlainObject( d ) && !$.isEmptyObject( d ))\r\n\t\t\t\t\tinst.loadState(d);\r\n\t\t\t}\r\n\t\t\telse // any other truthy value will trigger loadCookie\r\n\t\t\t\tinst.loadCookie();\r\n\t\t}\r\n\t}\r\n\r\n,\t_unload: function (inst) {\r\n\t\tvar sm = inst.options.stateManagement;\r\n\t\tif (sm.enabled && sm.autoSave) {\r\n\t\t\t// if options is a function, call it to save the stateData\r\n\t\t\tif ($.isFunction( sm.autoSave )) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsm.autoSave( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t}\r\n\t\t\telse // any truthy value will trigger saveCookie\r\n\t\t\t\tinst.saveCookie();\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\n// add state initialization method to Layout's onCreate array of functions\r\n$.layout.onCreate.push( $.layout.state._create );\r\n$.layout.onUnload.push( $.layout.state._unload );\r\n\r\n})( jQuery );\r\n\r\n\r\n\r\n/**\r\n * @preserve jquery.layout.buttons 1.0\r\n * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $\r\n *\r\n * Copyright (c) 2011 \r\n *   Kevin Dalman (http://allpro.net)\r\n *\r\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\r\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\r\n *\r\n * @dependancies: UI Layout 1.3.0.rc30.1 or higher\r\n *\r\n * @support: http://groups.google.com/group/jquery-ui-layout\r\n *\r\n * Docs: [ to come ]\r\n * Tips: [ to come ]\r\n */\r\n;(function ($) {\r\n\r\nif (!$.layout) return;\r\n\r\n\r\n// tell Layout that the state plugin is available\r\n$.layout.plugins.buttons = true;\r\n\r\n//\tAdd State-Management options to layout.defaults\r\n$.layout.defaults.autoBindCustomButtons = false;\r\n// Set stateManagement as a layout-option, NOT a pane-option\r\n$.layout.optionsMap.layout.push(\"autoBindCustomButtons\");\r\n\r\n/*\r\n *\tButton methods\r\n */\r\n$.layout.buttons = {\r\n\t// set data used by multiple methods below\r\n\tconfig: {\r\n\t\tborderPanes:\t\"north,south,west,east\"\r\n\t}\r\n\r\n\t/**\r\n\t* Searches for .ui-layout-button-xxx elements and auto-binds them as layout-buttons\r\n\t*\r\n\t* @see  _create()\r\n\t*/\r\n,\tinit: function (inst) {\r\n\t\tvar pre\t\t= \"ui-layout-button-\"\r\n\t\t,\tlayout\t= inst.options.name || \"\"\r\n\t\t,\tname;\r\n\t\t$.each(\"toggle,open,close,pin,toggle-slide,open-slide\".split(\",\"), function (i, action) {\r\n\t\t\t$.each($.layout.buttons.config.borderPanes.split(\",\"), function (ii, pane) {\r\n\t\t\t\t$(\".\"+pre+action+\"-\"+pane).each(function(){\r\n\t\t\t\t\t// if button was previously 'bound', data.layoutName was set, but is blank if layout has no 'name'\r\n\t\t\t\t\tname = $(this).data(\"layoutName\") || $(this).attr(\"layoutName\");\r\n\t\t\t\t\tif (name == undefined || name === layout)\r\n\t\t\t\t\t\tinst.bindButton(this, action, pane);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* Helper function to validate params received by addButton utilities\r\n\t*\r\n\t* Two classes are added to the element, based on the buttonClass...\r\n\t* The type of button is appended to create the 2nd className:\r\n\t*  - ui-layout-button-pin\r\n\t*  - ui-layout-pane-button-toggle\r\n\t*  - ui-layout-pane-button-open\r\n\t*  - ui-layout-pane-button-close\r\n\t*\r\n\t* @param  {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param  {string}   \t\t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\r\n\t* @return {Array.<Object>}\t\tIf both params valid, the element matching 'selector' in a jQuery wrapper - otherwise returns null\r\n\t*/\r\n,\tget: function (inst, selector, pane, action) {\r\n\t\tvar $E\t= $(selector)\r\n\t\t,\to\t= inst.options\r\n\t\t//,\terr\t= o.showErrorMessages\r\n\t\t;\r\n\t\tif ($E.length && $.layout.buttons.config.borderPanes.indexOf(pane) >= 0) {\r\n\t\t\tvar btn = o[pane].buttonClass +\"-\"+ action;\r\n\t\t\t$E\t.addClass( btn +\" \"+ btn +\"-\"+ pane )\r\n\t\t\t\t.data(\"layoutName\", o.name); // add layout identifier - even if blank!\r\n\t\t}\r\n\t\treturn $E;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* NEW syntax for binding layout-buttons - will eventually replace addToggle, addOpen, etc.\r\n\t*\r\n\t* @param {(string|!Object)}\tsel\t\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param {string}\t\t\taction\r\n\t* @param {string}\t\t\tpane\r\n\t*/\r\n,\tbind: function (inst, sel, action, pane) {\r\n\t\tvar _ = $.layout.buttons;\r\n\t\tswitch (action.toLowerCase()) {\r\n\t\t\tcase \"toggle\":\t\t\t_.addToggle\t(inst, sel, pane); break;\t\r\n\t\t\tcase \"open\":\t\t\t_.addOpen\t(inst, sel, pane); break;\r\n\t\t\tcase \"close\":\t\t\t_.addClose\t(inst, sel, pane); break;\r\n\t\t\tcase \"pin\":\t\t\t\t_.addPin\t(inst, sel, pane); break;\r\n\t\t\tcase \"toggle-slide\":\t_.addToggle\t(inst, sel, pane, true); break;\t\r\n\t\t\tcase \"open-slide\":\t\t_.addOpen\t(inst, sel, pane, true); break;\r\n\t\t}\r\n\t\treturn inst;\r\n\t}\r\n\r\n\t/**\r\n\t* Add a custom Toggler button for a pane\r\n\t*\r\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param {string}  \t\t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\r\n\t* @param {boolean=}\t\t\tslide \t\ttrue = slide-open, false = pin-open\r\n\t*/\r\n,\taddToggle: function (inst, selector, pane, slide) {\r\n\t\t$.layout.buttons.get(inst, selector, pane, \"toggle\")\r\n\t\t\t.click(function(evt){\r\n\t\t\t\tinst.toggle(pane, !!slide);\r\n\t\t\t\tevt.stopPropagation();\r\n\t\t\t});\r\n\t\treturn inst;\r\n\t}\r\n\r\n\t/**\r\n\t* Add a custom Open button for a pane\r\n\t*\r\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param {string}\t\t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\r\n\t* @param {boolean=}\t\t\tslide \t\ttrue = slide-open, false = pin-open\r\n\t*/\r\n,\taddOpen: function (inst, selector, pane, slide) {\r\n\t\t$.layout.buttons.get(inst, selector, pane, \"open\")\r\n\t\t\t.attr(\"title\", inst.options[pane].tips.Open)\r\n\t\t\t.click(function (evt) {\r\n\t\t\t\tinst.open(pane, !!slide);\r\n\t\t\t\tevt.stopPropagation();\r\n\t\t\t});\r\n\t\treturn inst;\r\n\t}\r\n\r\n\t/**\r\n\t* Add a custom Close button for a pane\r\n\t*\r\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param {string}   \t\tpane \t\tName of the pane the button is for: 'north', 'south', etc.\r\n\t*/\r\n,\taddClose: function (inst, selector, pane) {\r\n\t\t$.layout.buttons.get(inst, selector, pane, \"close\")\r\n\t\t\t.attr(\"title\", inst.options[pane].tips.Close)\r\n\t\t\t.click(function (evt) {\r\n\t\t\t\tinst.close(pane);\r\n\t\t\t\tevt.stopPropagation();\r\n\t\t\t});\r\n\t\treturn inst;\r\n\t}\r\n\r\n\t/**\r\n\t* Add a custom Pin button for a pane\r\n\t*\r\n\t* Four classes are added to the element, based on the paneClass for the associated pane...\r\n\t* Assuming the default paneClass and the pin is 'up', these classes are added for a west-pane pin:\r\n\t*  - ui-layout-pane-pin\r\n\t*  - ui-layout-pane-west-pin\r\n\t*  - ui-layout-pane-pin-up\r\n\t*  - ui-layout-pane-west-pin-up\r\n\t*\r\n\t* @param {(string|!Object)}\tselector\tjQuery selector (or element) for button, eg: \".ui-layout-north .toggle-button\"\r\n\t* @param {string}   \t\tpane \t\tName of the pane the pin is for: 'north', 'south', etc.\r\n\t*/\r\n,\taddPin: function (inst, selector, pane) {\r\n\t\tvar $E = $.layout.buttons.get(inst, selector, pane, \"pin\");\r\n\t\tif ($E.length) {\r\n\t\t\tvar s = inst.state[pane];\r\n\t\t\t$E.click(function (evt) {\r\n\t\t\t\t$.layout.buttons.setPinState(inst, $(this), pane, (s.isSliding || s.isClosed));\r\n\t\t\t\tif (s.isSliding || s.isClosed) inst.open( pane ); // change from sliding to open\r\n\t\t\t\telse inst.close( pane ); // slide-closed\r\n\t\t\t\tevt.stopPropagation();\r\n\t\t\t});\r\n\t\t\t// add up/down pin attributes and classes\r\n\t\t\t$.layout.buttons.setPinState(inst, $E, pane, (!s.isClosed && !s.isSliding));\r\n\t\t\t// add this pin to the pane data so we can 'sync it' automatically\r\n\t\t\t// PANE.pins key is an array so we can store multiple pins for each pane\r\n\t\t\ts.pins.push( selector ); // just save the selector string\r\n\t\t}\r\n\t\treturn inst;\r\n\t}\r\n\r\n\t/**\r\n\t* Change the class of the pin button to make it look 'up' or 'down'\r\n\t*\r\n\t* @see  addPin(), syncPins()\r\n\t* @param {Array.<Object>}\t$Pin\tThe pin-span element in a jQuery wrapper\r\n\t* @param {string}\tpane\tThese are the params returned to callbacks by layout()\r\n\t* @param {boolean}\tdoPin\ttrue = set the pin 'down', false = set it 'up'\r\n\t*/\r\n,\tsetPinState: function (inst, $Pin, pane, doPin) {\r\n\t\tvar updown = $Pin.attr(\"pin\");\r\n\t\tif (updown && doPin === (updown==\"down\")) return; // already in correct state\r\n\t\tvar\r\n\t\t\tpo\t\t= inst.options[pane]\r\n\t\t,\tlang\t= po.tips\r\n\t\t,\tpin\t\t= po.buttonClass +\"-pin\"\r\n\t\t,\tside\t= pin +\"-\"+ pane\r\n\t\t,\tUP\t\t= pin +\"-up \"+\tside +\"-up\"\r\n\t\t,\tDN\t\t= pin +\"-down \"+side +\"-down\"\r\n\t\t;\r\n\t\t$Pin\r\n\t\t\t.attr(\"pin\", doPin ? \"down\" : \"up\") // logic\r\n\t\t\t.attr(\"title\", doPin ? lang.Unpin : lang.Pin)\r\n\t\t\t.removeClass( doPin ? UP : DN ) \r\n\t\t\t.addClass( doPin ? DN : UP ) \r\n\t\t;\r\n\t}\r\n\r\n\t/**\r\n\t* INTERNAL function to sync 'pin buttons' when pane is opened or closed\r\n\t* Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes\r\n\t*\r\n\t* @see  open(), close()\r\n\t* @param {string}\tpane   These are the params returned to callbacks by layout()\r\n\t* @param {boolean}\tdoPin  True means set the pin 'down', False means 'up'\r\n\t*/\r\n,\tsyncPinBtns: function (inst, pane, doPin) {\r\n\t\t// REAL METHOD IS _INSIDE_ LAYOUT - THIS IS HERE JUST FOR REFERENCE\r\n\t\t$.each(state[pane].pins, function (i, selector) {\r\n\t\t\t$.layout.buttons.setPinState(inst, $(selector), pane, doPin);\r\n\t\t});\r\n\t}\r\n\r\n\r\n,\t_load: function (inst) {\r\n\t\t//\tADD Button methods to Layout Instance\r\n\t\t$.extend( inst, {\r\n\t\t\tbindButton:\t\tfunction (selector, action, pane) { return $.layout.buttons.bind(inst, selector, action, pane); }\r\n\t\t//\tDEPRECATED METHODS...\r\n\t\t,\taddToggleBtn:\tfunction (selector, pane, slide) { return $.layout.buttons.addToggle(inst, selector, pane, slide); }\r\n\t\t,\taddOpenBtn:\t\tfunction (selector, pane, slide) { return $.layout.buttons.addOpen(inst, selector, pane, slide); }\r\n\t\t,\taddCloseBtn:\tfunction (selector, pane) { return $.layout.buttons.addClose(inst, selector, pane); }\r\n\t\t,\taddPinBtn:\t\tfunction (selector, pane) { return $.layout.buttons.addPin(inst, selector, pane); }\r\n\t\t});\r\n\r\n\t\t// init state array to hold pin-buttons\r\n\t\tfor (var i=0; i<4; i++) {\r\n\t\t\tvar pane = $.layout.buttons.config.borderPanes[i];\r\n\t\t\tinst.state[pane].pins = [];\r\n\t\t}\r\n\r\n\t\t// auto-init buttons onLoad if option is enabled\r\n\t\tif ( inst.options.autoBindCustomButtons )\r\n\t\t\t$.layout.buttons.init(inst);\r\n\t}\r\n\r\n,\t_unload: function (inst) {\r\n\t\t// TODO: unbind all buttons???\r\n\t}\r\n\r\n};\r\n\r\n// add initialization method to Layout's onLoad array of functions\r\n$.layout.onLoad.push(  $.layout.buttons._load );\r\n//$.layout.onUnload.push( $.layout.buttons._unload );\r\n\r\n})( jQuery );\r\n\r\n\r\n\r\n\r\n/**\r\n * jquery.layout.browserZoom 1.0\r\n * $Date: 2011-12-29 08:00:00 (Thu, 29 Dec 2011) $\r\n *\r\n * Copyright (c) 2012 \r\n *   Kevin Dalman (http://allpro.net)\r\n *\r\n * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)\r\n * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.\r\n *\r\n * @requires: UI Layout 1.3.0.rc30.1 or higher\r\n *\r\n * @see: http://groups.google.com/group/jquery-ui-layout\r\n *\r\n * TODO: Extend logic to handle other problematic zooming in browsers\r\n * TODO: Add hotkey/mousewheel bindings to _instantly_ respond to these zoom event\r\n */\r\n(function ($) {\r\n\r\n// tell Layout that the plugin is available\r\n$.layout.plugins.browserZoom = true;\r\n\r\n$.layout.defaults.browserZoomCheckInterval = 1000;\r\n$.layout.optionsMap.layout.push(\"browserZoomCheckInterval\");\r\n\r\n/*\r\n *\tbrowserZoom methods\r\n */\r\n$.layout.browserZoom = {\r\n\r\n\t_init: function (inst) {\r\n\t\t// abort if browser does not need this check\r\n\t\tif ($.layout.browserZoom.ratio() !== false)\r\n\t\t\t$.layout.browserZoom._setTimer(inst);\r\n\t}\r\n\r\n,\t_setTimer: function (inst) {\r\n\t\t// abort if layout destroyed or browser does not need this check\r\n\t\tif (inst.destroyed) return;\r\n\t\tvar o\t= inst.options\r\n\t\t,\ts\t= inst.state\r\n\t\t//\tdon't need check if inst has parentLayout, but check occassionally in case parent destroyed!\r\n\t\t//\tMINIMUM 100ms interval, for performance\r\n\t\t,\tms\t= inst.hasParentLayout ?  5000 : Math.max( o.browserZoomCheckInterval, 100 )\r\n\t\t;\r\n\t\t// set the timer\r\n\t\tsetTimeout(function(){\r\n\t\t\tif (inst.destroyed || !o.resizeWithWindow) return;\r\n\t\t\tvar d = $.layout.browserZoom.ratio();\r\n\t\t\tif (d !== s.browserZoom) {\r\n\t\t\t\ts.browserZoom = d;\r\n\t\t\t\tinst.resizeAll();\r\n\t\t\t}\r\n\t\t\t// set a NEW timeout\r\n\t\t\t$.layout.browserZoom._setTimer(inst);\r\n\t\t}\r\n\t\t,\tms );\r\n\t}\r\n\r\n,\tratio: function () {\r\n\t\tvar w\t= window\r\n\t\t,\ts\t= screen\r\n\t\t,\td\t= document\r\n\t\t,\tdE\t= d.documentElement || d.body\r\n\t\t,\tb\t= $.layout.browser\r\n\t\t,\tv\t= b.version\r\n\t\t,\tr, sW, cW\r\n\t\t;\r\n\t\t// we can ignore all browsers that fire window.resize event onZoom\r\n\t\tif (!b.msie || v > 8)\r\n\t\t\treturn false; // don't need to track zoom\r\n\t\tif (s.deviceXDPI && s.systemXDPI) // syntax compiler hack\r\n\t\t\treturn calc(s.deviceXDPI, s.systemXDPI);\r\n\t\t// everything below is just for future reference!\r\n\t\tif (b.webkit && (r = d.body.getBoundingClientRect))\r\n\t\t\treturn calc((r.left - r.right), d.body.offsetWidth);\r\n\t\tif (b.webkit && (sW = w.outerWidth))\r\n\t\t\treturn calc(sW, w.innerWidth);\r\n\t\tif ((sW = s.width) && (cW = dE.clientWidth))\r\n\t\t\treturn calc(sW, cW);\r\n\t\treturn false; // no match, so cannot - or don't need to - track zoom\r\n\r\n\t\tfunction calc (x,y) { return (parseInt(x,10) / parseInt(y,10) * 100).toFixed(); }\r\n\t}\r\n\r\n};\r\n// add initialization method to Layout's onLoad array of functions\r\n$.layout.onReady.push( $.layout.browserZoom._init );\r\n\r\n\r\n})( jQuery );\r\n\r\n\r\n\r\n\r\n/**\r\n *\tUI Layout Plugin: Slide-Offscreen Animation\r\n *\r\n *\tPrevent panes from being 'hidden' so that an iframes/objects \r\n *\tdoes not reload/refresh when pane 'opens' again.\r\n *\tThis plug-in adds a new animation called \"slideOffscreen\".\r\n *\tIt is identical to the normal \"slide\" effect, but avoids hiding the element\r\n *\r\n *\tRequires Layout 1.3.0.RC30.1 or later for Close offscreen\r\n *\tRequires Layout 1.3.0.RC30.5 or later for Hide, initClosed & initHidden offscreen\r\n *\r\n *\tVersion:\t1.1 - 2012-11-18\r\n *\tAuthor:\t\tKevin Dalman (kevin@jquery-dev.com)\r\n *\t@preserve\tjquery.layout.slideOffscreen-1.1.js\r\n */\r\n;(function ($) {\r\n\r\n// Add a new \"slideOffscreen\" effect\r\nif ($.effects) {\r\n\r\n\t// add an option so initClosed and initHidden will work\r\n\t$.layout.defaults.panes.useOffscreenClose = false; // user must enable when needed\r\n\t/* set the new animation as the default for all panes\r\n\t$.layout.defaults.panes.fxName = \"slideOffscreen\";\r\n\t*/\r\n\r\n\tif ($.layout.plugins)\r\n\t\t$.layout.plugins.effects.slideOffscreen = true;\r\n\r\n\t// dupe 'slide' effect defaults as new effect defaults\r\n\t$.layout.effects.slideOffscreen = $.extend(true, {}, $.layout.effects.slide);\r\n\r\n\t// add new effect to jQuery UI\r\n\t$.effects.slideOffscreen = function(o) {\r\n\t\treturn this.queue(function(){\r\n\r\n\t\t\tvar fx\t\t= $.effects\r\n\t\t\t,\topt\t\t= o.options\r\n\t\t\t,\t$el\t\t= $(this)\r\n\t\t\t,\tpane\t= $el.data('layoutEdge')\r\n\t\t\t,\tstate\t= $el.data('parentLayout').state\r\n\t\t\t,\tdist\t= state[pane].size\r\n\t\t\t,\ts\t\t= this.style\r\n\t\t\t,\tprops\t= ['top','bottom','left','right']\r\n\t\t\t\t// Set options\r\n\t\t\t,\tmode\t= fx.setMode($el, opt.mode || 'show') // Set Mode\r\n\t\t\t,\tshow\t= (mode == 'show')\r\n\t\t\t,\tdir\t\t= opt.direction || 'left' // Default Direction\r\n\t\t\t,\tref\t \t= (dir == 'up' || dir == 'down') ? 'top' : 'left'\r\n\t\t\t,\tpos\t\t= (dir == 'up' || dir == 'left')\r\n\t\t\t,\toffscrn\t= $.layout.config.offscreenCSS || {}\r\n\t\t\t,\tkeyLR\t= $.layout.config.offscreenReset\r\n\t\t\t,\tkeyTB\t= 'offscreenResetTop' // only used internally\r\n\t\t\t,\tanimation = {}\r\n\t\t\t;\r\n\t\t\t// Animation settings\r\n\t\t\tanimation[ref]\t= (show ? (pos ? '+=' : '-=') : (pos ? '-=' : '+=')) + dist;\r\n\r\n\t\t\tif (show) { // show() animation, so save top/bottom but retain left/right set when 'hidden'\r\n\t\t\t\t$el.data(keyTB, { top: s.top, bottom: s.bottom });\r\n\r\n\t\t\t\t// set the top or left offset in preparation for animation\r\n\t\t\t\t// Note: ALL animations work by shifting the top or left edges\r\n\t\t\t\tif (pos) { // top (north) or left (west)\r\n\t\t\t\t\t$el.css(ref, isNaN(dist) ? \"-\" + dist : -dist); // Shift outside the left/top edge\r\n\t\t\t\t}\r\n\t\t\t\telse { // bottom (south) or right (east) - shift all the way across container\r\n\t\t\t\t\tif (dir === 'right')\r\n\t\t\t\t\t\t$el.css({ left: state.container.layoutWidth, right: 'auto' });\r\n\t\t\t\t\telse // dir === bottom\r\n\t\t\t\t\t\t$el.css({ top: state.container.layoutHeight, bottom: 'auto' });\r\n\t\t\t\t}\r\n\t\t\t\t// restore the left/right setting if is a top/bottom animation\r\n\t\t\t\tif (ref === 'top')\r\n\t\t\t\t\t$el.css( $el.data( keyLR ) || {} );\r\n\t\t\t}\r\n\t\t\telse { // hide() animation, so save ALL CSS\r\n\t\t\t\t$el.data(keyTB, { top: s.top, bottom: s.bottom });\r\n\t\t\t\t$el.data(keyLR, { left: s.left, right: s.right });\r\n\t\t\t}\r\n\r\n\t\t\t// Animate\r\n\t\t\t$el.show().animate(animation, { queue: false, duration: o.duration, easing: opt.easing, complete: function(){\r\n\t\t\t\t// Restore top/bottom\r\n\t\t\t\tif ($el.data( keyTB ))\r\n\t\t\t\t\t$el.css($el.data( keyTB )).removeData( keyTB );\r\n\t\t\t\tif (show) // Restore left/right too\r\n\t\t\t\t\t$el.css($el.data( keyLR ) || {}).removeData( keyLR );\r\n\t\t\t\telse // Move the pane off-screen (left: -99999, right: 'auto')\r\n\t\t\t\t\t$el.css( offscrn );\r\n\r\n\t\t\t\tif (o.callback) o.callback.apply(this, arguments); // Callback\r\n\t\t\t\t$el.dequeue();\r\n\t\t\t}});\r\n\r\n\t\t});\r\n\t};\r\n\r\n}\r\n\r\n})( jQuery );\r\n","/**\r\n * Modernizr 2.6.2 (Custom Build) | MIT & BSD\r\n * Build: http://modernizr.com/download/#-touch-shiv-mq-teststyles-prefixes-load\r\n*/\r\nwindow.Modernizr=function(j,d,F){var k={},o=d.documentElement,D=d.createElement(\"modernizr\"),D=D.style,E=\" -webkit- -moz- -o- -ms- \".split(\" \"),B={},s=[],v=s.slice,r,C=function(b,c,q,z){var k,j,n=d.createElement(\"div\"),t=d.body,u=t||d.createElement(\"body\");if(parseInt(q,10))for(;q--;)k=d.createElement(\"div\"),k.id=z?z[q]:\"modernizr\"+(q+1),n.appendChild(k);q=['&#173;<style id=\"smodernizr\">',b,\"</style>\"].join(\"\");n.id=\"modernizr\";(t?n:u).innerHTML+=q;u.appendChild(n);if(!t)u.style.background=\"\",u.style.overflow=\r\n\"hidden\",j=o.style.overflow,o.style.overflow=\"hidden\",o.appendChild(u);b=c(n,b);t?n.parentNode.removeChild(n):(u.parentNode.removeChild(u),o.style.overflow=j);return!!b},x={}.hasOwnProperty,y;y=typeof x!==\"undefined\"&&typeof x.call!==\"undefined\"?function(b,c){return x.call(b,c)}:function(b,c){return c in b&&typeof b.constructor.prototype[c]===\"undefined\"};if(!Function.prototype.bind)Function.prototype.bind=function(b){var c=this;if(typeof c!=\"function\")throw new TypeError;var d=v.call(arguments,1),\r\nk=function(){if(this instanceof k){var j=function(){};j.prototype=c.prototype;var j=new j,o=c.apply(j,d.concat(v.call(arguments)));return Object(o)===o?o:j}else return c.apply(b,d.concat(v.call(arguments)))};return k};B.touch=function(){var b;\"ontouchstart\"in j||j.DocumentTouch&&d instanceof DocumentTouch?b=!0:C([\"@media (\",E.join(\"touch-enabled),(\"),\"modernizr){#modernizr{top:9px;position:absolute}}\"].join(\"\"),function(c){b=c.offsetTop===9});return b};for(var A in B)y(B,A)&&(r=A.toLowerCase(),k[r]=\r\nB[A](),s.push((k[r]?\"\":\"no-\")+r));k.addTest=function(b,c){if(typeof b==\"object\")for(var d in b)y(b,d)&&k.addTest(d,b[d]);else{b=b.toLowerCase();if(k[b]!==F)return k;c=typeof c==\"function\"?c():c;typeof enableClasses!==\"undefined\"&&enableClasses&&(o.className+=\" \"+(c?\"\":\"no-\")+b);k[b]=c}return k};D.cssText=\"\";D=null;(function(b,c){function d(){var a=r.elements;return typeof a==\"string\"?a.split(\" \"):a}function k(g){var f=a[g[v]];f||(f={},h++,g[v]=h,a[h]=f);return f}function j(a,f,b){f||(f=c);if(m)return f.createElement(a);\r\nb||(b=k(f));f=b.cache[a]?b.cache[a].cloneNode():w.test(a)?(b.cache[a]=b.createElem(a)).cloneNode():b.createElem(a);return f.canHaveChildren&&!u.test(a)?b.frag.appendChild(f):f}function o(a,b){if(!b.cache)b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag();a.createElement=function(c){return!r.shivMethods?b.createElem(c):j(c,a,b)};a.createDocumentFragment=Function(\"h,f\",\"return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(\"+d().join().replace(/\\w+/g,\r\nfunction(a){b.createElem(a);b.frag.createElement(a);return'c(\"'+a+'\")'})+\");return n}\")(r,b.frag)}function n(a){a||(a=c);var b=k(a);if(r.shivCSS&&!s&&!b.hasCSS){var d,e=a;d=e.createElement(\"p\");e=e.getElementsByTagName(\"head\")[0]||e.documentElement;d.innerHTML=\"x<style>article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}</style>\";d=e.insertBefore(d.lastChild,e.firstChild);b.hasCSS=!!d}m||o(a,b);return a}var t=b.html5||{},u=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,\r\nw=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,s,v=\"_html5shiv\",h=0,a={},m;(function(){try{var a=c.createElement(\"a\");a.innerHTML=\"<xyz></xyz>\";s=\"hidden\"in a;m=a.childNodes.length==1||function(){c.createElement(\"a\");var a=c.createDocumentFragment();return typeof a.cloneNode==\"undefined\"||typeof a.createDocumentFragment==\"undefined\"||typeof a.createElement==\"undefined\"}()}catch(b){m=s=!0}})();var r={elements:t.elements||\"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video\",\r\nshivCSS:t.shivCSS!==!1,supportsUnknownElements:m,shivMethods:t.shivMethods!==!1,type:\"default\",shivDocument:n,createElement:j,createDocumentFragment:function(a,b){a||(a=c);if(m)return a.createDocumentFragment();for(var b=b||k(a),i=b.frag.cloneNode(),e=0,h=d(),j=h.length;e<j;e++)i.createElement(h[e]);return i}};b.html5=r;n(c)})(this,d);k._version=\"2.6.2\";k._prefixes=E;k.mq=function(b){var c=j.matchMedia||j.msMatchMedia;if(c)return c(b).matches;var d;C(\"@media \"+b+\" { #modernizr { position: absolute; } }\",\r\nfunction(b){d=(j.getComputedStyle?getComputedStyle(b,null):b.currentStyle).position==\"absolute\"});return d};k.testStyles=C;return k}(this,this.document);\r\n","// yepnope.js\r\n// v2.0.0\r\n//\r\n// by\r\n// Alex Sexton - @slexaxton - alexsexton[at]gmail.com\r\n// Ralph Holzmann - @rlph - ralphholzmann[at]gmail.com\r\n//\r\n// http://yepnopejs.com/\r\n// https://github.com/SlexAxton/yepnope.js/\r\n//\r\n// New BSD\r\n//\r\n// Consider inlining this script after minifying\r\n\r\nwindow.yepnope = (function (window, document, undef) {\r\n    // Yepnope's style is intentionally very flat to aid in\r\n    // minification. The authors are usually against too much\r\n    // self-minification, but in the case of a script loader, we're\r\n    // especially file size sensitive.\r\n\r\n    // Some aliases\r\n    var sTimeout = window.setTimeout;\r\n    var firstScript;\r\n    var scriptsQueue = [];\r\n    var count = 0;\r\n    var toString = {}.toString;\r\n\r\n    function noop() { }\r\n\r\n    // Helper functions\r\n    function isObject(obj) {\r\n        return Object(obj) === obj;\r\n    }\r\n\r\n    function isString(s) {\r\n        return typeof s == 'string';\r\n    }\r\n\r\n    // Loader Utilities\r\n    function uniq() {\r\n        return 'yn_' + (count++);\r\n    }\r\n\r\n    function readFirstScript() {\r\n        if (!firstScript || !firstScript.parentNode) {\r\n            firstScript = document.getElementsByTagName('script')[0];\r\n        }\r\n    }\r\n\r\n    function isFileReady(readyState) {\r\n        // Check to see if any of the ways a file can be ready are available as properties on the file's element\r\n        return (!readyState || readyState == 'loaded' || readyState == 'complete' || readyState == 'uninitialized');\r\n    }\r\n\r\n    function runWhenReady(src, cb) {\r\n        cb.call(window);\r\n    }\r\n\r\n    // Inject a script into the page and know when it's done\r\n    function injectJs(options, cb) {\r\n        var src;\r\n        var attrs;\r\n        var timeout;\r\n\r\n        if (isString(options)) {\r\n            src = options;\r\n        }\r\n        else if (isObject(options)) {\r\n            // Allow rewritten url to take precedence\r\n            src = options._url || options.src;\r\n            attrs = options.attrs;\r\n            timeout = options.timeout;\r\n        }\r\n\r\n        cb = cb || noop;\r\n        attrs = attrs || {};\r\n\r\n        var script = document.createElement('script');\r\n        var done;\r\n        var i;\r\n\r\n        timeout = timeout || yepnope.errorTimeout;\r\n\r\n        script.src = src;\r\n\r\n        // Add our extra attributes to the script element\r\n        for (i in attrs) {\r\n            script.setAttribute(i, attrs[i]);\r\n        }\r\n\r\n        // Bind to load events\r\n        script.onreadystatechange = script.onload = function () {\r\n\r\n            if (!done && isFileReady(script.readyState)) {\r\n                // Set done to prevent this function from being called twice.\r\n                done = 1;\r\n\r\n                // Just run the callback\r\n                runWhenReady(src, cb);\r\n            }\r\n\r\n            // Handle memory leak in IE\r\n            script.onload = script.onreadystatechange = script.onerror = null;\r\n        };\r\n\r\n        // This won't work in every browser, but\r\n        // would be helpful in those that it does.\r\n        // http://stackoverflow.com/questions/2027849/how-to-trigger-script-onerror-in-internet-explorer/2032014#2032014\r\n        // For those that don't support it, the timeout will be the backup\r\n        script.onerror = function () {\r\n            // Don't call the callback again, so we mark it done\r\n            done = 1;\r\n            cb(new Error('Script Error: ' + src));\r\n            // We don't waste bytes on cleaning up memory in error cases\r\n            // because hopefully it doesn't happen often enough to matter.\r\n            // And you're probably already in an 'uh-oh' situation.\r\n        };\r\n\r\n        // 404 Fallback\r\n        sTimeout(function () {\r\n            // Don't do anything if the script has already finished\r\n            if (!done) {\r\n                // Mark it as done, which means the callback won't run again\r\n                done = 1;\r\n\r\n                // Might as well pass in an error-state if we fire the 404 fallback\r\n                cb(new Error('Timeout: ' + src));\r\n                // Maybe...\r\n                script.parentNode.removeChild(script);\r\n            }\r\n        }, timeout);\r\n\r\n        // Inject script into to document\r\n        readFirstScript();\r\n        firstScript.parentNode.insertBefore(script, firstScript);\r\n    }\r\n\r\n    function injectCss(options, cb) {\r\n        var attrs = {};\r\n        var href;\r\n        var i;\r\n        var media;\r\n\r\n        // optionally accept an object of settings\r\n        // or a string that's the url\r\n        if (isObject(options)) {\r\n            // allow the overriden _url property to take precendence\r\n            href = options._url || options.href;\r\n            attrs = options.attrs || {};\r\n        }\r\n        else if (isString(options)) {\r\n            href = options;\r\n        }\r\n\r\n        // Create stylesheet link\r\n        var link = document.createElement('link');\r\n\r\n        cb = cb || noop;\r\n\r\n        // Add attributes\r\n        link.href = href;\r\n        link.rel = 'stylesheet';\r\n        // Technique to force non-blocking loading from:\r\n        // https://github.com/filamentgroup/loadCSS/blob/master/loadCSS.js#L20\r\n        link.media = 'only x';\r\n        link.type = 'text/css';\r\n\r\n        // On next tick, just set the media to what it's supposed to be\r\n        sTimeout(function () {\r\n            link.media = attrs.media || 'all';\r\n        });\r\n\r\n        // Add our extra attributes to the link element\r\n        for (i in attrs) {\r\n            link.setAttribute(i, attrs[i]);\r\n        }\r\n\r\n        readFirstScript();\r\n        // We append link tags so the cascades work as expected.\r\n        // A little more dangerous, but if you're injecting CSS\r\n        // dynamically, you probably can handle it.\r\n        firstScript.parentNode.appendChild(link);\r\n\r\n        // Always just run the callback for CSS on next tick. We're not\r\n        // going to try to normalize this, so don't worry about runwhenready here.\r\n        sTimeout(function () {\r\n            cb.call(window);\r\n        });\r\n    }\r\n\r\n    function getExtension(url) {\r\n        //The extension is always the last characters before the ? and after a period.\r\n        //The previous method was not accounting for the possibility of a period in the query string.\r\n        var b = url.split('?')[0];\r\n        return b.substr(b.lastIndexOf('.') + 1);\r\n    }\r\n\r\n    function defaultUrlFormatter(base, tests) {\r\n        var url = base;\r\n        var passed = [];\r\n        var failed = [];\r\n\r\n        for (var i in tests) {\r\n            if (tests.hasOwnProperty(i)) {\r\n                if (tests[i]) {\r\n                    passed.push(encodeURIComponent(i));\r\n                }\r\n                else {\r\n                    failed.push(encodeURIComponent(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (passed.length || failed.length) {\r\n            url += '?';\r\n        }\r\n\r\n        if (passed.length) {\r\n            url += 'yep=' + passed.join(',');\r\n        }\r\n\r\n        if (failed.length) {\r\n            url += (passed.length ? '&' : '') + 'nope=' + failed.join(',');\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    // The leaked function. Mostly just takes a set\r\n    // of arguments, and then passes them to be run.\r\n    function yepnope(url, tests, cb) {\r\n        var options;\r\n\r\n        if (isObject(url)) {\r\n            // It was just kidding about being the url\r\n            options = url;\r\n            // Can't ever have both, so this is fine\r\n            url = options.src || options.href;\r\n        }\r\n\r\n        url = yepnope.urlFormatter(url, tests);\r\n\r\n        if (!options) {\r\n            options = { _url: url };\r\n        }\r\n        else {\r\n            options._url = url;\r\n        }\r\n\r\n        var type = getExtension(url);\r\n\r\n        if (type === 'js') {\r\n            injectJs(options, cb);\r\n        }\r\n        else if (type === 'css') {\r\n            injectCss(options, cb);\r\n        }\r\n        else {\r\n            throw new Error('Unable to determine filetype.');\r\n        }\r\n    }\r\n\r\n    // Add a default for the error timer\r\n    yepnope.errorTimeout = 10e3;\r\n    // Expose no BS script injection\r\n    yepnope.injectJs = injectJs;\r\n    // Expose super-lightweight css injector\r\n    yepnope.injectCss = injectCss;\r\n    // Allow someone to override the url writer\r\n    yepnope.urlFormatter = defaultUrlFormatter;\r\n\r\n    return yepnope;\r\n})(window, document);"]}